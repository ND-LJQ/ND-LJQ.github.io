{"title":"js学习笔记","uid":"aa70f67d4ef6e029542c043a9994018c","slug":"js学习笔记","date":"2023-07-19T12:53:54.000Z","updated":"2023-07-19T13:05:40.582Z","comments":true,"path":"api/articles/js学习笔记.json","keywords":null,"cover":[],"content":"<h1 id=\"xiao-zhi-shi\">小知识</h1>\n<p>浏览器内核</p>\n<p>Webkit 苹果开发 用于 Safari</p>\n<p>Blink Webkit 的一个分支,Google 开发,目前应用于 Google Chrome,Edge,Opera 等浏览器</p>\n<h1 id=\"liu-lan-qi-de-xuan-ran-guo-cheng\">浏览器的渲染过程</h1>\n<p><img src=\"js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%94%A8%E6%88%B7%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E4%B8%AD%E8%BE%93%E5%85%A5url.svg\" alt=\"\"></p>\n<h1 id=\"js-yin-qing\">Js 引擎</h1>\n<p><strong>js 引擎</strong>将 <strong>js 代码</strong>翻译成<strong>CPU 指令</strong>来执行</p>\n<h2 id=\"v-8-yin-qing\" id=\"V8-引擎\">V8 引擎</h2>\n<p><img src=\"js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/V8%E5%BC%95%E6%93%8E%E8%A7%A3%E6%9E%90js.png\" alt=\"\"></p>\n<p>1.js 引擎在解析成 AST 语法树中会在堆内存中默认创建一个全局对象 globalObject ,并将我们创建的属性名(值为 undefined)(普通变量)添加到 该全局对象中</p>\n<p>预解析时函数会在内存中创建一个储存空间(函数对象) (函数 的父级作用域在定义时就已经确定,不会因调用的位置而改变)</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">解析时全局对象时</span><span class=\"token punctuation\">(</span><span class=\"token constant\">GO</span><span class=\"token punctuation\">)</span>\n会首先解析变量 后声明函数并赋值<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">在预解析函数时(AO)\n首先形参和变量的声明\n然后实参赋值给形参\n最后声明函数并赋值<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"images/js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Snipaste_2022-09-02_16-30-06.png\" alt=\"\"></p>\n<p>然后在全局对象(GO)中则储存函数的地址</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token literal-property property\">GlobalObject</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span>0x<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>2.运行代码时</p>\n<p>V8 引擎为了执行代码,其内部会有一个执行上下文栈(Execution Context Stack)(函数调用栈) 内放将要执行的函数</p>\n<p>全局代码执行顺序</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'ljq'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> num3 <span class=\"token operator\">=</span> num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>此时 V8 引擎创建了一个执行上下文栈 后创建一个全局执行上下文</p>\n<p>此时创建 GEC(全局执行上下文) ,其中的 VO 指向 解析时创建的 GO</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">在最新的规范中VO(variable Object)已经被更新为VE(VariableEnvironment)(变量环境)\n\n在执行代码中的变量和函数声明会作为环境记录(Environment Record) 添加到变量环境中,\n\n对于函数,其参数也会被作为环境记录被添加到变量环境中<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"images/js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Snipaste_2022-09-02_15-29-5.png\" alt=\"\"></p>\n<p>而函数则较为特殊</p>\n<p>全局函数的执行过程</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> m <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>接着在执行上下文栈中创建一个函数执行上下文(FEC) (函数实例)</p>\n<p><img src=\"images/js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Snipaste_2022-09-02_15-29-50.png\" alt=\"Snipaste_2022-09-02_15-29-50\"></p>\n<p>此时 AO(Actiction Object)为</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token constant\">AO</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">num</span><span class=\"token operator\">:</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">m</span><span class=\"token operator\">:</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">n</span><span class=\"token operator\">:</span><span class=\"token keyword\">undefined</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>接着函数内的代码将会执行</p>\n<p>AO 中的属性被依次赋值</p>\n<p>当函数执行完后,函数执行上下文将会被弹出执行上下文栈(被销毁)</p>\n<p>面试题</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  m <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 没有使用变量关键字会被声明到全局对象中</span>\n<span class=\"token punctuation\">&#125;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 此时这句语句在js引擎中会被转化为</span>\n  <span class=\"token comment\">// b = 10 ; var a = 10 (从右向左执行)</span>\n<span class=\"token punctuation\">&#125;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// erro a is not defined</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"js-de-nei-cun-guan-li-he-bi-bao\">js 的内存管理和闭包</h1>\n<p>对于基本数据类型内存的分配时会直接在栈空间内分配</p>\n<p>对于复杂数据类型内存的分配时会直接在堆空间内分配</p>\n<h2 id=\"js-de-la-ji-hui-shou-gc\" id=\"js-的垃圾回收-GC\">js 的垃圾回收(GC)</h2>\n<p>常见的 GC 算法</p>\n<p>引用计数</p>\n<p>标记清除:</p>\n<p>设置一个根对象,垃圾回收器会定期从这个根开始找所有从根开始有引用到的对象,对于那些没有引用到的对象,就认为是不可用对象</p>\n<p>V8 GC 优化策略</p>\n<p>因为 js 在 gc 时会停止响应其他操作,所以要通过优化来避免长时间的停止响应</p>\n<p>1.分代回收</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">通过区分<span class=\"token string\">\"临时\"</span>和<span class=\"token string\">\"持久\"</span>对象<span class=\"token punctuation\">,</span>多回收<span class=\"token string\">\"临时对象区\"</span><span class=\"token punctuation\">,</span>少回收<span class=\"token string\">\"持久对象区\"</span><span class=\"token punctuation\">,</span>减少每次需要的变量<span class=\"token punctuation\">,</span>减少每次<span class=\"token constant\">GC</span>耗时<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>2.增量 GC</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">就是每次处理一部分\njs运行 -&gt; gc运行js暂停 -&gt; js运行 -&gt; gc运行js暂停<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"bi-bao\" id=\"闭包\">闭包</h2>\n<p>在计算机科学中</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">闭包在实现上是一个结构体,它储存了一个函数和其关联的环境\n闭包跟函数最大的区别就是,当捕捉闭包的时候,它的自由变量会在捕捉的时候就被确定,这样即使脱离了捕捉时的上下文,它也能照常运行<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>在 JavaScript 中</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">一个函数和对其周围状态的引用绑定在一起 这就叫闭包<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'ljq'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">return</span> bar<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> fn <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在 fn = foo() 被执行后 GO 中的 fn 值已经被赋值为了 bar() 的地址值</p>\n<p>foo 的 FEC 会被销毁 但是 bar 依旧能访问到 foo 中的 “name” 值</p>\n<p>此时 函数 bar()和 “name” 变量 构成一个闭包(函数和其能访问的外层作用域的自由变量共同组成闭包)</p>\n<h3 id=\"bi-bao-de-nei-cun-xie-lu\" id=\"闭包的内存泄露\">闭包的内存泄露</h3>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'ljq'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> bar<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> fn <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"han-shu-zhong-de-this-zhi-xiang\">函数中的 this 指向</h1>\n<p>函数在执行时才会绑定 this</p>\n<p>在浏览器中 全局对象中 this 指向 window</p>\n<p>在 nodejs 中的 this 是一个空对象</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// this指向什么与函数所处位置无关</span>\n<span class=\"token comment\">// this的指向与函数被调用的方式有关</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// window</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'ljq'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> foo<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// obj对象</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// String:&#123;\"abc\"&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>优先级从上至下以此升高</p>\n<h2 id=\"mo-ren-bang-ding\" id=\"默认绑定\">默认绑定</h2>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 函数调用的时无任何调用前缀 默认绑定时this指向全局对象window(非严格模式)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// window</span>\n  <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">fn1</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// window</span>\n    <span class=\"token function\">fn2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// window</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">fn2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 要注意的是在严格模式环境下 默认绑定的this指向undefined</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// window</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token string\">'use strict'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'dnmd'</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">fn1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TypeError: Cannot read property 'name' of undefined</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"jian-jie-han-shu-yin-yong\" id=\"间接函数引用\">间接函数引用</h2>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">\"obj1\"</span>\n    <span class=\"token function-variable function\">foo</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">\"obj2\"</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">.</span>bar <span class=\"token operator\">=</span> obj1<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 作为独立的函数调用 output:window</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"yin-shi-bang-ding\" id=\"隐式绑定\">隐式绑定</h2>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 他的调用位置中,是通过某个对象发起的函数调用</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'ljq'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> foo<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">obj</span><span class=\"token operator\">:</span> obj<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// obj</span>\n\nobj1<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// obj</span>\n\n<span class=\"token keyword\">const</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.box'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndiv<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 当点击box时 output:</span>\n<span class=\"token comment\">// &lt;div class=\"box\" style=\"width: 100px;height: 100px;background-color: red;\">&lt;/div></span>\n<span class=\"token comment\">// 所以其应该是进行了隐式绑定</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"xian-shi-bang-ding\" id=\"显式绑定\">显式绑定</h2>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 通过apply,call,bind进行绑定</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> newFoo <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aaa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">newFoo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// String</span>\n\n<span class=\"token keyword\">const</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.box'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndiv<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ndiv<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ndiv<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 所有的click函数被存入一个数组</span>\n<span class=\"token comment\">// 当点击发生是遍历调用数组中的函数</span>\n<span class=\"token comment\">// fn.call(div)</span>\n\n<span class=\"token comment\">// 当点击box时 output:</span>\n<span class=\"token comment\">// &lt;div class=\"box\" style=\"width: 100px;height: 100px;background-color: red;\">&lt;/div></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>忽略显式绑定</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// apply,bind,call 当传入的值为 null/undefined 时,自动将this绑定为全局对象</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// window</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// window</span>\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// window</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"new-bang-ding\" id=\"new-绑定\">new 绑定</h2>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 我们通过一个new关键字调用一个函数时(构造器),这个时候this是在调用这个构造器时创建出来的对象</span>\n<span class=\"token comment\">// this = 创建出来的对象</span>\n<span class=\"token comment\">// 这个过程就是new绑定</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// foo&#123;&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"jian-tou-han-shu\" id=\"箭头函数\">箭头函数</h2>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 如果函数的执行体只有一行,那么&#123;&#125;可以省略,并且默认将这行代码的执行结果作为返回值</span>\n<span class=\"token comment\">// 箭头函数不适用this的四种规则,而是调用上层作用域中的this</span>\n\n箭头函数与普通函数的区别\n<span class=\"token number\">1.</span>语法更加清晰\n<span class=\"token number\">2.</span><span class=\"token function\">箭头函数不能作为构造函数调用</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">3.</span>箭头函数没有<span class=\"token string\">\"arguments\"</span>\n<span class=\"token number\">4.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>函数不能改变箭头函数的<span class=\"token keyword\">this</span>指向\n<span class=\"token number\">5.</span>箭头函数没有prototype\n<span class=\"token number\">6.</span>箭头函数不会创建自己的<span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>其会继承上层作用域的<span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>且创建的上层作用域的<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>this 面试题</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'ljq'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'person'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">sayName</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> sss <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span>sayName<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">sss</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ljq</span>\n  person<span class=\"token punctuation\">.</span><span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// person</span>\n  person<span class=\"token punctuation\">.</span><span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// person</span>\n  <span class=\"token punctuation\">(</span>b <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span>sayName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ljq</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'ljq'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> person1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'person1'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">foo1</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">foo2</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">foo3</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">foo4</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> person2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'person2'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nperson1<span class=\"token punctuation\">.</span><span class=\"token function\">foo1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// person1</span>\nperson1<span class=\"token punctuation\">.</span><span class=\"token function\">foo1</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// person2</span>\n\nperson1<span class=\"token punctuation\">.</span><span class=\"token function\">foo2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ljq</span>\nperson1<span class=\"token punctuation\">.</span><span class=\"token function\">foo2</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ljq</span>\n\nperson1<span class=\"token punctuation\">.</span><span class=\"token function\">foo3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ljq</span>\nperson1<span class=\"token punctuation\">.</span><span class=\"token function\">foo3</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//  ljq</span>\n\nperson1<span class=\"token punctuation\">.</span><span class=\"token function\">foo4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ljq</span>\nperson1<span class=\"token punctuation\">.</span><span class=\"token function\">foo4</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// persno2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>实现 apply,call,bind(手写 )</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>arguments 的使用</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 在浏览器中全局状态下没有arguments , nodejs下有</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h1 id=\"han-shu-shi-bian-cheng\">函数式编程</h1>\n<h2 id=\"chun-han-shu\" id=\"纯函数\">纯函数</h2>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 确定的输入,一定会产生确定的输出</span>\n<span class=\"token comment\">// 函数的执行过程中,不会产生副作用(副作用的概念就是,在执行一个函数的时候,除了返回函数值外,还对调用函数产生了附加的影响,例如修改的全局变量,修改参数或者改变外部储存)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"ke-li-hua\" id=\"柯里化\">柯里化</h2>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 将多个传入参数,拆分成多个函数调用的过程</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">z</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y <span class=\"token operator\">+</span> z<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 60</span>\n\n<span class=\"token comment\">// 使用箭头函数简写</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sum1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">z</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> y <span class=\"token operator\">+</span> z<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> res1 <span class=\"token operator\">=</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 60</span>\n\n<span class=\"token comment\">// 为什么需要柯里化</span>\n<span class=\"token comment\">// 函数式编程中我们往往希望一个函数处理的问题单一,而不是将一大堆处理过程中交给一个函数来处理</span>\n\n<span class=\"token comment\">// 模板字符串应用的柯里化</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">log</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">date<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">getHours</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">getMinutes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">][</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>type<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">]:[$message]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'DEBUG'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'查找到轮播图BUG'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'DEBUG'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'查找到菜单BUG'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'DEBUG'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'查找到数据BUG'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//柯里化的优化</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">log1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">date</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">type</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">getHours</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">getMinutes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">][</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>type<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">]:[$message]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 定制化</span>\n<span class=\"token comment\">// 如果要打印的都是当前时间</span>\n<span class=\"token keyword\">const</span> nowlog <span class=\"token operator\">=</span> <span class=\"token function\">log1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">nowlog</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DEBUG'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">'查找到菜单BUG'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">nowlog</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DEBUG'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">'查找到轮播图BUG'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 自动转柯里化函数的实现(手写)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"zu-he-han-shu-shou-xie\" id=\"组合函数-手写\">组合函数(手写)</h2>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h1 id=\"yan-ge-mo-shi\">严格模式</h1>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 严格模式下,不允许静默错误</span>\n<span class=\"token comment\">// 不允许原先的八进制</span>\n<span class=\"token comment\">// with 语句不允许使用</span>\n<span class=\"token comment\">// eval函数不允许向上引用变量</span>\n<span class=\"token comment\">// 自执行函数(默认绑定)会指向undefined</span>\n<span class=\"token comment\">// setTimeout的this不变(指向window)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"js-de-mian-xiang-dui-xiang\">JS 的面向对象</h1>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>objName<span class=\"token punctuation\">,</span>objKeyName<span class=\"token punctuation\">,</span>descriptor<span class=\"token comment\">//属性描述符) // 对对象中的属性做操作</span>\n<span class=\"token comment\">// 数据属性描述符</span>\n  <span class=\"token literal-property property\">Configurable</span><span class=\"token operator\">:</span>表示属性是否能够通过<span class=\"token keyword\">delete</span>删除属性 <span class=\"token boolean\">false</span><span class=\"token function\">表示不可配置</span><span class=\"token punctuation\">(</span>删除<span class=\"token punctuation\">,</span>修改<span class=\"token punctuation\">)</span>\n  也不可以重新定义属性描述符\n\n  <span class=\"token literal-property property\">enumerable</span><span class=\"token operator\">:</span><span class=\"token function\">表示属性是否能被枚举</span><span class=\"token punctuation\">(</span>是否能被<span class=\"token keyword\">for</span><span class=\"token operator\">-</span><span class=\"token keyword\">in</span>或Object<span class=\"token punctuation\">.</span><span class=\"token function\">key</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>返回该属性<span class=\"token punctuation\">)</span>\n\n  <span class=\"token literal-property property\">writeable</span><span class=\"token operator\">:</span> <span class=\"token function\">表示属性是否能被修改</span><span class=\"token punctuation\">(</span>写入<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//存取属性描述符</span>\n  <span class=\"token number\">1.</span>隐藏某一个私有属性不被外界直接使用和赋值\n    js并没有私有属性的定义 社区中默认 _keyName为私有属性\n  <span class=\"token number\">2.</span>截获某一个属性它访问和设置值的过程\n\t<span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token string\">\"height\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//配置</span>\n    <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span><span class=\"token number\">1.88</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\">// 也可以一次性对多个属性配置属性描述符</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">Configurable</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span>\n        <span class=\"token literal-property property\">writable</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span>\n        <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span><span class=\"token string\">\"ljq\"</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">Configurable</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span>\n        <span class=\"token literal-property property\">writable</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span>\n        <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span><span class=\"token number\">20</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//获取属性描述符</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span>obj_nmae<span class=\"token punctuation\">,</span>obj_key_name<span class=\"token punctuation\">)</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\">// 对对象进行限制</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">seal</span><span class=\"token punctuation\">(</span>obj_name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 禁止对象配置/修改删除里面的属性</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span>obj_name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 属性不可修改</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"gong-han-mo-shi\" id=\"工厂模式\">工厂模式</h2>\n<pre class=\"line-numbers language-JS\" data-language=\"JS\"><code class=\"language-JS\">&#x2F;&#x2F; 工厂模式:工厂函数\nfunction createPerson(name,age,height,address)&#123;\n    const newObejct &#x3D; &#123;&#125;\n    newObject.name &#x3D; name\n    newObject.age &#x3D; age\n    newObject.height &#x3D; height\n    newObject.address &#x3D; address\n\n    return newObject\n&#125;\n\nconst p1 &#x3D; createPerson(&quot;ljq&quot;,20,176,&quot;株洲市&quot;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"gou-zao-han-shu\" id=\"构造函数\">构造函数</h2>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// new 操作符</span>\n当一个<span class=\"token keyword\">new</span>操作符被调用<span class=\"token punctuation\">,</span>那么他会执行如下操作\n<span class=\"token number\">1.</span>在内存中创建一个新的空对象\n<span class=\"token number\">2.</span>这个对象内部的prototype属性会被赋值为该构造函数的prototype属性\n<span class=\"token number\">3.</span>构造函数内部的<span class=\"token keyword\">this</span>会指向创建出来的新对象\n<span class=\"token number\">4.</span><span class=\"token function\">执行函数内部的代码</span><span class=\"token punctuation\">(</span>函数体代码<span class=\"token punctuation\">)</span>\n<span class=\"token number\">5.</span>如果构造函数没有返回非空对象<span class=\"token punctuation\">,</span>则返回创建出来的新对象\n\n手写<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"ji-cheng-yu-yuan-xing-lian\">继承与原型链</h1>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 我们每个对象中提供了一个prototype,这个属性可以称为对象的原型(隐式原型)</span>\n<span class=\"token comment\">// 浏览器和node中支持查询隐式原型(__proto__)</span>\n<span class=\"token comment\">// ES5后提供了一个方法查看原型</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>obj_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 函数也是一个对象</span>\n<span class=\"token comment\">// console.log(foo.__proto__) 函数作为对象来说 他也是有[[prototype]]隐式原型的</span>\n\n<span class=\"token comment\">// 函数因为他是一个函数,所以他还会多出一个显示原型属性:prototype</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>当函数被 new 关键字创建后,他的执行过程为</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<img src=\"C:\\Users\\ND_LJQ\\Desktop\\js\\images\\无标题.png\" alt=\"无标题\" style=\"zoom:200%;\" />\n<p>创建对象方案</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 将函数通用属性加入函数原型</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> address</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> height<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> address<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">eating</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">'在吃东西'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">running</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">'在跑步'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"yuan-xing-lian\" id=\"原型链\">原型链</h2>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>参数中的&quot;[]&quot;代表可选</p>\n<h1 id=\"cao-zuo-zi-fu-chuan-de-fang-fa\">操作字符串的方法</h1>\n<h2 id=\"index-of\" id=\"indexOf\">indexOf()</h2>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">String<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>searchValue<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>fromIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回子字符或字符串在父字符串中首次出现的索引位置</span>\n<span class=\"token comment\">// 若子字符串不存在则会返回 -1</span>\n<span class=\"token comment\">// 若 fromIndex 大于字符串长度,则会返回父字符串长度</span>\n<span class=\"token comment\">// 该方法区分大小写</span>\nString<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span>searchValue<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>fromIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回子字符或字符串在父字符串中最后一次出现的索引位置</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"char-at\" id=\"charAt\">charAt()</h2>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">String<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获得字符串指定位置的字符</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"touppercase\" id=\"touppercase\">touppercase()</h2>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">String<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 将字符串中的字符全变为大写后返回一个新字符串,原字符串不变</span>\nString<span class=\"token punctuation\">.</span><span class=\"token function\">tolowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 将字符串中的字符全变为小写后返回一个新字符串,原字符串不变</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"concat\" id=\"concat\">concat()</h2>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">String<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>strN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 将一个或多个字符串与原字符串串联合并,返回一个新字符串</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"slice\" id=\"slice\">slice()</h2>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">String<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>beginIndex<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>endIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 提取父字符串自 beginIndex 位置开始 [到 endIndex 结束]的字符/字符串</span>\n<span class=\"token comment\">// 并返回一个新字符串,原字符串不变</span>\n<span class=\"token comment\">// slice()不传参数会返回一个跟原数组一样的新数组</span>\n<span class=\"token comment\">// 若 beginIndex/endIndex 的值为负数</span>\n<span class=\"token comment\">// 则其值看成 str.length-beginIndex/endIndex</span>\n<span class=\"token comment\">// 若 beginIndex 大于 endIndex 则 slice 的执行的效果为 从 beginIndex 开始向前截取到 endIndex</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"sub-string\" id=\"subString\">subString()</h2>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">String<span class=\"token punctuation\">.</span><span class=\"token function\">subString</span><span class=\"token punctuation\">(</span>indexStart<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>indexEnd<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回一个提取自字符串 indexStart 开始[至indexEnd 结束]的一个新的子字符串</span>\n<span class=\"token comment\">// 如果参数中的值小于 '0' 或者 'NaN' 则自动默认为0</span>\n<span class=\"token comment\">// 如果参数中的任意一值大于父字符串的长度 那么该值默认为父字符串的长度</span>\n<span class=\"token comment\">// 如果 indexStart 大于 indexEnd，则 substring 的执行效果就像两个参数调换了一样。</span>\n<span class=\"token comment\">// 即 String.subString(indexEnd,indexStart)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"sub-str\" id=\"subStr\">subStr()</h2>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">String<span class=\"token punctuation\">.</span><span class=\"token function\">subStr</span><span class=\"token punctuation\">(</span>strat<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//该方法半遗弃,尽量避免使用</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"split\" id=\"split\">split()</h2>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">String<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>separator<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>limit<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 以 separator 字符/字符串或正则表达式来切割原字符 ,用 limit(number) 来限制返回的数组中</span>\n<span class=\"token comment\">// 切割后的片段的数量</span>\n<span class=\"token comment\">// 若不传参,则返回原字符串的数组</span>\n<span class=\"token comment\">// 若以 \"\"/'' 来作为分隔符可能会破坏 unicode 安全</span>\n<span class=\"token comment\">// 例:</span>\n<span class=\"token comment\">// const a = '𝟘𝟙𝟚𝟛'.split('');</span>\n<span class=\"token comment\">// console.log(a);</span>\n<span class=\"token comment\">// Output: [\"�\",\"�\",\"�\",\"�\",\"�\",\"�\",\"�\",\"�\"]</span>\n<span class=\"token comment\">// 这时候推荐使用es6的拓展运算符 \"...\" 来解决</span>\n<span class=\"token comment\">// 例:</span>\n<span class=\"token comment\">// const a = '𝟘𝟙𝟚𝟛'</span>\n<span class=\"token comment\">// console.log([...a])</span>\n<span class=\"token comment\">// Output: ['𝟘', '𝟙', '𝟚', '𝟛']</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"trim\" id=\"trim\">trim()</h2>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">String<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//去除字符串两端空白</span>\n<span class=\"token comment\">//该方法返回一个新的去除字符串两端空白的新字符串,并不影响原字符串本身</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"replace\" id=\"replace\">replace()</h2>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">String<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>regexp<span class=\"token operator\">|</span>subStr <span class=\"token punctuation\">,</span> newSubStr<span class=\"token operator\">|</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 将字符串中某个字符串/字符(subStr),替换成新字符(newSubStr)</span>\n<span class=\"token comment\">// 若是是一个function,则newSubStr为function的返回值</span>\n<span class=\"token comment\">// 第一个参数是subStr则只有第一个匹配项会被替换</span>\n<span class=\"token comment\">// 若第一个参数是正则表达式则正则所匹配到的对象会被替换</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"cao-zuo-shu-zu-de-fang-fa\">操作数组的方法</h1>\n<p>数组的扁平化</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Array<span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nArray<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"bu-hui-gai-bian-yuan-shi-shu-zu-de-fang-fa\" id=\"不会改变原始数组的方法\">不会改变原始数组的方法</h2>\n<h3 id=\"index-of-1\" id=\"indexOf-2\">indexOf()</h3>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Array<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>searchElement<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>fromIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 查找某一个值在数组中首次出现的位置</span>\n<span class=\"token comment\">// fromIndex 参数若大于 Array.length 则默认不会从数组中查找,返回 -1</span>\n<span class=\"token comment\">// 若小于 0 则其默认为数组长度的抵消值,若抵消值仍为负数则默认为 0</span>\n<span class=\"token comment\">// 即若数组长度为6 fromIndex值为 -1 则意味着从索引为 6+(-1) 开始查找</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"slice-1\" id=\"slice-2\">slice()</h3>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Array<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回数组的某一部分(浅拷贝)</span>\n<span class=\"token comment\">// 提取从原数组中从索引 begin 到 end 中的元素</span>\n<span class=\"token comment\">// 若参数为负,则其值默认为 array.length + 参数值</span>\n<span class=\"token comment\">// 若 |begin| > |end| 则会返回一个空数组,不会将end和begin交换</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"concat-1\" id=\"concat-2\">concat()</h3>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Array<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>value1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>valueN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 将原数组进行浅拷贝的副本与参数中的数组/单个元素进行合并,返回合并后的副本</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"join\" id=\"join\">join()</h3>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Array<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>separator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 将数组中的元素拼接起来后返回一个总的字符串</span>\n<span class=\"token comment\">// 可选参数separator 是指定每个元素之间的分隔符</span>\n<span class=\"token comment\">// 如果缺省参数 separator 则每个元素之间默认分隔符为\",\"</span>\n<span class=\"token comment\">// 如果参数是空字符串(\"\")则每个元素之间没有任何字符</span>\n<span class=\"token comment\">// 若数组中的某一个元素为 undefined 或 null ,则返回的字符串为空字符串</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"filter\" id=\"filter\">filter()</h3>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Array<span class=\"token punctuation\">.</span><span class=\"token function\">fliter</span><span class=\"token punctuation\">(</span><span class=\"token function\">callbackFunction</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 创建一个新数组，其包含通过所提供函数实现的测试的所有元素</span>\n<span class=\"token comment\">// callbackFunction为测试数组每个元素的函数 返回true则表示该元素通过测试,保留该元素,反之则返回false,不保留该元素</span>\n<span class=\"token comment\">// callbackFunction中的 element参数则是当前测试的元素 index是正在测试中的元素在原数组中的索引</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"reduce\" id=\"reduce\">reduce()</h3>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Array<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>initiaValue<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 方法对数组中的每个元素按序执行一个由您提供的 reducer 函数，每一次运行 reducer 会将先前元素的计算结果作为参数传入，最后将其结果汇总为单个返回值。</span>\n<span class=\"token comment\">//reducer = function(previousValue,currentValue,[currentIndex])&#123;&#125;</span>\n<span class=\"token comment\">// previousValue 为 上次调用reducer返回的的值</span>\n<span class=\"token comment\">// currentValue 为 数组中正在处理的元素</span>\n<span class=\"token comment\">// currentIndex 为 数组中正在处理的元素在数组中的索引值</span>\n<span class=\"token comment\">// 作为第一次调用 reducer 函数时参数 previousValue 的值。若指定了初始值 initialValue，则 currentValue 则将使用数组第一个元素；否则 previousValue 将使用数组第一个元素，而 currentValue 将使用数组第二个元素</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"map\" id=\"map\">map()</h3>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Array<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>callbackFunction<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>thisArg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// callbackFunction(currentValue,[index]) 为数组每一个元素执行该函数 并返回一个由原数组每个元素执行回调函数的结果组成的新数组</span>\n<span class=\"token comment\">// currentValue为当前所处理的元素</span>\n<span class=\"token comment\">// index 为当前所处理元素在数组中的索引值</span>\n<span class=\"token comment\">// thisArg 为当执行回调函数 callbackFunction时，用作 this 的值。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"hui-gai-bian-yuan-shi-shu-zu-de-fang-fa\" id=\"会改变原始数组的方法\">会改变原始数组的方法</h2>\n<h3 id=\"push\" id=\"push\">push()</h3>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Array<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>element1<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">,</span> elementN<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 将元素添加到数组末尾</span>\n<span class=\"token comment\">// 调用该方法时的返回值为新数组的length</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"pop\" id=\"pop\">pop()</h3>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Array<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 从数组中删除最后一个元素 并返回被删除的元素</span>\n<span class=\"token comment\">// 在空数组中调用pop(),将返回undefined</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"shift\" id=\"shift\">shift()</h3>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Array<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 从数组中删除索引为0的元素 并返回被删除的元素</span>\n<span class=\"token comment\">// 在空数组中调用shift(),将返回undefined</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"unshift\" id=\"unshift\">unshift()</h3>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Array<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>element1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>elementN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 将一个或多个元素添加到数组开头,并返回该数组的新length</span>\n<span class=\"token comment\">// 当传入参数为多个值时,它们将被以 块 的形式被插入到对象开始位置,他们的顺序和被传入时的顺序一致,所以，传入多个参数调用一次 unshift()，和传入一个参数调用多次 unshift()（例如，循环调用），它们将得到不同的结果。例如：</span>\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\narr<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [1, 2, 3, 4, 5, 6]</span>\n\narr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 重置数组</span>\n\narr<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [3, 2, 1, 4, 5, 6]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"sort\" id=\"sort\">sort()</h3>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Array<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token function\">compareFunction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 将数组按照某一规则来进行排序,返回排序后的数组</span>\n<span class=\"token comment\">// 若不指定规则则默认将数组中的元素转换为字符串的逐个字符的unicode位点进行排序</span>\n<span class=\"token comment\">// 若指定compareFunction(a,b) 那么数组会按照调用该函数返回值进行排序</span>\n<span class=\"token comment\">// 如果compareFunction(a,b) 大于 0 那么b会排列到a之前</span>\n<span class=\"token comment\">// 如果compareFunction(a,b) 小于 0 那么a会排列到b之前</span>\n<span class=\"token comment\">// 如果compareFunction(a,b) 等于 0 那么a与b的相对位置不变</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"splice\" id=\"splice\">splice()</h3>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Array<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>deleteCount<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>item1<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>itemN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 删除或替换或添加元素来修改数组,并以数组的方式返回被删除元素所组成的数组</span>\n<span class=\"token comment\">// 从指定修改从 start 索引开始修改</span>\n<span class=\"token comment\">// 若 start 的值大于Array.length则意味着从数组末尾开始修改</span>\n<span class=\"token comment\">// 若 start 的值为负数 则值默认为Array.length + start的值</span>\n<span class=\"token comment\">// 若 start 的值为负数 且绝对值大于Array.length 则默认为0</span>\n<span class=\"token comment\">// deleteCount为删除元素的个数</span>\n<span class=\"token comment\">// item1-itemN为需要添加进数组的元素</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"for-each\" id=\"forEach\">forEach()</h3>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Array<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>callbackFucntion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// callbackFunction(currentValue,[index],[thisArg]) 为数组每一个元素执行该函数</span>\n<span class=\"token comment\">// currentValue为当前所处理的元素</span>\n<span class=\"token comment\">// index 为当前所处理元素在数组中的索引值</span>\n<span class=\"token comment\">// thisArg 为当执行回调函数 callbackFunction时，用作 this 的值。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"es-6-xin-te-xing\">ES6 新特性</h1>\n<h2 id=\"set-dui-xiang\" id=\"Set-对象\">Set()对象</h2>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Set 对象允许储存任何类型的唯一值,无论是原始值或是对象引用</span>\n<span class=\"token keyword\">const</span> newSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Set的一些实例方法</span>\nSet<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回Set对象中值的个数</span>\nSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 在Set对象的尾部添加一个元素并返回,该Set对象</span>\nSet<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 查询Set对象中是否有value值 返回一个布尔值</span>\nSet<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回一个Set迭代器对象内包含Set对象中按插入属性顺序摆列的所有元素</span>\nSet<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除Set对象中的value值</span>\nSet<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// dddd</span>\n\n<span class=\"token comment\">// 使用Set进行数组去重</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> arrSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arrSet<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 利用Set将字符串转为数组</span>\n<span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> newSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>newSet<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 用Set获得并集</span>\n<span class=\"token keyword\">const</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> newSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr1<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arr2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123;1, 2, 3, 4, 5, 6&#125;</span>\n\n<span class=\"token comment\">// 用Set获得交集</span>\n<span class=\"token keyword\">const</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> newSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">fliter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> arr2<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"symbol\" id=\"Symbol\">Symbol()</h2>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//symbol 是一种基本数据类型（primitive data type）。Symbol() 函数会返回 symbol 类型的值</span>\n<span class=\"token comment\">// 每个从Symbol()方法返回的值都是唯一的</span>\n<span class=\"token comment\">// 但是Symbol 不支持 new Symbol() 构造</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"map-dui-xiang\" id=\"Map-对象\">Map()对象</h2>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Map 对象保存键值对，并且能够记住键的原始插入顺序。任何值（对象或者基本类型）都可以作为一个键或一个值。</span>\n<span class=\"token keyword\">const</span> newMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"es-6-de-sheng-yu-can-shu\" id=\"es6-的剩余参数\">es6 的剩余参数</h2>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// rest parameters</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>nums</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//nums是形参名  => var nums = [  ]</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"es-6-zhan-kai-yun-suan-fu\" id=\"Es6-展开运算符\">Es6 展开运算符</h2>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cba'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bac'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n","text":"小知识 浏览器内核 Webkit 苹果开发 用于 Safari Blink Webkit 的一个分支,Google 开发,目前应用于 Google Chrome,Edge,Opera 等浏览器 浏览器的渲染过程 Js 引擎 js 引擎将 js 代码翻译成CPU 指令来执行 V8 ...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"14 mins."},"categories":[{"name":"前端","slug":"前端","count":12,"path":"api/categories/前端.json"}],"tags":[{"name":"js","slug":"js","count":1,"path":"api/tags/js.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#xiao-zhi-shi\"><span class=\"toc-text\">小知识</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#liu-lan-qi-de-xuan-ran-guo-cheng\"><span class=\"toc-text\">浏览器的渲染过程</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#js-yin-qing\"><span class=\"toc-text\">Js 引擎</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#v-8-yin-qing\"><span class=\"toc-text\">V8 引擎</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#js-de-nei-cun-guan-li-he-bi-bao\"><span class=\"toc-text\">js 的内存管理和闭包</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#js-de-la-ji-hui-shou-gc\"><span class=\"toc-text\">js 的垃圾回收(GC)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#bi-bao\"><span class=\"toc-text\">闭包</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#bi-bao-de-nei-cun-xie-lu\"><span class=\"toc-text\">闭包的内存泄露</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#han-shu-zhong-de-this-zhi-xiang\"><span class=\"toc-text\">函数中的 this 指向</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#mo-ren-bang-ding\"><span class=\"toc-text\">默认绑定</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#jian-jie-han-shu-yin-yong\"><span class=\"toc-text\">间接函数引用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#yin-shi-bang-ding\"><span class=\"toc-text\">隐式绑定</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#xian-shi-bang-ding\"><span class=\"toc-text\">显式绑定</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#new-bang-ding\"><span class=\"toc-text\">new 绑定</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#jian-tou-han-shu\"><span class=\"toc-text\">箭头函数</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#han-shu-shi-bian-cheng\"><span class=\"toc-text\">函数式编程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#chun-han-shu\"><span class=\"toc-text\">纯函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ke-li-hua\"><span class=\"toc-text\">柯里化</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#zu-he-han-shu-shou-xie\"><span class=\"toc-text\">组合函数(手写)</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#yan-ge-mo-shi\"><span class=\"toc-text\">严格模式</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#js-de-mian-xiang-dui-xiang\"><span class=\"toc-text\">JS 的面向对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#gong-han-mo-shi\"><span class=\"toc-text\">工厂模式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#gou-zao-han-shu\"><span class=\"toc-text\">构造函数</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#ji-cheng-yu-yuan-xing-lian\"><span class=\"toc-text\">继承与原型链</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#yuan-xing-lian\"><span class=\"toc-text\">原型链</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#cao-zuo-zi-fu-chuan-de-fang-fa\"><span class=\"toc-text\">操作字符串的方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#index-of\"><span class=\"toc-text\">indexOf()</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#char-at\"><span class=\"toc-text\">charAt()</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#touppercase\"><span class=\"toc-text\">touppercase()</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#concat\"><span class=\"toc-text\">concat()</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#slice\"><span class=\"toc-text\">slice()</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#sub-string\"><span class=\"toc-text\">subString()</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#sub-str\"><span class=\"toc-text\">subStr()</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#split\"><span class=\"toc-text\">split()</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#trim\"><span class=\"toc-text\">trim()</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#replace\"><span class=\"toc-text\">replace()</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#cao-zuo-shu-zu-de-fang-fa\"><span class=\"toc-text\">操作数组的方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#bu-hui-gai-bian-yuan-shi-shu-zu-de-fang-fa\"><span class=\"toc-text\">不会改变原始数组的方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#index-of-1\"><span class=\"toc-text\">indexOf()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#slice-1\"><span class=\"toc-text\">slice()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#concat-1\"><span class=\"toc-text\">concat()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#join\"><span class=\"toc-text\">join()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#filter\"><span class=\"toc-text\">filter()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#reduce\"><span class=\"toc-text\">reduce()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#map\"><span class=\"toc-text\">map()</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#hui-gai-bian-yuan-shi-shu-zu-de-fang-fa\"><span class=\"toc-text\">会改变原始数组的方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#push\"><span class=\"toc-text\">push()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#pop\"><span class=\"toc-text\">pop()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#shift\"><span class=\"toc-text\">shift()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#unshift\"><span class=\"toc-text\">unshift()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#sort\"><span class=\"toc-text\">sort()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#splice\"><span class=\"toc-text\">splice()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#for-each\"><span class=\"toc-text\">forEach()</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#es-6-xin-te-xing\"><span class=\"toc-text\">ES6 新特性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#set-dui-xiang\"><span class=\"toc-text\">Set()对象</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#symbol\"><span class=\"toc-text\">Symbol()</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#map-dui-xiang\"><span class=\"toc-text\">Map()对象</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#es-6-de-sheng-yu-can-shu\"><span class=\"toc-text\">es6 的剩余参数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#es-6-zhan-kai-yun-suan-fu\"><span class=\"toc-text\">Es6 展开运算符</span></a></li></ol></li></ol>","author":{"name":"ND_LJQ","slug":"blog-author","avatar":"/svg/head.jpg","link":"/","description":"一位正在摆烂的大四渣滓😋 <br /> @ <b>劉三刀的摆烂生活</b>","socials":{"github":"https://github.com/ND-LJQ","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_52475868?type=blog","juejin":"https://juejin.cn/user/2032336272362109","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/391491132?spm_id_from=333.1007.0.0"},"gitee":{"icon":"/svg/gitee-fill-round.svg","link":"https://gitee.com/liu-jq"}}}},"mapped":true,"prev_post":{"title":"长任务优化","uid":"4bb3e720239fee0f6b9b7f2b0b357704","slug":"长任务优化","date":"2023-07-19T13:16:03.000Z","updated":"2023-07-19T14:10:13.588Z","comments":true,"path":"api/articles/长任务优化.json","keywords":null,"cover":[],"text":"由于浏览器 GUI 渲染线程与 JS 引擎线程是互斥的关系，当页面中有很多长任务时，会造成页面 UI 阻塞，出现界面卡顿、掉帧等情况 查看页面的长任务： 打开控制台，选择 Performance 工具，点击 Start 按钮，展开 Main 选项，会发现有很多红色的三角，这些就属...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"前端","slug":"前端","count":12,"path":"api/categories/前端.json"},{"name":"业务与性能优化","slug":"前端/业务与性能优化","count":10,"path":"api/categories/前端/业务与性能优化.json"}],"tags":[{"name":"业务与性能优化(前端)","slug":"业务与性能优化-前端","count":10,"path":"api/tags/业务与性能优化-前端.json"}],"author":{"name":"ND_LJQ","slug":"blog-author","avatar":"/svg/head.jpg","link":"/","description":"一位正在摆烂的大四渣滓😋 <br /> @ <b>劉三刀的摆烂生活</b>","socials":{"github":"https://github.com/ND-LJQ","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_52475868?type=blog","juejin":"https://juejin.cn/user/2032336272362109","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/391491132?spm_id_from=333.1007.0.0"},"gitee":{"icon":"/svg/gitee-fill-round.svg","link":"https://gitee.com/liu-jq"}}}}},"next_post":{"title":"Hbase基础","uid":"2f890567b7501c264678f89b083cd223","slug":"Hbase基础","date":"2023-07-19T12:30:44.000Z","updated":"2023-07-19T12:45:04.290Z","comments":true,"path":"api/articles/Hbase基础.json","keywords":null,"cover":[],"text":"HBase 简介 Google 三篇论文 论文名 说明 hadoop 《GFS》 分布式文件系统 HDFS(Hadoop Distributed File System) 《MapReduce》 分布式计算模型 MapReduce 《Bigtable》 超级大表 HBase 结论...","link":"","photos":[],"count_time":{"symbolsCount":"8.4k","symbolsTime":"8 mins."},"categories":[{"name":"NoSQL","slug":"NoSQL","count":2,"path":"api/categories/NoSQL.json"}],"tags":[{"name":"Hbase","slug":"Hbase","count":1,"path":"api/tags/Hbase.json"}],"author":{"name":"ND_LJQ","slug":"blog-author","avatar":"/svg/head.jpg","link":"/","description":"一位正在摆烂的大四渣滓😋 <br /> @ <b>劉三刀的摆烂生活</b>","socials":{"github":"https://github.com/ND-LJQ","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_52475868?type=blog","juejin":"https://juejin.cn/user/2032336272362109","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/391491132?spm_id_from=333.1007.0.0"},"gitee":{"icon":"/svg/gitee-fill-round.svg","link":"https://gitee.com/liu-jq"}}}}}}