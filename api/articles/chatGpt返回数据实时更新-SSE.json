{"title":"chatGpt返回数据实时更新(SSE)","uid":"9912943b0301d4d9cf01afa248355baf","slug":"chatGpt返回数据实时更新-SSE","date":"2023-07-19T13:16:48.000Z","updated":"2023-07-19T13:29:59.329Z","comments":true,"path":"api/articles/chatGpt返回数据实时更新-SSE.json","keywords":null,"cover":[],"content":"<p><strong>服务器发送事件（Server-Sent Events，简称 SSE）</strong> 其实就是浏览器向服务器发送一个 <code>HTTP</code> 请求，然后服务器不断单向地向浏览器推送消息</p>\n<p>所谓的消息，其实就是一定格式的文本事件流（数据流）</p>\n<p><img src=\"/post/chatGpt%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE%E5%AE%9E%E6%97%B6%E6%9B%B4%E6%96%B0-SSE.htm/v2-471e38eb6ef654800d28c7d623dd22a8_720w.png\" alt></p>\n<h1 id=\"sse-de-te-dian\">SSE的特点</h1>\n<ul class=\"lvl-0\">\n<li class=\"lvl-4\">\n<p>基于 <code>http</code> 协议的单向通信</p>\n</li>\n<li class=\"lvl-4\">\n<p>默认支持断线重连，并支持发送自定义事件类型消息</p>\n</li>\n<li class=\"lvl-4\">\n<p>只支持发送文本</p>\n</li>\n<li class=\"lvl-4\">\n<p>是 <code>WebSocket</code> 的一种轻型替代方案，受同源策略的限制</p>\n</li>\n<li class=\"lvl-4\">\n<p>前端: 不使用<code>xhr/fetch</code>,而使用特定的API : <code>EventSource</code></p>\n</li>\n<li class=\"lvl-4\">\n<p>后端: <code>Content-Type: text/event-stream</code></p>\n</li>\n</ul>\n<h1 id=\"xiao-xi-de-gou-cheng\">消息的构成</h1>\n<ul class=\"lvl-0\">\n<li class=\"lvl-4\">\n<p>消息唯一标识（id）</p>\n<p>相当于每一条数据的编号，可通过 <code>lastEventId</code> 属性读取。一旦连接中断，浏览器会发送包含 <code>Last-Event-ID: id</code> 头信息来帮助服务器重建连接</p>\n</li>\n<li class=\"lvl-4\">\n<p>消息内容（data）</p>\n<p>只能为文本字符串，发送 <code>JSON</code> 数据 <code>data:$&#123;JSON.stringify(&#123; name: 'adiu', alias: '老夫子' &#125;)&#125;\\n\\n</code></p>\n</li>\n<li class=\"lvl-4\">\n<p>自定义事件类型（event）</p>\n<p>服务器端可自定义，浏览器端通过 <code>addEventListener</code> 监听，如果未指定，则触发浏览器端的 <code>message</code> 事件</p>\n</li>\n<li class=\"lvl-4\">\n<p>最大间隔时间/毫秒（retry）</p>\n<p>如果未指定通信的最大间隔时间，服务器端 <code>3</code> 秒内没有发送任何信息，浏览器端默认开始重连</p>\n<p>由于网络错误导致连接出错，浏览器也会自动重新发起连接</p>\n</li>\n</ul>\n<h1 id=\"sse-he-socket-de-qu-bie\">SSE和Socket的区别</h1>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>通信方式<br>\nSSE为单向通信,Socket为全双工、半双工通信</p>\n</li>\n<li class=\"lvl-2\">\n<p>协议<br>\nSSE为http GET,Socket为ws</p>\n</li>\n<li class=\"lvl-2\">\n<p>跨域<br>\nSSE不能跨域,Socket可以跨域</p>\n</li>\n</ul>\n<h1 id=\"ke-hu-duan-dai-ma\">客户端代码</h1>\n<ul class=\"lvl-0\">\n<li class=\"lvl-4\">\n<p>检测浏览器是否支持</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span>window<span class=\"token punctuation\">.</span>EventSource<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'当前浏览器支持事件推送'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li class=\"lvl-4\">\n<p>建立连接</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span>window<span class=\"token punctuation\">.</span>EventSource<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> ets <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventSource</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://127.0.0.1/sse/notice'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li class=\"lvl-4\">\n<p>连接状态（ets.readyState）</p>\n<p><code>0</code> 表示连接还未建立，或者连接断线</p>\n<p><code>1</code> 表示连接已经建立，可以接受数据</p>\n<p><code>2</code> 表示连接已断，且不会重连</p>\n</li>\n<li class=\"lvl-4\">\n<p>建立连接，触发事件</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">ets<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'open'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'handle open event'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>连接一旦建立，就会触发 <code>open</code> 事件</p>\n</li>\n<li class=\"lvl-4\">\n<p>错误处理</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">ets<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'handle error event'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>如果发生通信错误（比如连接中断），就会触发 <code>error</code> 事件</p>\n</li>\n<li class=\"lvl-4\">\n<p>自定义事件</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">ets<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'notice'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> data<span class=\"token punctuation\">,</span> origin<span class=\"token punctuation\">,</span> lastEventId <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> event\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'消息内容'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'服务器端URL的域名部分，即协议、域名和端口'</span><span class=\"token punctuation\">,</span> origin<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'数据的编号，由服务器端发送。如果没有编号，这个属性为空'</span><span class=\"token punctuation\">,</span> lastEventId<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li class=\"lvl-4\">\n<p>关闭推送</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">ets<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>默认情况下，如果客户端和服务端之间的连接关闭，则会自动重连。可以通过 <code>close()</code> 方法终止连接</p>\n</li>\n</ul>\n<p><strong>实战</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>chatgpt stream 响应数据SSE测试 demo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>btn<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>请求接口<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>result<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">word-wrap</span><span class=\"token punctuation\">:</span> break-word<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">let</span> resultEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#result'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// SSE https://developer.mozilla.org/zh-CN/docs/Web/API/Server-sent_events/Using_server-sent_events#%E4%BB%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8E%A5%E5%8F%97%E4%BA%8B%E4%BB%B6</span>\n    <span class=\"token comment\">// 前端 EventStream API 发起请求，后端 Koa，ctx.body 设置 stream 可写流，ctx.set 响应类型 text/event-stream。</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".btn\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">const</span> evtSource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventSource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/open-ai/sendMsg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        evtSource<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"message: \"</span> <span class=\"token operator\">+</span> event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          resultEl<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">+=</span> event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"zhu-yi-shi-xiang\">注意事项</h1>\n<ul class=\"lvl-0\">\n<li class=\"lvl-4\">\n<p>由于传输的数据格式必须是文本，所以每个字段之间要用换行符 <code>\\n</code> 隔开，最后一个字段要用 <code>\\n\\n</code> 表示一条消息的结束</p>\n</li>\n<li class=\"lvl-4\">\n<p>服务端发送数据时必须设置响应头标识推送的数据是流信息 <code>Content-Type: text/event-stream</code></p>\n</li>\n<li class=\"lvl-4\">\n<p>不建议缓存事件推送数据</p>\n</li>\n<li class=\"lvl-4\">\n<p>如果用户量很多，就需要保持很多长连接，因此会<strong>占用服务器大量内存和连接数</strong></p>\n</li>\n</ul>\n<p>若前端部署使用的是Nginx配置</p>\n<h1 id=\"nginx-pei-zhi-ruo-bu-jin-xing-pei-zhi-qian-duan-wu-fa-jie-shou\">Nginx配置(若不进行配置,前端无法接收)</h1>\n<p><strong>这并不是最优解</strong></p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">server<span class=\"token punctuation\">&#123;</span>\n\tlisten <span class=\"token number\">80</span>;\n\tserver_name test.com;\n\tlocation / <span class=\"token punctuation\">&#123;</span>\n\t\tproxy_pass http<span class=\"token operator\">:</span><span class=\"token comment\">//127.0.0.1:9000</span>\n\t\t#修复sse eventSource 无法接收到消息的问题\n\t\tproxy_set_header Connection '';\n\t\tproxy_http_version <span class=\"token number\">1.1</span>;\n\t\tchunked_transfer_encoding off;\n\t\t<span class=\"token comment\">// 默认配置中proxy_buffering是on,SSE的实时性被打破了,有缓存,前端不会定时输出</span>\n\t\tproxy_buffering off;  \n\t\tproxy_cache off;\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>最优解是后端返回的接口响应头中设置 <code>Cache-Control:no-cache</code></strong></p>\n","text":"服务器发送事件（Server-Sent Events，简称 SSE） 其实就是浏览器向服务器发送一个 HTTP 请求，然后服务器不断单向地向浏览器推送消息 所谓的消息，其实就是一定格式的文本事件流（数据流） SSE的特点 基于 http 协议的单向通信 默认支持断线重连，并支持发...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"前端","slug":"前端","count":12,"path":"api/categories/前端.json"},{"name":"业务与性能优化","slug":"前端/业务与性能优化","count":10,"path":"api/categories/前端/业务与性能优化.json"}],"tags":[{"name":"业务与性能优化(前端)","slug":"业务与性能优化-前端","count":10,"path":"api/tags/业务与性能优化-前端.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#sse-de-te-dian\"><span class=\"toc-text\">SSE的特点</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#xiao-xi-de-gou-cheng\"><span class=\"toc-text\">消息的构成</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#sse-he-socket-de-qu-bie\"><span class=\"toc-text\">SSE和Socket的区别</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#ke-hu-duan-dai-ma\"><span class=\"toc-text\">客户端代码</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#zhu-yi-shi-xiang\"><span class=\"toc-text\">注意事项</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#nginx-pei-zhi-ruo-bu-jin-xing-pei-zhi-qian-duan-wu-fa-jie-shou\"><span class=\"toc-text\">Nginx配置(若不进行配置,前端无法接收)</span></a></li></ol>","author":{"name":"ND_LJQ","slug":"blog-author","avatar":"static/img/head.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"遍历一次把扁平数组转Tree","uid":"cf49f6c451570ecd3976ecdcea1f962a","slug":"遍历一次把扁平数组转Tree","date":"2023-07-19T13:17:11.000Z","updated":"2023-07-19T13:40:50.949Z","comments":true,"path":"api/articles/遍历一次把扁平数组转Tree.json","keywords":null,"cover":[],"text":"树结构（Tree） 是一种典型的非线性数据结构，它是由 n (n &gt; 0) 个有限节点组成的一个具有层次关系的集合 在实际的工作中，为了满足业务需求，需要把后端返回的扁平化的数组结构，转换成树形结构 数据结构 扁平数据 [ &#123; id: 1, pid: null, ...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"ND_LJQ","slug":"blog-author","avatar":"static/img/head.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"长任务优化","uid":"4bb3e720239fee0f6b9b7f2b0b357704","slug":"长任务优化","date":"2023-07-19T13:16:03.000Z","updated":"2023-07-19T14:10:13.588Z","comments":true,"path":"api/articles/长任务优化.json","keywords":null,"cover":[],"text":"由于浏览器 GUI 渲染线程与 JS 引擎线程是互斥的关系，当页面中有很多长任务时，会造成页面 UI 阻塞，出现界面卡顿、掉帧等情况 查看页面的长任务： 打开控制台，选择 Performance 工具，点击 Start 按钮，展开 Main 选项，会发现有很多红色的三角，这些就属...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"前端","slug":"前端","count":12,"path":"api/categories/前端.json"},{"name":"业务与性能优化","slug":"前端/业务与性能优化","count":10,"path":"api/categories/前端/业务与性能优化.json"}],"tags":[{"name":"业务与性能优化(前端)","slug":"业务与性能优化-前端","count":10,"path":"api/tags/业务与性能优化-前端.json"}],"author":{"name":"ND_LJQ","slug":"blog-author","avatar":"static/img/head.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}