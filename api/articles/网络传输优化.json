{"title":"网络传输优化","uid":"ba4943db0729dc2efbbff5980075647c","slug":"网络传输优化","date":"2023-07-19T13:19:39.000Z","updated":"2023-07-19T13:43:10.839Z","comments":true,"path":"api/articles/网络传输优化.json","keywords":null,"cover":[],"content":"<p><strong>浏览器从输入地址到页面显示的过程中发生了什么？</strong></p>\n<p>1、浏览器对输入的地址进行 <code>URL</code> 解析</p>\n<p>2、缓存解析，如 <code>浏览器缓存、系统缓存、路由器缓存</code> 等</p>\n<p>3、通过 <code>DNS</code> 服务器将主机域名转换为 <code>IP</code> 地址</p>\n<p>4、根据 <code>IP</code> 地址找到对应的服务器，发起 <code>TCP</code> 连接</p>\n<p>5、建立 <code>TCP</code> 连接后，发起 <code>HTTP</code> 请求</p>\n<p>6、服务器响应 <code>HTTP</code> 请求，浏览器获得 <code>HTML</code> 代码</p>\n<p>7、浏览器解析 <code>HTML</code> 代码，再请求代码中的资源，如 <code>CSS、JS、图片</code> 等</p>\n<p>8、浏览器解析渲染视图页面</p>\n<p>9、服务器断开 <code>TCP</code> 连接</p>\n<p><strong>从整个页面渲染的链路中，可以提取关键词：<code>URL解析</code>、<code>DNS解析</code>、<code>HTTP协议</code>、<code>HTTP缓存</code>、<code>TCP连接</code>、<code>服务器</code>、<code>响应体</code>、<code>渲染</code>，根据这些关键词产出性能优化策略</strong></p>\n<h1 id=\"dns-yu-ming-jie-xi-you-hua\">DNS域名解析优化</h1>\n<p><img src=\"%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%BC%98%E5%8C%96/858d04149c474044a0b7ca677c08a254~tplv-k3u1fbpfcp-zoom-in-crop-mark_1512_0_0_0.webp\" alt=\"dns.png\"></p>\n<p><code>递归查询</code> 主机向本地域名服务器的查询</p>\n<p><code>迭代查询</code> 本地域名服务器向根域名服务器的查询</p>\n<p>HTTP页面自动解析</p>\n<p>在页面加载的过程当中，浏览器会自动将超链接 <code>href</code> 属性中的域名解析为 <code>IP</code> 地址，但为了确保安全性，<code>HTTPS</code> 页面中已不再允许自动解析</p>\n<p>HTTPS页面自动解析</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">通过HTML标签方式\n&lt;meta http-equiv&#x3D;&quot;x-dns-prefetch-control&quot; content&#x3D;&quot;on&quot;&gt;\n复制代码\n通过设置响应头的方式\nctx.set(&#39;X-DNS-Prefetch-Control&#39;, &#39;on&#39;)\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>on</code> 表示开启解析，<code>off</code> 表示关闭解析</p>\n<p>手动解析</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dns-prefetch<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>//file.cdn.com<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>开启指定域名的预解析功能，多用于 <strong>优化 CDN 资源</strong>，<strong>推荐在项目中使用</strong>。最佳使用位置如下</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dns-prefetch<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>//file.cdn.com<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>优化总结</p>\n<p><code>DNS</code> 请求消耗的带宽非常小，但延迟有点高，尤其是在手机网络上尤为明显，通过 <code>DNS</code> 预解析可以明显的减少一些延迟</p>\n<p><strong>可以减少用户点击链接时的等待时间，从而提升页面的响应速度</strong></p>\n<h1 id=\"xuan-ran-lian-lu-http-1-1-xie-yi\">渲染链路：HTTP1.1协议</h1>\n<h2 id=\"dui-yi-bu-ren-wu-bing-fa-liang-jin-xing-xian-liu\" id=\"对异步任务并发量进行限流\">对异步任务并发量进行限流</h2>\n<p>浏览器同域名下对并发请求的数量是有限制的，通常是 <code>4 ~ 8</code> 以内。超出的会被置入队列等待发送，即 <code>待处理 pending</code> 状态</p>\n<p>如果并发请求量达到一定量级的时候，堆积了无数的调用栈就有可能会导致 <strong>内存溢出</strong></p>\n<h3 id=\"liu-lan-qi-de-bing-fa-xian-zhi\" id=\"浏览器的并发限制\">浏览器的并发限制</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Chrome 浏览器</p>\n<p>同一域名同时最多只能建立 <code>6</code> 个 <code>TCP</code> 连接，也就是说单个域名最大的并发量不超过 <code>6</code> 个</p>\n</li>\n<li class=\"lvl-2\">\n<p>Safari 浏览器</p>\n<p>同一域名同时最多只能建立 <code>4</code> 个 <code>TCP</code> 连接，也就是说单个域名最大的并发量不超过 <code>4</code> 个</p>\n</li>\n<li class=\"lvl-2\">\n<p>业务场景</p>\n<p>假设现在有 <code>1000</code> 个异步任务需要执行，但出于性能的考虑，我们必须将执行的数量控制在 <code>3</code> 个以内，同时还要尽可能快的拿到响应结果</p>\n<p>如：大文件的批量上传、大量的图片加载等 <strong>量化异步任务的执行且影响性能</strong> 的场景</p>\n</li>\n</ul>\n<h3 id=\"you-hua-fang-an\" id=\"优化方案\">优化方案</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>参数注解</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n* @description 异步任务并发量的控制\n* @param &#123;Array&#125; list 迭代数组\n* @param &#123;Number&#125; limit 控制的并发数量\n* @param &#123;Function&#125; handler 对list每一项的处理函数\n*/</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li class=\"lvl-2\">\n<p>首先，通过 while 循环实现初始并发</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>limit<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li class=\"lvl-2\">\n<p>然后，通过递归依次执行下一个，直到全部执行完</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">runInSequence</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">list<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> item <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n    list<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">runInSequence</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li class=\"lvl-2\">\n<p>最后，组合以上逻辑</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">asyncThrottling</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> list<span class=\"token punctuation\">,</span> limit <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">handler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    limit <span class=\"token operator\">=</span> len <span class=\"token operator\">></span> limit <span class=\"token operator\">?</span> limit <span class=\"token operator\">:</span> len\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>limit<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">runInSequence</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">,</span> <span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        response<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n        response<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> len <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h1 id=\"xuan-ran-lian-lu-http-2-xie-yi\">渲染链路：HTTP2协议</h1>\n","text":"浏览器从输入地址到页面显示的过程中发生了什么？ 1、浏览器对输入的地址进行 URL 解析 2、缓存解析，如 浏览器缓存、系统缓存、路由器缓存 等 3、通过 DNS 服务器将主机域名转换为 IP 地址 4、根据 IP 地址找到对应的服务器，发起 TCP 连接 5、建立 TCP 连接...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"前端","slug":"前端","count":12,"path":"api/categories/前端.json"},{"name":"业务与性能优化","slug":"前端/业务与性能优化","count":10,"path":"api/categories/前端/业务与性能优化.json"}],"tags":[{"name":"业务与性能优化(前端)","slug":"业务与性能优化-前端","count":10,"path":"api/tags/业务与性能优化-前端.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#dns-yu-ming-jie-xi-you-hua\"><span class=\"toc-text\">DNS域名解析优化</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#xuan-ran-lian-lu-http-1-1-xie-yi\"><span class=\"toc-text\">渲染链路：HTTP1.1协议</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#dui-yi-bu-ren-wu-bing-fa-liang-jin-xing-xian-liu\"><span class=\"toc-text\">对异步任务并发量进行限流</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#liu-lan-qi-de-bing-fa-xian-zhi\"><span class=\"toc-text\">浏览器的并发限制</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#you-hua-fang-an\"><span class=\"toc-text\">优化方案</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#xuan-ran-lian-lu-http-2-xie-yi\"><span class=\"toc-text\">渲染链路：HTTP2协议</span></a></li></ol>","author":{"name":"ND_LJQ","slug":"blog-author","avatar":"https://raw.githubusercontent.com/ND-LJQ/nd-ljq.github.io/master/static/img/head.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"页面渲染以及重排","uid":"81ec849fc0ebda5e058742eb82eb6d73","slug":"页面渲染以及重排","date":"2023-07-19T13:19:55.000Z","updated":"2023-07-19T13:39:14.798Z","comments":true,"path":"api/articles/页面渲染以及重排.json","keywords":null,"cover":[],"text":"用户使用浏览器一般会打开多个页面，现代浏览器使用单独的进程 Render Process 渲染每个页面，以提升页面性能和稳定性 页面的渲染 渲染图示 渲染图解 根据 HTML 标记 解析出 DOM 树 根据 CSS 样式 解析出 CSS 规则树 根据 DOM 树 和 CSS 规则...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"前端","slug":"前端","count":12,"path":"api/categories/前端.json"},{"name":"业务与性能优化","slug":"前端/业务与性能优化","count":10,"path":"api/categories/前端/业务与性能优化.json"}],"tags":[{"name":"业务与性能优化(前端)","slug":"业务与性能优化-前端","count":10,"path":"api/tags/业务与性能优化-前端.json"}],"author":{"name":"ND_LJQ","slug":"blog-author","avatar":"https://raw.githubusercontent.com/ND-LJQ/nd-ljq.github.io/master/static/img/head.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"搜索引擎排名技巧(SEO)","uid":"ea1216806aa93b5906ea3a04ab718635","slug":"搜索引擎排名技巧-SEO","date":"2023-07-19T13:19:20.000Z","updated":"2023-07-19T13:34:50.081Z","comments":true,"path":"api/articles/搜索引擎排名技巧-SEO.json","keywords":null,"cover":null,"text":"应用的性能好坏直接影响到用户的体验，SEO 做的再好，脱离了性能优化一切也都是空谈，所以 SEO 和性能优化是相辅相成的。响应速度也是搜索引擎排序的一个重要指标 页面头部标签 标题（30字以内） &lt;title>淘宝网 - 淘！我喜欢&lt;/title> 强调重点即可，重要...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"前端","slug":"前端","count":12,"path":"api/categories/前端.json"},{"name":"业务与性能优化","slug":"前端/业务与性能优化","count":10,"path":"api/categories/前端/业务与性能优化.json"}],"tags":[{"name":"业务与性能优化(前端)","slug":"业务与性能优化-前端","count":10,"path":"api/tags/业务与性能优化-前端.json"}],"author":{"name":"ND_LJQ","slug":"blog-author","avatar":"https://raw.githubusercontent.com/ND-LJQ/nd-ljq.github.io/master/static/img/head.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}