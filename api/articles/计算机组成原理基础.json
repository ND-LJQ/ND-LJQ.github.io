{"title":"计算机组成原理基础","uid":"29e4dbba1d3f967e673873a69efe5305","slug":"计算机组成原理基础","date":"2023-07-17T16:34:59.000Z","updated":"2023-09-03T13:27:26.303Z","comments":true,"path":"api/articles/计算机组成原理基础.json","keywords":null,"cover":[],"content":"<h1 id=\"计算机的系统概述\"><a href=\"#计算机的系统概述\" class=\"headerlink\" title=\"计算机的系统概述\"></a>计算机的系统概述</h1><h2 id=\"计算机的层次结构\"><a href=\"#计算机的层次结构\" class=\"headerlink\" title=\"计算机的层次结构\"></a>计算机的层次结构</h2><h3 id=\"计算机系统的组成\"><a href=\"#计算机系统的组成\" class=\"headerlink\" title=\"计算机系统的组成\"></a>计算机系统的组成</h3><p> <strong>硬件系统</strong>和<strong>软件系统</strong>共同构成了一个完整的计算机系统。硬件是指有形的物理设备,是计算机系统重实际物理装置的总称。软件是指在硬件上运行的程序和相关的数据及文档</p>\n<h3 id=\"计算机硬件\"><a href=\"#计算机硬件\" class=\"headerlink\" title=\"计算机硬件\"></a>计算机硬件</h3><h4 id=\"冯诺依曼机的基本思想\"><a href=\"#冯诺依曼机的基本思想\" class=\"headerlink\" title=\"冯诺依曼机的基本思想\"></a>冯诺依曼机的基本思想</h4><p> 冯诺依曼在研究 EDVAC 机时提出了<code>&quot;存储程序&quot;</code>的概念,存储程序的思想奠定了现代计算机的基本结构,以此概念为基础的各类计算机通称为冯诺依曼机其特点如下 👇:</p>\n<ol>\n<li>采用<code>&quot;存储程序&quot;</code>的工作方式,基本工作方式为<strong><code>控制流驱动方式</code></strong></li>\n<li>计算机硬件系统由<strong>运算器</strong>、<strong>存储器</strong>、<strong>控制器</strong>、<strong>输入设备</strong>和<strong>输出设备</strong>5 大部件组成</li>\n<li><code>指令</code>和<code>数据</code>以同等地位存储中,形式上没有区别,但计算机等区分他们</li>\n<li><code>指令</code>和<code>数据</code>均用<strong>二进制代码</strong>表示。<code>指令</code>由<strong>操作码</strong>和<strong>地址码</strong>组成,操作码指出操作的类型,地址码指出操作数的地址</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>🙋‍♂️<strong>存储程序的基本思想是</strong>:</p>\n<p> 将事先编写好的程序和原始数据送入主存后才能执行,一旦程序成功执行,就无须操作人员干预,计算机会自动逐条执行指令,直至程序执行结束</p></blockquote>\n<h4 id=\"计算机的功能部件\"><a href=\"#计算机的功能部件\" class=\"headerlink\" title=\"计算机的功能部件\"></a>计算机的功能部件</h4><p>后面详细介绍</p>\n<p><strong>输入设备</strong></p>\n<p><strong>输出设备</strong></p>\n<p><a href=\"##存储器概述\"><strong>存储器</strong></a></p>\n<p><a href=\"\"><strong>运算器</strong></a></p>\n<p><a href=\"##控制器的功能和工作原理\"><strong>控制器</strong></a></p>\n<p>冯诺依曼结构的模型机示意图 👇</p>\n<p><img src=\"计算机组成原理基础/冯诺依曼机.svg\" alt=\"冯诺依曼机\"></p>\n<h3 id=\"计算机软件\"><a href=\"#计算机软件\" class=\"headerlink\" title=\"计算机软件\"></a>计算机软件</h3><h4 id=\"系统软件和应用软件\"><a href=\"#系统软件和应用软件\" class=\"headerlink\" title=\"系统软件和应用软件\"></a>系统软件和应用软件</h4><p>软件按其功能分类,可分为<strong>系统软件</strong>和<strong>应用软件</strong></p>\n<p><em>系统软件</em>是一组保证计算机系统高效、正确运行的基础软件,通常作为系统资源提供给用户使用</p>\n<p>系统软件主要有:</p>\n<p> <code>操作系统(OS)</code>、<code>数据库管理系统(DBMS)</code>、<code>语言处理程序</code>、<code>分布式软件系统</code>、<code>网络软件系统</code>、<code>标准库程序</code>、<code>服务性程序</code></p>\n<p><em>应用软件</em>是指用户为解决某个应用领域中的各类问题而编制的程序,如各种科学计算类程序、工业设计类程序、数据统计与处理程序</p>\n<h4 id=\"三个级别的语言\"><a href=\"#三个级别的语言\" class=\"headerlink\" title=\"三个级别的语言\"></a>三个级别的语言</h4><p>1️⃣<strong>机器语言</strong></p>\n<p> 二进制代码语言。==机器语言是计算机唯一可以直接识别和执行的语言==</p>\n<p>2️⃣<strong>汇编语言</strong></p>\n<p> 汇编语言用英文单词或其缩写替代二进制指令代码,更容易为人们记忆和理解.使用汇编语言编写的那些的程序,必须经过一个称为汇编程序的系统软件的翻译,将其转换为机器语言程序后,才能在计算机的硬件系统上执行</p>\n<p>3️⃣<strong>高级语言</strong></p>\n<p>高级语言需要经过汇编程序编译成汇编语言程序,然后经过汇编操作得到机器语言程序,或直接由高级语言翻译成机器语言程序</p>\n<p>由于计算机无法直接理解和执行高级语言程序,需要将高级语言程序转化为机器语言程序,通常把进行这种转换的软件统称为翻译程序。翻译程序由以下三类 👇:</p>\n<ol>\n<li><strong>汇编程序(汇编器)</strong>。将汇编语言程序翻译成机器语言程序。</li>\n<li><strong>解释程序(解释器)</strong>。将源程序中的语句按执行顺序逐条翻译成机器指令并立即执行</li>\n<li><strong>编译程序(编译器)</strong>。将高级语言程序翻译成汇编语言或机器语言程序</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>🙋‍♂️<strong>硬件和软件的逻辑功能等价性</strong>即对某一功能来说,既可以由硬件实现,又可以用软件实现</p>\n<p>硬件实现具有更高的执行速度,软件实现具有更好的灵活性,执行频繁、硬件实现代价不是很高的功能通常由硬件实现</p></blockquote>\n<h3 id=\"计算机的层次结构-1\"><a href=\"#计算机的层次结构-1\" class=\"headerlink\" title=\"计算机的层次结构\"></a>计算机的层次结构</h3><p><strong>计算机是一个硬软件组成的综合体</strong>。由于软/硬件的设计者和使用者从不同的角度、用不同的语言来对待同一个计算机系统,因此他们看到的计算机系统的属性,对计算机系统提出的要求也就各不相同。</p>\n<p>以下是计算机系统的多级层次机构示意图 👇:</p>\n<p><img src=\"计算机组成原理基础/层次结构.svg\" alt=\"层次结构\"></p>\n<p>第 1 级是<strong>微程序机器层</strong>,这是一个实在的硬件层,它由机器硬件直接执行微指令</p>\n<p>第 2 级是<strong>传统机器语言层</strong>,它也是一个实在的硬件层,它由微程序解释机器指令系统</p>\n<p>第 3 级是<strong>操作系统层</strong>,它由操作系统程序实现。操作系统程序是由机器指令和广义指令组成的,所以这一层也被称为<code>混合层</code></p>\n<p>第 4 级是<strong>汇编语言层</strong>,它为用户提供一种符号化的语言,借此可编写汇编语言源程序。这一层由汇编程序支持和执行</p>\n<p>第 5 级是<strong>高级语言层</strong>,它是面向用户的,是为了方便用户编写以应用程序而设置的,该层由各种高级语言编译程序支持和执行</p>\n<p>高级语言层之上还可以由应用程序层,它由解决实际问题和应用问题的处理程序组成,如文字处理软件、数据库软件、多媒体处理软件和办公自动化软件</p>\n<p>没有配备软件的纯硬件系统称为<code>裸机</code>。第 3 层~第 5 层称为<code>虚拟机</code>,简单来说就是软件实现的机器,虚拟机只对该层的观察者存在</p>\n<p>层次之间关系紧密,下层是上层的基础,上层是下层的拓展</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>🙋‍♂️<em>计算机组成原理主要讨论传统机器 M1 和微程序机器 M0 的组成原理和设计思想</em></p></blockquote>\n<h2 id=\"计算机的性能指标\"><a href=\"#计算机的性能指标\" class=\"headerlink\" title=\"计算机的性能指标\"></a>计算机的性能指标</h2><h3 id=\"计算机的主要系统指标\"><a href=\"#计算机的主要系统指标\" class=\"headerlink\" title=\"计算机的主要系统指标\"></a>计算机的主要系统指标</h3><p>🥖<strong>字长</strong></p>\n<p> 指计算机进行一次整数运算(即定点整数运算)所能处理的二进制数据的位数,通常与 CPU 的寄存器位数、加法器有关。因此字长一般等于内部寄存器的大小,字长越长,数的表示范围越大,计算精度越高。计算机字长通常选定为字节(8 位)的整数倍</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>🤔<a name=\"字、字长、机器字长、指令字长、存储字长的区别和联系是什么?\"><strong>字、字长、机器字长、指令字长、存储字长的区别和联系是什么?</strong></a></p>\n<p> 在通常所说的<code>&quot;某32位或64位机器&quot;</code>中,32、64 指的是字长,也称机器字长。所谓字长,通常是指 CPU 内部用于证书运算的数据通路的宽度,<strong>因此字长等于 CPU 内部用于整数运算的运算器位数和通用寄存器宽度</strong>,它反应了计算机处理信息的能力。字和字长概念不同。字用来表示被处理信息的单位,用来度量数据类型的宽度,如 x86 机器中将一个字定义为 16 位</p>\n<p> <strong>指令字长</strong>:一个指令字中包含的二进制代码的位数</p>\n<p> <strong>存储字长</strong>:一个存储单元存储的二进制代码的长度</p>\n<p>指令字长一般取存储字长的整数倍,若指令字长等于存储字长的 2 倍,则需要两个存储周期来取出一条指令;若指令字长等于存储字长,则取指周期等于机器周期</p>\n<p><strong>他们必须是字节的整数倍</strong></p></blockquote>\n<p>📼<strong>数据通路带宽</strong></p>\n<p>数据带宽是指数据总线一次所能并行传送信息的位数。这里说的数据通路宽度是指外部数据总线的宽度,它与 CPU 内部的数据总线的宽度(内部寄存器的大小)有可能不同</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>🙋‍♂️ 各个子系统通过数据总线连接形成的数据传送路径称为数据通路</p></blockquote>\n<p>🍼<strong>主存容量</strong></p>\n<p>主存容量是指主存储器所能存储信息的最大容量,通常以字节来衡量,也可以用字数 × 字长(如 512K×16 位)来表示存储容量。其中 MAR 的位数反映存储单元可寻址范围的最大值(而不一定是实际存储器的存储容量)</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>例如,MAR 为 16 位,表示 2^16^=65536,即此存储体内有 65536 个存储单元(可称为 64K 内存,1K=1024)</p></blockquote>\n<p>🚅<strong>运算速度</strong></p>\n<p>==吞吐量和响应时间==</p>\n<ul>\n<li><p>吞吐量</p>\n<p>系统在单位时间内处理请求的数量。它取决于信息能多快地输入内存,CPU 能多快地取指令,数据能多快地动内存取出或读入,以及所得结果能多快地从内存送给一台外部设备。每一步都涉及主存。因此<strong>系统吞吐量主要取决于主存的存取周期</strong></p>\n</li>\n<li><p>响应时间</p>\n<p>指从用户向计算机发送一个请求,到系统对该请求做出的响应并获得所需结果的等待时间。通常包括 CPU 时间(运行一个程序所花费的时间)与等待时间(用于磁盘访问、存储器访问、I/O 访问、操作系统开销等的时间)</p>\n</li>\n</ul>\n<p>==主频和 CPU 时钟周期==</p>\n<ul>\n<li><p>CPU 时钟周期</p>\n<p>通常为节拍脉冲(被称之为<code>节拍</code>或者<code>拍</code>)或者 T 周期,即主频的倒数,它是 CPU 中最小的时间单位,执行指令的每个动作至少需要 1 个时钟周期</p>\n</li>\n<li><p>主频(CPU 时钟频率)</p>\n<p>机器内部主时钟的频率,是衡量机器速度的重要参数。对于同一个型号的计算机,其主频越高完成一个执行步骤的时间越短</p>\n</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>🙋‍♂️CPU 时钟周期 = 1/主频,主频通常以 Hz 时(赫兹)为单位,1Hz 表示每秒一次,50MHZ则代表为1秒钟50M个时钟周期</p>\n<p>🤔<strong>时钟周期、机器周期与指令周期的概念与联系是什么?</strong></p>\n<p><strong>指令周期</strong>:</p>\n<p> CPU 从存储器中<strong>取出并执行一条指令所需的全部时间</strong>称之为指令周期。</p>\n<p>计算机每执行一条指令的过程，可分解为如下步骤：</p>\n<ol>\n<li><strong>Instruction Fetch（取指令</strong>：指令放在存储器，通过 PC 寄存器和指令寄存器取出指令的过程，由控制器（Control Unit）操作。 从 PC 寄存器找到对应指令地址，据指令地址从内存把具体指令加载到指令寄存器，然后 PC 寄存器自增；</li>\n<li><strong>Instruction Decode（译码</strong>：据指令寄存器里面的指令，是哪一种类型的指令，解析成要进行什么操作，具体要操作哪些寄存器、数据或内存地址。该阶段也是由控制器执行；</li>\n<li><strong>Execute（执行）</strong>：实际执行算术逻辑操作、数据传输或者直接的地址跳转操作。无论是算术操作、逻辑操作的指令，还是数据传输、条件分支的指令，都由算术逻辑单元（ALU）操作，即由运算器处理。如果是一个简单的无条件地址跳转，那可直接在控制器里完成，无需运算器</li>\n</ol>\n<p>重复 1 ～ 3 的过程，这个循环完成的时间即指令周期。</p>\n<p><strong>机器周期</strong>:</p>\n<p> 又称为<strong>CPU 周期（CPU Cycle）</strong>。一个机器周期内包含若干时钟周期，包含时钟周期的个数称之为机器周期的<strong>时间宽度</strong>。</p>\n<p><img src=\"计算机组成原理基础/image-20230703222734882.png\" alt=\"image-20230703222734882\"></p>\n<p><strong>总结</strong>:</p>\n<p><strong>==一个指令周期包含多个机器周期，而一个机器周期包含多个时钟周期==</strong></p></blockquote>\n<p>==CPI==</p>\n<p> CPI(Clock cycle Per Instruction),即执行一条指令所需要的时钟周期数</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>🙋‍♂️ 不同指令的时钟周期数可能不同,因此对于一个程序或一台机器来说,其 CPI 是指该程序或机器啊指令集中所有指令执行所需的平均时钟周期数,,此时 CPI 是一个平均值</p></blockquote>\n<p>==CPU 执行时间==</p>\n<p> 指运行一个程序所要花费的时间</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">CPU执行时间 = CPU时钟周期数/主频 = <span class=\"token punctuation\">(</span>指令条数×CPI<span class=\"token punctuation\">)</span>/主频<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>🙋‍♂️ 上式表 CPU 性能(CPU 执行时间)取决于三个要素:① 主频(时钟频率);② 每条指令执行所用的时钟周期数;③ 指令条数</p>\n<p>主频、CPI 和指令条数时相互制约的,例如,更改指令集可以减少程序所含指令的条数,但可能会引起 CPU 结构的调整,从而可能会增加时钟周期的宽度(降低主频)</p></blockquote>\n<p>==MIPS==</p>\n<p> 每秒执行多少百万条指令</p>\n<p>==MFLOPS、GFLOPS、TFLOPS、PFLOPS、ZFLOPS 和 EFLOPS==</p>\n<p> 每秒执行多少百万、千万….条浮点指令</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>🚨 在描述容量存储容量、文件大小等时,K、M、G、T 通常用 2 的幂次来表示,例如 1Kb = 2^10^b;</p>\n<p> 在描述速率、频率等时 k、M、G、T 通常用 10 的幂次方表示,如 1kb/s = 10^3^b/s。通常前者用大写的 K,后者用小写的 k,但其他前缀均为大写,表示含义取决于所用场景</p></blockquote>\n<p>👨‍💻<strong>基准程序</strong></p>\n<p> 基准程序是专门用来进行性能评价的一组程序,能够很好的反映机器在运行实际负载时的性能,可以通过在不同机器上运行相同的基准程序来比较在不同机器上的运行时间,从而评价其性能</p>\n<h3 id=\"几个专业术语\"><a href=\"#几个专业术语\" class=\"headerlink\" title=\"几个专业术语\"></a>几个专业术语</h3><ul>\n<li><strong>系列机</strong>:具有基本相同的体系结构,使用相同的基本指令系统的多个不同型号的计算机组成的一个产品系列。</li>\n<li><p><strong>兼容</strong>:指软件或硬件的通用性,即运行在某个型号的计算机系统重的硬件/软件也应用于另一个型号的计算机系统时,称这两台计算机在硬件或软件上存在兼容性</p>\n<p>-</p>\n</li>\n<li><p><strong>软件可移植性</strong>:指把某个系列计算机中的软件直接或进行很少的修改就能运行在另一个系列计算机中的可能性</p>\n</li>\n<li><strong>固件</strong>:将程序固话在<code>ROM</code>中组成的部件称为固件。固件是一种具有软件特性的硬件,吸收了软/硬件各自的优点,其执行速度快于软件,灵活优于硬件,是软/硬结合的产物</li>\n<li><p><strong>透明性</strong>:在计算机领域中,站在某类用户的角度,若感觉不到某个事物或者属性的存在,即”看”不到某个事物或者属性,则称为”对该用户而言,某个事物或属性是透明的”,这与日常生活中”透明”的概念(公开、看得见)正好相反</p>\n<p>例如:对于高级语言程序员来说,浮点数格式、乘法指令等这些指令的格式、数据如何在运算器中运算等都是透明的,而对于机器语言或者汇编语言程序员来说,指令的格式、机器结构、数据格式等则不是透明的</p>\n<p>在 CPU 中<code>IR</code>、<code>MAR</code>和<code>MDR</code>对各类程序员都是透明的</p>\n</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>🤔<strong>计算机体系结构和计算机组成的区别是和联系是什么?</strong></p>\n<p>计算机体系结构是指机器语言或汇编语言程序员所看到的传统机器的属性,包括指令集、数据类型、存储器寻址技术等,大多都属于抽象的属性。</p>\n<p>计算机组成是指如何实现计算机体系结构所体现的属性,它包含对许多程序员类说透明的硬件细节。</p>\n<p>例如:指令系统属于结构的问题,但指令的实现即如何取指令、分析指令、如何运算等都属于组成的问题。因此,当两台机器指令系统相同时,只能认为他们具有相同的结构,至于这两台机器如何实现其指令,完全可以</p></blockquote>\n<h1 id=\"数据的表示和运算\"><a href=\"#数据的表示和运算\" class=\"headerlink\" title=\"数据的表示和运算\"></a>数据的表示和运算</h1><h2 id=\"数制与编码\"><a href=\"#数制与编码\" class=\"headerlink\" title=\"==数制与编码==\"></a>==数制与编码==</h2><h3 id=\"进位计数制及其相互转换\"><a href=\"#进位计数制及其相互转换\" class=\"headerlink\" title=\"进位计数制及其相互转换\"></a>进位计数制及其相互转换</h3><h4 id=\"进位计数法\"><a href=\"#进位计数法\" class=\"headerlink\" title=\"进位计数法\"></a>进位计数法</h4><p>常用的进位计数法有十进制、二进制、八进制、十六进制等</p>\n<p>一个<code>r进制数</code>(K~n~K~n-1~…K~0~K~-1~…K~-m~)的数值可表示为:</p>\n<p>$K<em>n r^n+K</em>{n-1} r^{n-1}+\\cdots+K<em>0 r^0+K</em>{-1} r^{-1}+\\cdots+K<em>{-m} r^{-m}=\\sum</em>{i=n}^{-m} K_i r^i$</p>\n<p>其中<code>r</code>是==基数==;r^i^是第 i 位的位权(整数位最低位规定为第 0 位);K~i~的取值可以是 0,1,…,r-1 共 r 个数码中的任意一个</p>\n<p>数制的表示有 2 种方法，一种表示方法是<code>数字下标法</code>，对于不同进制的数可以将它们加上括号再用数字下标表示进制：</p>\n<p>例如：（110010011111）2 代表二进制数 ； （6137）8 代表八进制数</p>\n<p>另一种是用<code>后缀字母表示进制</code>：</p>\n<p>二进制 <code>B</code> (binary)<br>八进制 <code>O</code> (octal)<br>十进制 <code>D</code> (decimal)<br>十六进制 <code>H</code> (hexadecimal)</p>\n<p>例如：（3AB）H 代表十六进制数；（2654）O 代表八进制数</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>当没有下标或后缀时默认为十进制数。</p></blockquote>\n<ol>\n<li><em>二进制</em>。计算机中用得最多的是基数为 2 的计数制,即 2 进制</li>\n<li><em>八进制</em>。只有 0~7 共 8 位数字,计数”逢八进一”,因为 r = 2^3^所以只要把二进制中的 3 位数码编为一组就是一位八进制数</li>\n</ol>\n<p>举个 🌰:将二进制数 1111000010.011101 转为 8 进制数</p>\n<p><img src=\"计算机组成原理基础/二转八-1688436552298-4.svg\" alt=\"二转八\"></p>\n<p>所以对应的 8 进制数为(1702.32)~8~</p>\n<ol>\n<li><em>十六进制数</em>。也是二进制的一种常用的书写方式,其基数为 16,”逢十六进一”。每个十六进制数位可以取 0~9、A、B、C、D、E、F,A~F 表示 10~15。因为 r = 16 = 2^4^,所以只要把二进制中的 4 位数码编写为一组就是一位十六进制数</li>\n</ol>\n<p>举个 🌰:将二进制数 1111000010.011101 转为 16 进制数</p>\n<p><img src=\"计算机组成原理基础/二转十六.svg\" alt=\"二转十六\"></p>\n<p>所以对应的 16 进制数为(3C2.68)~16~</p>\n<p><strong>将任意进制数转换为十进制数</strong></p>\n<p>将任意一个进制数的各位数码与他们的权值相乘,再把乘积相加,就得到了一个十进制数。这种方法称为<code>按权展开相加法</code></p>\n<p>举个 🌰:将二进制数 11011.1 转为 10 进制数</p>\n<p>(11011.1)~2~ = 1×2^4^ + 1×2^3^ + 1×2^1^ + 1×2^0^ + 1×2^-1^ = 27.5</p>\n<p><strong>将十进制数转换为任意进制数</strong></p>\n<p>一个十进制数转换为任意进制数,其整数部分常采用<strong><code>除基取余法</code></strong>,余数部分常采用<strong><code>乘基取余法</code></strong></p>\n<p>==除基取余法==</p>\n<p>整数部分除基取余,最先取得的余数为数的最低位,最后取得的余数为数的最高位,商为 0 时结束</p>\n<p>==乘基取整法==</p>\n<p>小数部分乘基取整,最先取得的整数为数的最高位,最后取得的整数为数的最低位,乘积为 1.0(或满足精度要求)时结束</p>\n<p>举个 🌰:将十进制数 123.6875 转为 2 进制数</p>\n<p><strong>整数部分</strong>:<code>除基取余</code></p>\n<p><img src=\"计算机组成原理基础/除基取余.svg\" alt=\"除基取余\"></p>\n<p><strong>小数部分</strong>:<code>乘基取整</code></p>\n<p><img src=\"计算机组成原理基础/乘基取整.svg\" alt=\"乘基取整\"></p>\n<p>所以(123.6875)~10~ = (1111011.1011)~2~</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>🚨 在计算机中,小数和整数不一样,整数可以连续表示,但小数是离散的,所以并不是每一个十进制小数都可以准确地用二进制表示。例如 0.3。但任意一个二进制小数都可以用十进制小数表示</p></blockquote>\n<p><strong>真值和机器数</strong></p>\n<p>在计算机中,通常将数的符号和数值部分一起编码,将数据的符号数字化,通常使用<code>&quot;0&quot;</code>表示<code>&quot;正&quot;</code>,用<code>&quot;1&quot;</code>表示<code>&quot;负&quot;</code>。这种把符号”数字化”的数称为<code>机器数</code>。常用的有原码、补码和反码表示法。如 0,101(这里的逗号”,”仅为区分符号位与数值位)表示+5</p>\n<h3 id=\"定点数的编码表示\"><a href=\"#定点数的编码表示\" class=\"headerlink\" title=\"定点数的编码表示\"></a>定点数的编码表示</h3><p> 根据小数点的位置是否固定,在计算机中有两种数据格式:==定点表示==和==浮点表示==。在现代计算机中,通常用定点补码整数表示整数,用定点原码小数表示浮点数的尾数部分,用移码表示浮点数的阶码部分。</p>\n<h4 id=\"机器数的定点表示\"><a href=\"#机器数的定点表示\" class=\"headerlink\" title=\"机器数的定点表示\"></a>机器数的定点表示</h4><p><strong>定点小数</strong>:</p>\n<p><img src=\"计算机组成原理基础/定点小数.svg\" alt=\"定点小数\"></p>\n<p><strong>定点整数</strong>:</p>\n<p><img src=\"计算机组成原理基础/定点整数-1688458349449-11.svg\" alt=\"定点整数\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>🙋‍♂️ 上图中的小数点其实并不真实存在,而是隐含位,是由计算机硬件进行处理的</p></blockquote>\n<p><code>定点数编码表示法</code>主要有以下 4 种:==原码==、==补码==、==反码==和==移码==</p>\n<h4 id=\"原码、补码、反码、移码\"><a href=\"#原码、补码、反码、移码\" class=\"headerlink\" title=\"原码、补码、反码、移码\"></a>原码、补码、反码、移码</h4><h5 id=\"原码表示法\"><a href=\"#原码表示法\" class=\"headerlink\" title=\"原码表示法\"></a>原码表示法</h5><ul>\n<li><em>纯小数原码定义</em></li>\n</ul>\n<p>$[x]<em>{\\text{原}} = \\begin{cases} x &amp; 1 &gt; x \\geq 0 \\ 1 - x = 1 + | x | &amp; 0 \\geq x &gt; - 1 \\end{cases} ( [ x ] </em> { 原 }\\text{是原码机器数,x 是真值})$</p>\n<p>例如,若 x~1~ = +0.1101, x~2~ = -0.1101,字长为 8 位,则其原码表示为[x~1~]~原~ = <strong>0</strong>.1101000,[x~2~]~原~ = <strong>1</strong>.1101000</p>\n<p>若字长为 n+1,则原码小数的表示范围为 -(1-2^-n^) &lt;= x &lt;= 1-2^-n^(关于原点对称)</p>\n<ul>\n<li><em>纯整数原码定义^*^</em></li>\n</ul>\n<p>$[x]_\\text{原}=\\begin{cases}0,x&amp;2^n&gt;x\\geq0\\2^n-x=2^n+|x|&amp;0\\geq x&gt;-2^n\\end{cases}(x+\\text{是真值,}n\\text{ 是整数位数)}$</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>🚨 真值零的原码表示有正零和负零两种形式,即[+0]~原~ = <strong>0</strong>0000 和[-0]~原~ = <strong>1</strong>0000</p></blockquote>\n<p>原码的优点是 与真值的对应关系简单、直观,与真值的转换简单,并且用原码实现乘除运算比较简单。</p>\n<p>缺点是,0 的表示不唯一,更重要的是原码加减运算比较复杂(其复杂体现在对于两个不同符号数的加法(或同符号数的减法),先要比较两个数绝对值大小,再用绝对值大的数减去绝对值小的数,最后还要给结果选择合适的符号)</p>\n<h5 id=\"补码表示法\"><a href=\"#补码表示法\" class=\"headerlink\" title=\"补码表示法\"></a>补码表示法</h5><p>补码的加减运算同一用加法操作实现</p>\n<ul>\n<li>纯小数补码定义(了解)</li>\n</ul>\n<p>$[x]_{\\text{补}}=\\begin{cases}x&amp;1&gt;x\\geq0\\2+x=2-\\mid x\\mid&amp;0&gt;x\\geq-1\\end{cases}({\\mathrm{mod}}2)$</p>\n<p>若字长为 n+1,则补码表示范围为-1 &lt;= x &lt;= 1-2^-n^ (比原码多表示-1)</p>\n<ul>\n<li>纯整数的补码定义</li>\n</ul>\n<p>$[x]_\\text{补}=\\begin{cases}0,x&amp;2^n&gt;x\\geq0\\2^{n+1}+x=2^{n+1}-\\mid x\\mid&amp;0\\geq x\\geq-2^n\\end{cases}\\pmod{2^{n+1}}$</p>\n<p>若字长为 n+1,则补码的表示范围为-2^n^ &lt;= x &lt;= 2^n-1^ (比原码多-2^n^)</p>\n<p><strong>补码计算法定义：非负数的补码是其原码本身；负数的补码是其绝对值的原码最高位符号位不变，其它位取反，再加 1。</strong></p>\n<p>一个字节 8 位，如果采用原码表示正整数（含 0），可以表达 0-255，即 2^8^=256，一共 256 种状态，从全 0 到全 1 的各种排列组合。如果要表示负数，则符号位需要占用一位（最高位，1 代表负数，0 代表正数），因此其绝对值最大范围为 0-127，即 2^7^=128，一共正负各 128 种状态，如果不采用特殊处理，这时候 0 占用 2 个编码（10000000 和 00000000），数据表示范围为-127 到-0 及+0 到 127，这样总体上一个字节只有 255 种状态，因为其中 0 具有正 0 和负 0 之分，这不符合数学意义也浪费一个编码。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">  除了以上的弊端，还有个原因是，早期硬件很昂贵，一位或者一个编码的浪费都是不可饶恕的，因此人们想到了另一种编码把负0利用起来，即当遇到负数时，采用补码来表示就可以解决这个问题，而遇到正数或0时还是保留原码表示。因此这个负0通过补码算法处理后自然而然地被利用起来，用来表示-128.\n\n补码的算法为：绝对值的原码各位取反后加1.\n例1：负1的补码：\n    绝对值的8位原码为00000001\n    取反：11111110\n    加1 ：11111111\n    此时最高位被处理为1，满足高位为1代表负数的定义。\n例2：负128的补码：\n    绝对值的8位原码为10000000\n    取反：01111111\n    加1 ：10000000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>此时同样的最高位被置为 1，同样满足高位为 1 代表负数的定义,同时原先表示负 0 的编码被利用起来表示-128。<br>因此一个字节的有符号整数范围为-128 到 127。</p>\n<p>综上为：</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"> 原码+反码：8位原码和反码能够表示数的范围是-127~127；\n\n 补码：8位补码能够表示数的范围是 -128~127。\n\n（在补码中用<span class=\"token punctuation\">(</span>-128<span class=\"token punctuation\">)</span>代替了<span class=\"token punctuation\">(</span>-0<span class=\"token punctuation\">)</span>，所以补码的表示范围为：<span class=\"token punctuation\">(</span>-128~0~127<span class=\"token punctuation\">)</span>共256个）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>变形补码</li>\n</ul>\n<p>变形补码,又称模 4 补码,双符号位的补码小数</p>\n<p>概念:</p>\n<p> 用两个二进制位来表示符号位，其余位与补码相同，【例如模 2 补码的-3 为 1101,模 2 用 1 位，这里是最高位表示符号位，剩下 3 位是 3 的补码，同样模 4 补码表示-3 为 11_101,模 4 用两位表示符号位，这里是最高两位 11，其余 3 位为 3 的补码】总的说来就是符号位左边那一位表示正确的符号(这就说明了选择题里面存储模 4 补码只需要一个符号位是正确的，因为任意一个正确的数值，模 4 补码的符号位两个都是一样的，只需存储一个就行了)，0 为正，1 为负；右边那一位如果和左边的相同，如 “00”表示正且无溢出，”11”表示负且无溢出。如果右边那一位与左边那一位不一样，则表示有溢出。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>对任意的<code>x</code>,若已知<code>[x]补</code>,则把<code>[x]补</code>连同符号位的每一位都取反再<code>加1</code>即可得到<code>[-x]补</code></strong></p></blockquote>\n<h5 id=\"反码表示法\"><a href=\"#反码表示法\" class=\"headerlink\" title=\"反码表示法\"></a>反码表示法</h5><p>反码表示法的定义就是,负数补码的最后一位减 1,整正数反码的的定义与相应的补码(或原码)表示相同</p>\n<p>0 的表示不唯一</p>\n<h5 id=\"移码表示法\"><a href=\"#移码表示法\" class=\"headerlink\" title=\"移码表示法\"></a>移码表示法</h5><p>移码常用来表示浮点数的阶码,他只能表示整数</p>\n<p>移码就是真值 X 上加上一个常数(偏置值),通常这个常数取 2^n^,相当于 X 在数轴上正方向偏移了若干单位,这就是”移码”一词的由来。</p>\n<p>移码的定义为:</p>\n<p>$[x]_{移}=2^{n}+x(2^{n}&gt;x\\geq-2^{n},\\text{ 其中机器字长为 }n+1)$</p>\n<p>若正数 x~1~ = +10101,x~2~ = -10101,字长为 8 位则其移码表示为 x~1 移~ = 2^7^+10101 =&gt; 1,0010101 ;x~2 移~ = 2^7^+(-10101) =&gt; 0,1101011</p>\n<p>一个真值的移码与补码仅差一个符号位,[x]~补~的符号位取反即得[x]~移~</p>\n<p>移码中零的表示唯一</p>\n<p>移码全 0,对应真值的最小值-2^n^;移码全 1 时,对应真值最大值 2^n^-1</p>\n<h2 id=\"运算方法和运算电路\"><a href=\"#运算方法和运算电路\" class=\"headerlink\" title=\"运算方法和运算电路\"></a>运算方法和运算电路</h2><h3 id=\"基本运算部件\"><a href=\"#基本运算部件\" class=\"headerlink\" title=\"基本运算部件\"></a>基本运算部件</h3><p> 在计算机中,运算器由算数逻辑单元(Arithmetic Logic Unit, ALU)、移位器、状态寄存器和通用寄存器等组成的。运算器的基本功能包括加减乘除四则运算,与、或、非、异或等逻辑运算,以及移位、求补等操作。<code>ALU</code>的核心部件是<code>加法器</code></p>\n<p><strong>以下是一些常用的逻辑符号</strong>👇:</p>\n<p><img src=\"计算机组成原理基础/逻辑符号.svg\" alt=\"逻辑符号\"></p>\n<h4 id=\"公式和定理👨‍🏫\"><a href=\"#公式和定理👨‍🏫\" class=\"headerlink\" title=\"公式和定理👨‍🏫\"></a><strong>公式和定理</strong>👨‍🏫</h4><p><em>常量之间的关系</em>:</p>\n<p>$\\begin{aligned}&amp;\\text{公式1} &amp;&amp; 0 \\cdot 0 = 0 \\&amp;\\text{公式}1’ &amp;&amp; 1 + 1 = 1 \\&amp;\\text{公式2} &amp;&amp; 0 \\cdot 1 = 0 \\&amp;\\text{公式}2’ &amp;&amp; 1 + 0 = 1 \\&amp;\\text{公式3} &amp;&amp; 1 \\cdot 1 = 1 \\&amp;\\text{公式}3’ &amp;&amp; 0 + 0 = 0 \\&amp;\\text{公式4} &amp;&amp; \\overline{0} = 1 \\&amp;\\text{公式}4’ &amp;&amp; \\overline{1} = 0 \\\\end{aligned}$</p>\n<p><em>常量与变量的关系</em></p>\n<p>$\\begin{aligned}&amp;\\text{公式5} &amp;&amp; A\\cdot1=A \\&amp;\\text{公式}5’ &amp;&amp;  A+0=A \\&amp;\\text{公式6} &amp;&amp; A\\cdot0=0 \\&amp;\\text{公式}6’ &amp;&amp; A+1=1 \\&amp;\\text{公式7} &amp;&amp; A\\cdot\\overline{A}=0 \\&amp;\\text{公式}7’ &amp;&amp; A+\\overline{A}=1 \\end{aligned}$</p>\n<p><em>与普通代数相似的定理</em></p>\n<p>$\\begin{aligned}&amp;\\textbf{交换律} \\&amp;\\text{公式8}&amp;&amp; A\\cdot B=B\\cdot A  \\&amp;\\text{公式8}’&amp;&amp; A+B=B+A  \\&amp;\\textbf{结合律} \\&amp;\\text{公式9}&amp;&amp; \\left(A\\cdot B\\right)\\cdot C=A\\cdot\\left(B\\cdot C\\right)  \\&amp;\\text{公式}9’&amp;&amp; \\left(A+B\\right)+C=A+\\left(B+C\\right)  \\&amp;\\textbf{分配律} \\&amp;\\text{公式10}&amp;&amp; A\\cdot\\left(B+C\\right)=A\\cdot B+A\\cdot C  \\&amp;公式10^{\\prime}&amp;&amp; A+B\\cdot C=\\left(A+B\\right)\\cdot\\left(A+C\\right) \\end{aligned}$</p>\n<p><em>逻辑代数的一些特殊定理</em></p>\n<p>$\\begin{aligned}&amp;\\textbf{同一律} \\&amp;\\text{公式 11}&amp;&amp; A\\cdot A=A  \\&amp;\\text{公式 11}’&amp;&amp; A+A=A  \\&amp;\\textbf{德·摩根定理} \\&amp;\\text{公式 12}&amp;&amp; \\overline{A\\cdot B}=\\overline{A}+\\overline{B}  \\&amp;\\text{公式 12}’&amp;&amp; \\overline{A+B}=\\overline{A}\\cdot\\overline{B}  \\&amp;\\textbf{还原律} \\&amp;\\text{公式13}&amp;&amp; \\overline{\\overline{A}}=A \\end{aligned}$</p>\n<p><em>若干常用公式</em></p>\n<p>$\\begin{aligned} &amp;\\text{公式14} &amp;&amp; A \\cdot B + A \\cdot \\overline{B} = A \\ &amp;\\text{公式15} &amp;&amp; A + A \\cdot B = A \\ &amp;\\text{公式16} &amp;&amp;A+\\overline{A}\\cdot B=A+B\\end{aligned}$</p>\n<h4 id=\"逻辑函数的公式化简法\"><a href=\"#逻辑函数的公式化简法\" class=\"headerlink\" title=\"逻辑函数的公式化简法\"></a>逻辑函数的公式化简法</h4><p><strong>一、并项法</strong></p>\n<p>利用公式 14 把两个乘积项合并起来,消除一个变量。</p>\n<p>🌰:化简函数 Y = ABC + AB┐C+ ┐AB</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">AB C + AB ┐C => AB\nAB + ┐AB => B<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>二、吸收法</strong></p>\n<p>利用公式 15,吸收掉多余的乘积项</p>\n<p>🌰:化简函数 Y =┐(AB) + ┐AD+ ┐BE</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">利用摩根公式\n┐<span class=\"token punctuation\">(</span>AB<span class=\"token punctuation\">)</span> = ┐A + ┐B\n┐A + ┐AD => ┐A\n┐B + ┐BE => ┐B\n=> ┐A + ┐B<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>三、消去法</strong></p>\n<p>利用公式 16 消去乘积中多余的乘积项</p>\n<p>🌰:化简函数 Y = ┐(AB) + AC+ BD</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">利用摩根公式\n┐<span class=\"token punctuation\">(</span>AB<span class=\"token punctuation\">)</span> = ┐A + ┐B\n=> ┐A + ┐B + C + D<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"逻辑函数的图形化简法\"><a href=\"#逻辑函数的图形化简法\" class=\"headerlink\" title=\"逻辑函数的图形化简法\"></a>逻辑函数的图形化简法</h4><p>用卡诺图化简逻辑函数,求最简与或表达式的方式被称为图形化简法。图形化简法有较明确的步骤可以遵循,但是变量超过 6 个以上的时候就没什么实用价值了</p>\n<p><strong>卡诺图化简法</strong></p>\n<p>卡诺图是一种最小项方块图,卡诺图的特点是用几何相邻形象地表示各变量各个最小项在逻辑上的相邻性</p>\n<p>下图为变量 AB 的卡诺图:</p>\n<p><img src=\"计算机组成原理基础/2卡诺图.svg\" alt=\"2卡诺图\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>🚨 上图中 ┐A┐B 不能画作 ┐(AB)只是画图时连接在了一起,二者并不等价</p>\n<p>之后的图省略 ┐A┐B 等为 0 或 1,在逻辑函数中的最小项有 ┐A┐B 则在 卡诺图中 00 位置 填 1</p>\n<p><img src=\"计算机组成原理基础/test1.svg\" alt=\"test1\"></p></blockquote>\n<p>三变量的卡诺图:</p>\n<p><img src=\"计算机组成原理基础/3卡诺图.drawio.svg\" alt=\"3卡诺图.drawio\"></p>\n<p>下图为四变量的卡诺图:</p>\n<p><img src=\"计算机组成原理基础/4卡诺图.svg\" alt=\"4卡诺图\"></p>\n<p>五变量的卡诺图:</p>\n<p><img src=\"计算机组成原理基础/5卡诺图.drawio.svg\" alt=\"5卡诺图.drawio\"></p>\n<p>六变量的卡诺图:</p>\n<p><img src=\"计算机组成原理基础/6卡诺图.svg\" alt=\"6卡诺图\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>🤔<strong>为什么卡诺图中的变量取值是 00 01 11 10 而不是 00 01 10 11?</strong></p>\n<p> 因为卡诺图的画法是按循环码排列变量取值顺序。<strong>循环码的特点是相邻编码之间只有 1 位码元不同</strong>,而若是 01 10 则有两位码元相同。变量取值之所以按循环码排列,是因为保证卡诺图中,凡是几何相邻的最小项,在逻辑上是相邻的这一重要特点</p></blockquote>\n<p><strong>卡诺图的化简</strong></p>\n<ul>\n<li><p><em>几何相邻</em></p>\n<ul>\n<li>相接——紧挨着的方块</li>\n<li>相对——任一行或者一列的两头</li>\n<li>相重——对折起来后位置重合</li>\n</ul>\n</li>\n<li><p><em>逻辑相邻</em></p>\n<p>如果两个最小项,除了一个变量的形式不同以外,其余的都相同,那么这两个最小项就称为在逻辑上相邻</p>\n</li>\n</ul>\n<p>卡诺图中凡是几何相邻的最小项均可合并,合并时能消除有关变量。两个最小项合并成一项时可以消去一个变量,4 个最小项合并成一项可以消除 2 个变量,8 个最小项合并可以消除 3 个变量。所以一般来说 2^n^个最小项合并时可以消去 n 个变量。(即一次看一列或者一行,若有一个码元发生改变,即消除那个发生改变的码元)</p>\n<p>🌰:用图形化化简函数</p>\n<p>$Y=\\overline{B}CD+B\\overline{C}+\\overline{A}\\:\\overline{C}D+A\\overline{B}C$</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>┐A┐CD</p></blockquote>\n<p>① 画出函数的卡诺图</p>\n<p>观察函数,发现函数只有 4 个不同的变量 ABCD,画出四变量卡诺图,在图中标出 Y 所包含的全部最小项,如下图<br><img src=\"计算机组成原理基础/1testtest.svg\" alt=\"1\"></p>\n<p>② 合并最小项</p>\n<p>合并原则是:</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">- 必须包含函数的所有最小项<span class=\"token punctuation\">,</span>并且保证合并后的乘积项的总数最少\n- 相邻的最小项合并时<span class=\"token punctuation\">,</span>蕴含的最小项数越多<span class=\"token punctuation\">,</span>则合并后的乘积因子最少\n- 每次合并时<span class=\"token punctuation\">,</span>为了消去更多变量<span class=\"token punctuation\">,</span>可以重复使用函数的最小项<span class=\"token punctuation\">,</span>但是必须保证至少包含1个新的最小项<span class=\"token punctuation\">(</span>未被重复使用过<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>以避免冗余项的出现<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p> <strong>圈要少、圈最大（先少后大）</strong></p>\n<p> 化简中注意的问题:</p>\n<p> ➢ 每一个标 1 的方格必须至少被圈一次;</p>\n<p> ➢ 每个圈中包含的相邻小方格数,必须为 2 的整数次幂;</p>\n<p> ➢ 为了得到尽可 能大的圈，圈与圈之间可以重叠;</p>\n<p> ➢ 若某个圈中的标 1 方格,已经完全被其它圈所覆盖,则该圈为多余的。</p>\n<p><img src=\"计算机组成原理基础/化简.svg\" alt=\"化简\"></p>\n<p>结果为:Y = B┐C + ┐A┐BD + A┐BC</p>\n<p><strong>五变量化简卡诺图</strong></p>\n<p><img src=\"计算机组成原理基础/5化简.svg\" alt=\"5化简\"></p>\n<p>因为红圈部分为 ┐E 所独有,则在 ┐E 中的化简中 ┐E 不能消除,绿圈中为 ┐E 和 E 图中共有,则消去 E 变量,再把二图中的所得结果相与则可得出最终答案</p>\n<h4 id=\"一位全加器\"><a href=\"#一位全加器\" class=\"headerlink\" title=\"一位全加器\"></a>一位全加器</h4><p>全加器(FA)是最基本的加法单元,有加数 A~i~、加数 B~i~与低位传来的进位 C~i-1~共三个输入,有本位和 S~i~与向高位的进位 C~i~共两个输出。</p>\n<p>其真值表为:</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">A~i~(加数)</th>\n<th style=\"text-align:center\">B~i~(加数)</th>\n<th style=\"text-align:center\">C~i-1~(低位进位)</th>\n<th style=\"text-align:center\">S~i~(本位)</th>\n<th style=\"text-align:center\">C~i~(向高位进位)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>表中目标值(S~i~、C~i~)为 1 的行保留,其他行舍弃</p>\n<p>可得:</p>\n<p>$\\mathrm S=\\overline{A<em>i}\\:\\overline{B_i}\\mathrm C</em>{i-1}+\\overline{A<em>i}\\mathrm B_i\\overline{C</em>{i-1}}+\\mathrm A<em>i\\overline{B_i}\\:\\overline{C</em>{i-1}} +\\mathrm A<em>i\\mathrm B_i\\mathrm C</em>{i-1}$</p>\n<p>由卡诺图化简得:</p>\n<p>$\\mathrm{S=A<em>i\\otimes B_i\\otimes C</em>{i-1}}$</p>\n<p>$\\mathrm C<em>{\\mathrm i}=\\mathrm A_i\\mathrm B_i+\\mathrm B_i\\mathrm C</em>{i-1}+\\mathrm C<em>{i-1}\\mathrm A_i=\\mathrm A_i\\mathrm B_i+(\\mathrm A\\otimes\\mathrm B)\\mathrm C</em>{i-1}$</p>\n<p>可以由此画出一位全加器的逻辑结构为:</p>\n<p><img src=\"计算机组成原理基础/加法器.svg\" alt=\"加法器\"></p>\n<p>由此可以得出<strong>N 位串行进位加法器</strong>的结构:</p>\n<p><img src=\"计算机组成原理基础/N-1688645147129-17.svg\" alt=\"N\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>🙋‍♂️ 在串行进位加法器的最长运算时间是由产生的进位信号所产生的传递延迟所决定的,位数越多延迟时间越长.所以人们又设计出了并行进位加法器</p></blockquote>\n<p><strong>并行进位加法器</strong></p>\n<p>由$\\mathrm C<em>{\\mathrm i}=\\mathrm A_i\\mathrm B_i+\\mathrm B_i\\mathrm C</em>{i-1}+\\mathrm C<em>{i-1}\\mathrm A_i=\\mathrm A_i\\mathrm B_i+(\\mathrm A\\otimes\\mathrm B)\\mathrm C</em>{i-1}$,令 G~i~= A~i~B~i~,P~i~=A⊕B,可得 C~i~=G~i~+P~i~C~i-1~</p>\n<p>将 G~i~和 P~i~带入前面的 C~1~~C~4~中可得:</p>\n<p>$\\begin{aligned}&amp;\\text{C1} =G<em>{1}+P</em>{1}C<em>{0}  \\&amp;C</em>{2} =G<em>{2}+P</em>{2}C<em>{1}=G</em>{2}+P<em>{2}G</em>{1}+P<em>{2}P</em>{1}C<em>{0}  \\&amp;C</em>{3} =G<em>{3}+P</em>{3}C<em>{2}=G</em>{3}+P<em>{3}G</em>{2}+P<em>{3}P</em>{2}G<em>{1}+P</em>{3}P<em>{2}P</em>{1}C<em>{0}  \\&amp;C</em>{4} =G<em>{4}+P</em>{4}C<em>{3}  =G</em>{4}+P<em>{4}G</em>{3}+P<em>{4}P</em>{3}G<em>{2}+P</em>{4}P<em>{3}P</em>{2}G<em>{1}+P</em>{4}P<em>{3}P</em>{2}P<em>{1}C</em>{0} \\end{aligned}$</p>\n<p>可知 G~i~在 A~i~B~i~输入时就已得出,唯一需要等待的是 C~0~(因为 C~i~可以用 C~0~推导出)</p>\n<p>所以其他位在 C~0~形成时就可同时生成,但是这样的缺陷是,位数越多,电路越复杂</p>\n<h3 id=\"定点数的运算\"><a href=\"#定点数的运算\" class=\"headerlink\" title=\"定点数的运算\"></a>定点数的运算</h3><h4 id=\"定点数的移位运算\"><a href=\"#定点数的移位运算\" class=\"headerlink\" title=\"定点数的移位运算\"></a>定点数的移位运算</h4><p> 移位运算根据操作对象的不同分为<code>算术移位</code>和<code>逻辑移位</code>。<strong>有符号数的移位称为算术移位</strong>，<strong>逻辑移位的操作对象是逻辑代码,可视为无符号数</strong>。</p>\n<h5 id=\"算术移位\"><a href=\"#算术移位\" class=\"headerlink\" title=\"算术移位\"></a>算术移位</h5><p>算术移位的对象是有符号数，在移位过程中<code>符号位保持不变</code> 。</p>\n<p>对于正数，由于[x]~原~ = [x]~补~ = [x]~反~ = 真值，因此移位后出现的空位均以 0 添之。对于负数，由与原码，补码，反码的表示形式不同，因此当机器数移位时，对其空位的添补规则也不同</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>🙋‍♂️ 不论是正数还是负数，移位后其符号位均不变，且移位后都相当于对真值补 0，根据补码、反码的特性，所以在负数时填补代码有区别。</p></blockquote>\n<p>对于原码，左移一位若不产生溢出，相当于乘以 2(与十进制的左移一位相当于乘以 10 类似)，右移一位，若不考虑因移出而舍去的末位尾数，相当于除以 2。</p>\n<p><img src=\"计算机组成原理基础/20210706102244.png\" alt=\"img\"></p>\n<p>由表 2.1👆 可以得出如下结论。</p>\n<p>正数的原码、补码与反码都相同，因此移位后出现的空位均以 0 添之。对于负数，由于原码、补码和反码的表示形式不同，因此当机器数移位时，对其空位的添补规则也不同。</p>\n<ul>\n<li>负数的原码数值部分与真值相同，因此在移位时只要使符号位不变，其空位均添 0。</li>\n<li>负数的反码各位除符号位外与负数的原码正好相反，因此移位后所添的代码应与原码相反，即全部添 1。</li>\n<li>分析由原码得到补码的过程发现，当对其由低位向高位找到第一个“1”时，在此“1”左边的各位均与对应的反码相同，而在此“1”右边的各位（包括此“1”在内）均与对应的原码相同。因此负数的补码左移时，因空位出现在低位，则添补的代码与原码相同，即添 0;右移时因空位出现在高位，则添补的代码应与反码相同，即添 1。</li>\n</ul>\n<h5 id=\"逻辑移位\"><a href=\"#逻辑移位\" class=\"headerlink\" title=\"逻辑移位\"></a>逻辑移位</h5><p>逻辑移位将操作数视为无符号数，移位规则:逻辑左移时，高位移丢，低位添 0;逻辑右移时，低位移丢，高位添 0。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>🙋‍♂️ 逻辑移位不管是左移还是右移，都添 0。</p></blockquote>\n<p>循环移位分为带进位标志位 CF 的循环移位(大循环）和不带进位标志位的循环移位（小循环)，过程如图 2.7 所示。</p>\n<p>循环移位的主要特点是，移出的数位又被移入数据中，而是否带进位则要看是否将进位标志位加入循环位移。例如，带进位位的循环左移〔见图 2.7(d)]就是数据位连同进位标志位一起左移，数据的最高位移入进位标志位 CF，而进位位则依次移入数据的最低位。</p>\n<p><img src=\"计算机组成原理基础/20210706102442.png\" alt=\"img\"></p>\n<p>循环移位操作特别适合将数据的低字节数据和高字节数据互换。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">带进位标志位CF的循环左移（大循环）：\n假设有一个8位的二进制数：10101010，进位标志位CF的初始值为0。\n\n带进位标志位CF的循环左移一位：\n\n初始状态：10101010\n左移一位后，数据位与进位标志位一起左移，数据的最高位移入进位标志位CF，而进位位则依次移入数据的最低位：\n新状态：01010101，CF=1\n带进位标志位CF的循环左移三位：\n\n初始状态：10101010\n左移三位后，数据位与进位标志位一起左移，数据的最高位移入进位标志位CF，而进位位则依次移入数据的最低位：\n新状态：01010101，CF=1\n\n\n\n不带进位标志位的循环左移（小循环）：\n假设有一个8位的二进制数：10101010\n\n不带进位标志位的循环左移一位：\n初始状态：10101010\n左移一位后，数据位循环左移，最高位移入最低位，不涉及进位标志位：\n新状态：01010101\n\n不带进位标志位的循环左移三位：\n初始状态：10101010\n左移三位后，数据位循环左移，最高位移入最低位，不涉及进位标志位：\n新状态：01010101<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"原码定点数的加减法运算\"><a href=\"#原码定点数的加减法运算\" class=\"headerlink\" title=\"原码定点数的加减法运算\"></a>原码定点数的加减法运算</h4><p>设$[X]<em>\\text{原}=x_s.x_1x_2\\cdots x_n$和$[Y]</em>\\text{原}=y_s.y_1y_2\\cdots y_n$,进行加减运算的规则如下。</p>\n<p><code>加法规则</code>:先判符号位，若相同，则绝对值相加，结果符号位不变;若不同，则做减法，绝对值大的数减去绝对值小的数，结果符号位与绝对值大的数相同。</p>\n<p><code>减法规则</code>:两个原码表示的数相减，首先将减数符号取反，然后将被减数与符号取反后的减数按原码加法进行运算。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>🙋‍♂️ 运算时注意机器字长，当左边位出现溢出时，将溢出位丢掉。</p></blockquote>\n<h4 id=\"补码定点数加减法运算\"><a href=\"#补码定点数加减法运算\" class=\"headerlink\" title=\"补码定点数加减法运算\"></a>补码定点数加减法运算</h4><p>补码加减运算规则简单，易于实现，因此计算机系统中普遍采用补码加减运算。补码运算的特点如下（设机器字长为 n+1)。</p>\n<ol>\n<li><p>参与运算的两个操作数均用补码表示。</p>\n</li>\n<li><p>按二进制运算规则运算，逢二进一。</p>\n</li>\n<li><p>符号位与数值位按同样规则一起参与运算，符号位运算产生的进位要丢掉，结果的符号<br>位由运算得出。</p>\n</li>\n<li><p>补码加减运算依据下面的公式进行。当参加运算的数是定点小数时，模 M= 2;当参加运算的数是定点整数时，模 M = 2^n^+1。</p>\n</li>\n</ol>\n<script type=\"math/tex; mode=display\">\\begin{cases}{[A+B]_{\\text {补 }}=[A]_{\\text {补 }}+[B]_{\\text {补 }},} & (\\bmod M) \\\\ {[A-B]_{\\text {补 }}=[A]_{\\text {补 }}+[-B]_补,} & (\\bmod M)\\end{cases}</script><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>🙋‍♂️mod M 运算是为了将溢出位丢掉。</p></blockquote>\n<p>也就是说，若做加法，则两数的补码直接相加;若做减法，则将被减数与减数的机器负数相加。</p>\n<p><strong>补码运算的结果亦为补码</strong></p>\n<p>设机器字长为 8 位（含 1 位符号位)，A= 15，B=24，求补[A+B]~补~和[A−B]~补~。</p>\n<p>解：</p>\n<p>A=+15=+0001111，B=+24=+0011000;得补[A]~补~= 00001111，[B]~补~=00011000。</p>\n<p>求得[−B]~补~ = 11101000。所以</p>\n<p>[A+B]~补~=00001111+ 00011000 = 00100111，其符号位为 0，对应真值为+39。</p>\n<p>[A−B]~补~=[A]~补~+[−B]~补~=00001111 + 11101000= 11110111，其符号位为 1，对应真值为-9。</p>\n<h4 id=\"符号扩展\"><a href=\"#符号扩展\" class=\"headerlink\" title=\"符号扩展\"></a>符号扩展</h4><p> 在计算机算术运算中，有时必须把采用给定位数表示的数转换成具有不同位数的某种表示形式。例如，某个程序需要将一个 8 位数与另外一个 32 位数相加，要想得到正确的结果，在将 8 位数与 32 位数相加之前，必须将 8 位数转换成 32 位数形式，这称为“符号扩展”。</p>\n<p>正数的符号扩展非常简单，即原有形式的符号位移动到新形式的符号位上，新表示形式的所有附加位都用 0 进行填充。</p>\n<p>负数的符号扩展方法则根据机器数的不同而不同。原码表示负数的符号扩展方法与正数相同，只不过此时符号位为 1。补码表示负数的符号扩展方法:原有形式的符号位移动到新形式的符号位上，新表示形式的所有附加位都用 1(对于整数）或 0(对于小数）进行填充。反码表示负数的符号扩展方法:原有形式的符号位移动到新形式的符号位上，新表示形式的所有附加位都用 1 进行填充。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>正数相当于位数往左边扩展，负数相当于位数往右边扩展</p></blockquote>\n<h4 id=\"溢出概念和判别方法\"><a href=\"#溢出概念和判别方法\" class=\"headerlink\" title=\"溢出概念和判别方法\"></a>溢出概念和判别方法</h4><p>溢出是指运算结果超过了数的表示范围。通常，称大于机器所能表示的最大正数为上溢，称小于机器所能表示的最小负数为下溢。定点小数的表示范围为|x|&lt;1，如图 2.8 所示。</p>\n<p><img src=\"计算机组成原理基础/20210706143612.png\" alt=\"img\"></p>\n<p>仅当两个符号相同的数相加或两个符号相异的数相减才可能产生溢出，如两个正数相加，而结果的符号位却为 1(结果为负);一个负数减去一个正数，结果的符号位却为 0(结果为正)。定点数加减运算出现溢出时，运算结果是错误的。</p>\n<p>补码定点数加减运算溢出判断的方法有 3 种。</p>\n<p>(1）采用一位符号位</p>\n<p>由于减法运算在机器中是用加法器实现的，因此无论是加法还是减法，只要参加操作的两个数符号相同，结果又与原操作数符号不同，则表示结果溢出。</p>\n<p>设 A 的符号为 A~s~,B 的符号为 B~s~，运算结果的符号为 S~s~,则溢出逻辑表达式为</p>\n<script type=\"math/tex; mode=display\">V=A_sB_s\\bar{S}_s+\\bar{A}_s\\bar{B}_sS_s</script><p>若 V = 0，表示无溢出；若 V = 1，表示有溢出</p>\n<p>(2）采用双符号位</p>\n<p>双符号位法也称模 4 补码。运算结果的两个符号位$S<em>{s1}S</em>{s2}$相同，表示未溢出;运算结果的两个符号位$S<em>{s1}S</em>{s2}$不同，表示溢出，此时最高位符号位代表真正的符号。</p>\n<p>符号位$S<em>{s1}S</em>{s2}$的各种情况如下：</p>\n<ul>\n<li>$S<em>{s1}S</em>{s2} = 00$:表示结果为正数，无溢出</li>\n<li>$S<em>{s1}S</em>{s2} = 01$:表示结果为正溢出</li>\n<li>$S<em>{s1}S</em>{s2} = 10$:表示结果为负溢出</li>\n<li>$S<em>{s1}S</em>{s2} = 11$:表示结果为负数，无溢出</li>\n</ul>\n<p>即$S<em>{s1},S</em>{s2}$相等，无溢出，不等，溢出</p>\n<h4 id=\"定点数的乘法运算\"><a href=\"#定点数的乘法运算\" class=\"headerlink\" title=\"定点数的乘法运算\"></a>定点数的乘法运算</h4><p><strong>带符号的阵列乘法器</strong></p>\n<p><img src=\"计算机组成原理基础/image-20230716075309183.png\" alt=\"image-20230716075309183\"></p>\n<p><img src=\"计算机组成原理基础/image-20230715210620124.png\" alt=\"image-20230715210620124\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>🚨 最后的补级输出是，先加上符号后，再求补</p></blockquote>\n<h5 id=\"原码一位乘法\"><a href=\"#原码一位乘法\" class=\"headerlink\" title=\"原码一位乘法\"></a>原码一位乘法</h5><ignore>\n\n<iframe src=\"//player.bilibili.com/player.html?bvid=BV1e8411S7os&page=1&autoplay=0\" width=\"780\" height=\"480\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" autoplay=\"0\"> </iframe>\n\n</ignore>\n\n<h4 id=\"数据的存储和排列\"><a href=\"#数据的存储和排列\" class=\"headerlink\" title=\"数据的存储和排列\"></a>数据的存储和排列</h4><h5 id=\"数据的“大端方式”和“小端方式”存储\"><a href=\"#数据的“大端方式”和“小端方式”存储\" class=\"headerlink\" title=\"数据的“大端方式”和“小端方式”存储\"></a>数据的“大端方式”和“小端方式”存储</h5><p> 在存储数据时，数据从低位到高位可以按从左到右排列，也可以按从右到左排列。因此，无法用最左或最右来表征数据的最高位或最低位，通常用<code>最低有效字节(Least Significant Bit,LSB)</code>和<code>最高有效字节(Most Significant Bit,MSB)</code>来分别表示数的低位和高位。例如，在 32 位计算机中，一个 int 型变量 i 的机器数为 0123 4567H，其最高有效字节 MSB= 01H，最低有效字节 LSB=67H。</p>\n<p> 现代计算机基本上都采用字节编址，即每个地址编号中存放 1 字节。不同类型的数据占用的字节数不同，int 和 float 型数据占 4 字节，double 型数据占 8 字节等，而程序中对每个数据只给定一个地址。假设变量 i 的地址为 80 00H，字节 01H、23H、45H、67H 应该各有一个内存地址，那么地址 08 00H 对应 4 字节中哪字节的地址呢?这就是字节排列顺序问题。</p>\n<p> 多字节数据都存放在连续的字节序列中，根据数据中各字节在连续字节序列中的排列顺序不同，可以采用两种排列方式:<code>大端方式(big endian)</code>和<code>小端方式(little endian)</code>，如图 2.9 所示 👇。</p>\n<p><img src=\"计算机组成原理基础/20210706152204.png\" alt=\"img\"></p>\n<p><code>大端方式</code><strong>按从最高有效字节到最低有效字节的顺序存储数据，即最高有效字节存放在前面</strong>;</p>\n<p><code>小端方式</code><strong>按从最低有效字节到最高有效字节的顺序存储数据，即最低有效字节存放在前面</strong>。</p>\n<p>在检查底层机器级代码时，需要分清各类型数据字节序列的顺序，例如以下是由反汇编器(汇编的逆过程，即将机器代码转换为汇编代码）生成的一行机器级代码的文本表示:</p>\n<p>4004d3:01 05 64 94 04 08 add %eax,0x8049464</p>\n<p>其中，“4004d3”是十六进制表示的地址，“01 05 43 0b 20 00”是指令的机器代码，“add %eax，Ox8049464”是指令的汇编形式，该指令的第二个操作数是一个立即数 0x8049464，执行该指令时，从指令代码的后 4 字节中取出该立即数，立即数存放的字节序列为 64H、94H、04H、08H，正好与操作数的字节顺序相反，即采用的是小端方式存储，得到 08049464H<br>去掉开头的 0，得到值 0x8049464，在阅读小端方式存储的机器代码时，要注意字节是按相反顺序显示的。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">【2019统考真题】某计算机采用大端方式，按字节编址。某指令中操作数的机器数为 1234 FF00H，该操作数采用基址寻址方式，形式地址（用补码表示）为 FF12H，基址寄存器的内容为 F000 0000H， 则该操作数的 LSB（最低有效字节）所在的地址是<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nA.F000 FF12H\nB.F000 FF15H\nC.EFFF FF12H\nD.EFFF FF15H\n\n解：\n由题中给出\n形式地址由补码表示为<span class=\"token function\">FF12H</span><span class=\"token punctuation\">(</span>1111 1111 0001 0010B<span class=\"token punctuation\">)</span>，所以由对补码求补可得原码为1000 0000 1110 1110B 可知其真值为一个负数\n将符号位提出后为000 0000 1110 1110B 转换为16进制可得 <span class=\"token function\">0000</span><span class=\"token punctuation\">(</span>补0<span class=\"token punctuation\">)</span>0000 1110 1110B => 00EEH 加上符号位后为 -00EEH\n\n由操作数采用基址寻址可知 EA = <span class=\"token punctuation\">(</span>BR<span class=\"token punctuation\">)</span> + A = 即 F000 0000H - 0000 00EE<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"数据按“边界对齐”方式存储\"><a href=\"#数据按“边界对齐”方式存储\" class=\"headerlink\" title=\"数据按“边界对齐”方式存储\"></a>数据按“边界对齐”方式存储</h5><p> 假设存储字长为 32 位，可按字节、半字和字寻址。对于机器字长为 32 位的计算机，数据以边界对齐方式存放，半字地址一定是 2 的整数倍，字地址一定是 4 的整数倍,这样无论所取的数据是字节、半字还是字，均可一次放存取出。所存储的数据不满足上述要求时，通过填充空白字节使其符合要求。这样虽然浪费了一些存储空间，但可提高取指令和取数的速度。</p>\n<p> 数据不按边界对齐方式存储时，可以充分利用存储空间，但半字长或字长的指令可能会存储在两个存储字中，此时需要两次访存，并且对高低字节的位置进行调整、连接之后才能得到所要的指令或数据，从而影响了指令的执行效率。</p>\n<p>例如，“字节 1、字节 2、字节 3、半字 1、半字 2、半字 3、字 1”的数据按序存放在存储器中，按边界对齐方式和不对齐方式存放时，格式分别如图 2.10 和图 2.11 所示。</p>\n<p><img src=\"计算机组成原理基础/20210706152754.png\" alt=\"img\"></p>\n<p>边界对齐方式相对边界不对齐方式是一种空间换时间的思想。RISC 如 ARM 采用边界对齐方式，而 CISC 如 x86 对齐和不对齐都支持。因为对齐方式取指令时间相同，因此能适应指令流水。</p>\n<h2 id=\"c-语言相关\"><a href=\"#c-语言相关\" class=\"headerlink\" title=\"c 语言相关\"></a>c 语言相关</h2><h4 id=\"基本数据类型所占的字节数\"><a href=\"#基本数据类型所占的字节数\" class=\"headerlink\" title=\"基本数据类型所占的字节数\"></a>基本数据类型所占的字节数</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>32 位环境</th>\n<th>64 位环境</th>\n<th>16 位环境</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>char</td>\n<td>8 位</td>\n<td>8 位</td>\n<td>8 位</td>\n</tr>\n<tr>\n<td>unsigned char</td>\n<td>8 位</td>\n<td>8 位</td>\n<td>8 位</td>\n</tr>\n<tr>\n<td>short</td>\n<td>16 位</td>\n<td>16 位</td>\n<td>16 位</td>\n</tr>\n<tr>\n<td>unsigned short</td>\n<td>16 位</td>\n<td>16 位</td>\n<td>16 位</td>\n</tr>\n<tr>\n<td>int</td>\n<td>32 位</td>\n<td>32 位</td>\n<td>16 位</td>\n</tr>\n<tr>\n<td>unsigned int</td>\n<td>32 位</td>\n<td>32 位</td>\n<td>16 位</td>\n</tr>\n<tr>\n<td>long</td>\n<td>32 位</td>\n<td>64 位</td>\n<td>32 位</td>\n</tr>\n<tr>\n<td>unsigned long</td>\n<td>32 位</td>\n<td>64 位</td>\n<td>32 位</td>\n</tr>\n<tr>\n<td>long long</td>\n<td>64 位</td>\n<td>64 位</td>\n<td>32 位</td>\n</tr>\n<tr>\n<td>unsigned long long</td>\n<td>64 位</td>\n<td>64 位</td>\n<td>32 位</td>\n</tr>\n<tr>\n<td>float</td>\n<td>32 位</td>\n<td>32 位</td>\n<td>32 位</td>\n</tr>\n<tr>\n<td>double</td>\n<td>64 位</td>\n<td>64 位</td>\n<td>32 位</td>\n</tr>\n<tr>\n<td>long double</td>\n<td>96 位</td>\n<td>128 位</td>\n<td>80 位</td>\n</tr>\n</tbody>\n</table>\n</div>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>sizeof(数据类型)会返回字节数 例如 sizeof(double) → 8</p></blockquote>\n<p>2^8^ = 256</p>\n<p>2^16^ = 65536</p>\n<p>2^32^ = 4294967296</p>\n<p>2^64^ = 18446744073709551616</p>\n<pre class=\"line-numbers language-CSS\" data-language=\"CSS\"><code class=\"language-CSS\">【2018统考真题】按字节编址的计算机中，某 double 型数组 A 的首地址为 2000H，使用变址寻址和循环结构访问数组 A，保存数组下标的变址寄存器初值为 0，每次循环取一个数组元素，其偏移地址为变址值乘以 sizeof(double)，取完后变址寄存器内容自动加 1。若某次循环所取元素的地址2100H，则进入该次循环时变址寄存器的内容是()\nA.25\tB.32\tC.64\tD.100\n\nsizeof(double) &#x3D; 8\n2000H + 8*i &#x3D; 2100H\n8*i &#x3D; 100H\nH表示该数为16进制，所以100H &#x3D; 2^8 &#x3D; 256\ni &#x3D; 32\n答案选B<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"存储系统\"><a href=\"#存储系统\" class=\"headerlink\" title=\"存储系统\"></a>存储系统</h1><h2 id=\"存储器概述\"><a href=\"#存储器概述\" class=\"headerlink\" title=\"存储器概述\"></a>存储器概述</h2><h3 id=\"存储器的分类\"><a href=\"#存储器的分类\" class=\"headerlink\" title=\"存储器的分类\"></a>存储器的分类</h3><p><strong>按在计算机中的层次进行分类</strong></p>\n<ul>\n<li>主存</li>\n<li>辅存</li>\n<li>高速缓冲寄存器(cache)</li>\n</ul>\n<p><strong>按存储介质分类</strong></p>\n<ul>\n<li>磁表面存储器(磁盘、磁带)</li>\n<li>磁芯存储器</li>\n<li>半导体存储器(MOS 型存储器、双极型存储器)</li>\n<li>光盘存储器(光盘)</li>\n</ul>\n<p><strong>按存取方式分类</strong></p>\n<ul>\n<li>随机存储器(RAM)。存储器的任何一个存储单元都可以随机存取,而且存取时间与存储单元的物理位置无关。其优点是读写方便,使用灵活,主要用于主存或者高速缓冲寄存器。RAM 又分<code>静态RAM</code>和<code>动态RAM</code></li>\n<li>只读存储器(ROM)。存储器的内容只能随机读出而不能写入。信息一旦写入存储器就固定不变,即使断电,内容也不会丢失。因此,通常用它来存放固定不变的程序、常数和汉字字库等</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>ROM 和 RAM 的存取方式均为随机存取</p></blockquote>\n<ul>\n<li>串行访问存储器。对存取单元进行读写操作时,需按其物理位置的先后顺序寻址,包括<code>顺序存取存储器</code>(磁带 📼),与<code>直接存取存储器</code>(如磁盘 💾、光盘 💿)</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>顺序存储只能按照某种顺序存取;直接存取介于随机存取和顺序存取之间,存储的文件也能顺序访问,但一般效率较差</p></blockquote>\n<p><strong>按信息的可保存性分类</strong></p>\n<ul>\n<li>易失性存储器:断电后,存储信息即消失的存储器,如 RAM</li>\n<li>非易失性存储器:断电后信息仍然保留的存储器</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>🙋‍♂️ 破坏性读出:被读单元原存储信息被破坏</p>\n<p> 非破坏性性读出:被读单元原存储信息不被破坏</p>\n<p> 具有破坏性读出性能的存储器,每次读出操作后,都必须有再生操作,以便恢复被破坏的信息</p></blockquote>\n<h3 id=\"存储器的性能指标\"><a href=\"#存储器的性能指标\" class=\"headerlink\" title=\"存储器的性能指标\"></a>存储器的性能指标</h3><h4 id=\"存储容量\"><a href=\"#存储容量\" class=\"headerlink\" title=\"存储容量\"></a>存储容量</h4><p>存储容量 = 存储字数 × 存储字长 (字数表示存储器的地址空间大小,字长表示一次存取操作的数据量)</p>\n<h4 id=\"单位成本\"><a href=\"#单位成本\" class=\"headerlink\" title=\"单位成本\"></a>单位成本</h4><p>每位价格 = 总成本/总容量</p>\n<h4 id=\"存储速度\"><a href=\"#存储速度\" class=\"headerlink\" title=\"存储速度\"></a>存储速度</h4><p>存储速度: 数据传输率 = 数据的宽度/存储周期</p>\n<ul>\n<li>存取时间(T~a~):存取时间是指从启动一次存储器操作到完成该操作所经历的时间,分为读取时间和写入时间</li>\n<li><strong>存取周期(T~m~):又称读写周期或访问周期,它是指存储器进行一次完整的读写操作所需的全部时间,即连续两次独立访问存储器操作(读或写操作)之间所需的最小时间间隔</strong></li>\n<li>主存带宽(B~m~):又称数据传输率,表示每秒从主存进出信息的最大数量,单位为字每秒、字节每秒(B/s)或位每秒(b/s)</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>🙋‍♂️ 存储周期通常大于存取时间,因为上面介绍的破坏性读出的机制,存储器需要在信息读出后花费时间来进行再生</p></blockquote>\n<h3 id=\"多层次的存储系统\"><a href=\"#多层次的存储系统\" class=\"headerlink\" title=\"多层次的存储系统\"></a>多层次的存储系统</h3><p>基本知识点两个图总结完事:</p>\n<p><img src=\"计算机组成原理基础/存储.svg\" alt=\"存储\"></p>\n<p>上一级作为低一层存储器的高速缓存,上一层的内容是下一层部分内容的副本</p>\n<h2 id=\"主存储器-MM\"><a href=\"#主存储器-MM\" class=\"headerlink\" title=\"主存储器(MM)\"></a>主存储器(MM)</h2><p> 主存储器由 DRAM 实现,靠处理器的那一层(Cache)则由 SRAM 实现,他们都属于易失性存储器</p>\n<h3 id=\"SRAM-和-DRAM\"><a href=\"#SRAM-和-DRAM\" class=\"headerlink\" title=\"SRAM 和 DRAM\"></a>SRAM 和 DRAM</h3><p> 通常把存放一个二进制位的物理器件称为<code>存储元</code>,它是存储器最基本的构件。地址码相同的多个<code>存储元</code>构成一个<code>存储单元</code>。若干<code>存储单元</code>的集合构成<code>存储体</code></p>\n<h4 id=\"SRAM\"><a href=\"#SRAM\" class=\"headerlink\" title=\"SRAM\"></a>SRAM</h4><p>静态随机存储器(SRAM)的存储元是用<code>双稳态触发器(六晶体管MOS)</code>记忆信息的,因此即使信息被读出后,它仍然保持其状态而不需要再生(<strong>非破坏性读出</strong>)</p>\n<p>SRAM 存储速度快,但集成度低,功耗大,价格昂贵,一般用于高速缓冲存储器</p>\n<h4 id=\"DRAM\"><a href=\"#DRAM\" class=\"headerlink\" title=\"DRAM\"></a>DRAM</h4><p> 动态随机存储器(DRAM)利用存储元电路中的<code>栅极电容</code>上的电荷进行存储信息的,DRAM 的基本存储元通常只使用一个晶体管,所以它比 SRAM 的密度要高得多。相对于 SRAM,DRAM 具有容易集成、位价低、容量大和功耗低等优点,但 DRAM 存取速度比 SRAM 的慢,一般用于大容量主存系统</p>\n<p> DRAM 电容上的电荷一般只能维持 1~2ms,因此即使电源不断电,信息也会自动消失。为此,每个一段时间必须刷新,通常取 2ms,称为<code>刷新周期</code>。常用的刷新方式有 3 种</p>\n<ol>\n<li><strong>集中刷新</strong>:指在一个刷新周期内,利用好一段固定的时间,依次对存储器所有行进行逐一再生,在此期间停止对存储器的读写操作,称为<code>死时间</code>,又称<code>访存死区</code>。优点是读写操作时不受刷新工作的影响;缺点是在集中刷新期间(死区)不能访问存储器。</li>\n<li><strong>分散刷新</strong>:把对每行的刷新分散到各个工作周期中。这样一个存储器的系统工作周期分为两部分,前半部分用于正常读、写或保持,后半部分用于刷新,优点是没有了死区,缺点是加长了系统的存取周期,降低了整机速度</li>\n<li><strong>异步刷新</strong>:是前两种方法的结合。将刷新周期除以行数,得到两次刷新操作之间的时间间隔 t,利用逻辑电路每隔时间 t 产生一次刷新请求,这样可以避免 CPU 连续等待过长的时间,减少了刷新次数</li>\n</ol>\n<h4 id=\"存储器芯片的内部结构\"><a href=\"#存储器芯片的内部结构\" class=\"headerlink\" title=\"存储器芯片的内部结构\"></a>存储器芯片的内部结构</h4><p><img src=\"计算机组成原理基础/存储器芯片.svg\" alt=\"存储器芯片\"></p>\n<p>DRAM 采用<code>分时复用</code>的技术,当其选择存储元时,不是由上图 X(A~0~~A~5~)Y(A~6~~A~11~)直接得出,而是所有地址线(A~0~~A~11~)作为行/列,分两次输入,所以相同地址线数下 DRAM 容量很大但是速度没有 SRAM 快</p>\n<h3 id=\"只读存储器\"><a href=\"#只读存储器\" class=\"headerlink\" title=\"只读存储器\"></a>只读存储器</h3><p><strong>制度存储器 ROM 的特点</strong>:</p>\n<ol>\n<li>结构简单,所以密度比可读写存储器的高</li>\n<li>具有非易失性,所以可靠性高</li>\n</ol>\n<p><strong>ROM 的类型</strong>:</p>\n<ul>\n<li><strong>掩模式只读存储器(MROM)</strong>:由半导体制造厂在芯片的制造过程中写入,任何人无法改变其内容,优点:可靠性高,集成度高,价格便宜;缺点是灵活性差</li>\n<li><strong>一次可编程只读存储器(PROM)</strong>:允许用户利用专门的设备(编程器)写入自己的程序,一旦写入,无法改变</li>\n<li><strong>可擦除可编程只读存储器(EPROM)</strong>:光可擦除 E^2^PROM(电擦除) 允许用户对编程器写入的信息重复改写,但是改写速度慢,改写次数有限</li>\n<li><strong>闪存(Flash 存储器)</strong></li>\n<li><strong>固态硬盘(SSD)</strong></li>\n</ul>\n<h3 id=\"多模块存储器\"><a href=\"#多模块存储器\" class=\"headerlink\" title=\"多模块存储器\"></a>多模块存储器</h3><h4 id=\"单体多字存储器\"><a href=\"#单体多字存储器\" class=\"headerlink\" title=\"单体多字存储器\"></a>单体多字存储器</h4><p>存储器中只有一个存储体,每个存储单元存储 m 个字,总线宽度也为 m 个字。一次并行读出 m 个字,地址必须顺序排列并处于同一存储器</p>\n<h4 id=\"多体并行存储器\"><a href=\"#多体并行存储器\" class=\"headerlink\" title=\"多体并行存储器\"></a><strong>多体并行存储器</strong></h4><h5 id=\"高位交叉编址-顺序方式\"><a href=\"#高位交叉编址-顺序方式\" class=\"headerlink\" title=\"高位交叉编址(顺序方式)\"></a>高位交叉编址(顺序方式)</h5><p><img src=\"计算机组成原理基础/高位交叉编制.svg\" alt=\"高位交叉编制\"></p>\n<p>高位是存储体体号(M~0~~M~3~ =&gt; 0~3),低位是体内地址,访问一串连续的主存地址时,总是先在一个体内访问完后,再转到下一个模块进行访问,所以其本质上还是顺序存储器,存取方式是串行存取,不能提高存储器的吞吐率</p>\n<h5 id=\"地位交叉编址-交叉方式\"><a href=\"#地位交叉编址-交叉方式\" class=\"headerlink\" title=\"地位交叉编址(交叉方式)\"></a>地位交叉编址(交叉方式)</h5><p><img src=\"计算机组成原理基础/低位交叉编址.svg\" alt=\"低位交叉编址\"></p>\n<p>低位地址为体号,高位为体内地址,由十进制内存地址来确定其存储体号可以使用 <code>体号 = 内存地址 mod 模块数</code>来确定体号</p>\n<p>CPU 同时访问四个模块，由存储器控制部件控制它们分时使用数据总线进行信息传递。 这样，对每一个存储模块来说，从 CPU 给出访存命令直到读出信息仍然使用了一个存取周 期时间；而对 CPU 来说，它可以在一个存取周期内连续访问四个模块。各模块的读写过程 将重叠进行(流水线)，所以多模块交叉存储器是一种并行存储器结构。</p>\n<p> 下面进行定量分析。设模块字长等于数据总线宽度，又假设模块存取一个字的存储周期为<code>T</code>，总线传送周期为<code>τ</code>，存储器的交叉模块数为<code>m</code>，那么为了实现流水线方式存取，应当满足</p>\n<script type=\"math/tex; mode=display\">\\textit{T}\\leqslant m\\mathbb{\\tau}</script><p>即成块传送可按 τ 间隔流水方式进行，也就是每经<code>τ</code>时间延迟后启动下一个模块。图 3.25 示出了 m=4 的流水线方式存取示意图。</p>\n<p> <code>m</code>的最小值 <strong>m~min~=T/τ</strong> 称为<code>交叉存取度</code>。<strong>交叉存储器要求其模块数必须大于或等于 m~min~</strong>， 以保证启动某模块后经 <code>mτ</code>时间再次启动该模块时，它的上次存取操作已经完成。这样，连续读取 m 个字所需的时间为</p>\n<script type=\"math/tex; mode=display\">t_1= T+(m-1) \\tau</script><p> 而顺序方式存储器连续读取 m 个字所需时间为</p>\n<script type=\"math/tex; mode=display\">t_2= mT</script><p><img src=\"计算机组成原理基础/image-20230707165249740.png\" alt=\"image-20230707165249740\"></p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">🌰设存储器容量为 32 字，字长 64 位，模块数 m=4，分别用顺序方式和交叉方式进行组织。存储周期 T=200ns，数据总线宽度为 64 位，总线传送周期τ=50ns。若连续读出 4 个字，问顺序存储器和交叉存储器的带宽各是多少?\n解 顺序存储器和交叉存储器连续读出 m=4 个字的信息总量都是\n\tq=64bit×4=256bit\n   顺序存储器和交叉存储器连续读出 4 个字所需的时间分别是\n\tt2=mT=4×200ns=800ns=8×10^–7s\n\tt1=T+<span class=\"token punctuation\">(</span>m–1<span class=\"token punctuation\">)</span>τ=200ns+3×50ns=350ns=3.5×10^–7s\n   顺序存储器和交叉存储器的带宽分别是\n\tW2=q/t2=256bit÷<span class=\"token punctuation\">(</span>8×10–7<span class=\"token punctuation\">)</span>s=320Mbit/s\n\tW1=q/t1=256bit÷<span class=\"token punctuation\">(</span>3.5×10–7<span class=\"token punctuation\">)</span>s=730Mbit/s<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>低位交叉编址存储器,若其体数为2^n^,则其存储单元的地址的低n位为其所在的体号</p></blockquote>\n<h3 id=\"主存储器与-CPU-的连接\"><a href=\"#主存储器与-CPU-的连接\" class=\"headerlink\" title=\"主存储器与 CPU 的连接\"></a>主存储器与 CPU 的连接</h3><h4 id=\"连接原理\"><a href=\"#连接原理\" class=\"headerlink\" title=\"连接原理\"></a>连接原理</h4><p>主存储器与 CPU 的连接如下图所示 👇:</p>\n<p><img src=\"计算机组成原理基础/CPU连接.svg\" alt=\"CPU连接\"></p>\n<p><code>存储控制器</code>、<code>存储总线</code>和<code>内存条</code>之间的连接关系 👇:</p>\n<p><img src=\"计算机组成原理基础/连接关系.svg\" alt=\"连接关系\"></p>\n<h4 id=\"主存容量的扩展\"><a href=\"#主存容量的扩展\" class=\"headerlink\" title=\"主存容量的扩展\"></a>主存容量的扩展</h4><h5 id=\"位拓展法\"><a href=\"#位拓展法\" class=\"headerlink\" title=\"位拓展法\"></a>位拓展法</h5><p> 若给定的芯片的字数(地指数)符合要求，但位数较短，不满足设计要求的存储器字长， 则需要进行位扩展，让多片给定芯片并行工作。三组信号线中，地址线和控制线公用而数据线单独分开连接。</p>\n<p><img src=\"计算机组成原理基础/image-20230707203146542.png\" alt=\"image-20230707203146542\"></p>\n<h5 id=\"字拓展法\"><a href=\"#字拓展法\" class=\"headerlink\" title=\"字拓展法\"></a>字拓展法</h5><p> 若给定的芯片存储容量较小(字数少)，不满足设计要求的总存储容量，则需要进行字 扩展，让多片给定芯片分时工作。三组信号线中给定芯片的地址总线和数据总线公用，读 写控制信号线公用，由地址总线的高位译码产生片选信号，让各个芯片分时工作</p>\n<p><img src=\"计算机组成原理基础/image-20230707204129727.png\" alt=\"image-20230707204129727\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>图中数据总线每个芯片组都是 D~0~~D~7~</p>\n<p><strong>片选有效性</strong>：和$\\overline{\\text{RAS}}(Row Address Select)<br>,\\overline{\\text{CAS}}(Column Address Select)<br>,\\overline{\\text{WE}}(Write Enable)<br>$一样，<strong>都是低电平有效</strong>。</p></blockquote>\n<h5 id=\"字位扩展\"><a href=\"#字位扩展\" class=\"headerlink\" title=\"字位扩展\"></a>字位扩展</h5><p>若给定的芯片的字数和位数均不符合要求，则需要先进行<code>位扩展</code>，再进行<code>字扩展</code>。</p>\n<p><img src=\"计算机组成原理基础/image-20230707175242165.png\" alt=\"image-20230707175242165\"></p>\n<h4 id=\"存储器和-CPU-连接\"><a href=\"#存储器和-CPU-连接\" class=\"headerlink\" title=\"存储器和 CPU 连接\"></a>存储器和 CPU 连接</h4><p>以下是存储器与 CPU 连接时需要注意的原则:</p>\n<ul>\n<li><strong>地址线的连接</strong>:因为存储芯片容量不同,其地址线也不同,而 CPU 的地址线数往往比存储芯片地址线要更多,所以需要注意<ul>\n<li>将 CPU 地址线的低位与存储芯片的地址线相连,以选择芯片中的某一单元</li>\n<li>将 CPU 地址线的高位与译码器相连,以实现芯片(组)间的片选</li>\n</ul>\n</li>\n<li><strong>数据线的连接</strong>:CPU 的数据线数与存储芯片的数据线数不一定相等,相等时可以直接相连;在不相等时必须对存储芯片扩位,使之与 CPU 数据线数相等</li>\n</ul>\n<h2 id=\"外部存储器\"><a href=\"#外部存储器\" class=\"headerlink\" title=\"外部存储器\"></a>外部存储器</h2><h3 id=\"磁盘存储器\"><a href=\"#磁盘存储器\" class=\"headerlink\" title=\"磁盘存储器\"></a>磁盘存储器</h3><p>优点:</p>\n<ol>\n<li>存储容量大,位价格低</li>\n<li>记录介质可重复使用</li>\n<li>记录信息可长时间保存不丢失,甚至可以脱机存档</li>\n<li>非破坏性读出,读出时不需要再生</li>\n</ol>\n<p>缺点:</p>\n<p> 存取速度慢,机械结构复杂,对工作环境要求较高</p>\n<h4 id=\"磁盘设备的组成\"><a href=\"#磁盘设备的组成\" class=\"headerlink\" title=\"磁盘设备的组成\"></a>磁盘设备的组成</h4><h5 id=\"硬盘存储器的组成\"><a href=\"#硬盘存储器的组成\" class=\"headerlink\" title=\"硬盘存储器的组成\"></a>硬盘存储器的组成</h5><ul>\n<li>磁盘驱动器。核心部件是磁头组件和盘片组件</li>\n<li>磁盘控制器。硬盘存储器和主机的接口,主流的标准有 IDE、SCSI、SATA 等</li>\n</ul>\n<h5 id=\"存储区域\"><a href=\"#存储区域\" class=\"headerlink\" title=\"存储区域\"></a>存储区域</h5><p>以下是磁盘存储器的主要结构示意图 👇:</p>\n<p><img src=\"计算机组成原理基础/磁盘-1688740119293-28.svg\" alt=\"磁盘\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>扇区是磁盘读写的最小单位,即磁盘按块存取</p>\n<p>由于扇区的 Size 比较小，数目众多时寻址时比较困难，所以在操作系统中就将相邻的扇区组合在一起，形成一个<code>簇</code>，再对块进行整体的操作。</p>\n<p><a href=\"\"><strong>如何将一个内存中的簇号来转化为磁盘上的物理地址?</strong></a></p></blockquote>\n<h5 id=\"磁盘的性能指标\"><a href=\"#磁盘的性能指标\" class=\"headerlink\" title=\"磁盘的性能指标\"></a>磁盘的性能指标</h5><ol>\n<li><p><strong>记录密度</strong>:记录密度是指盘片单位面积上记录的二进制信息量,通常以<code>道密度</code>,<code>位密度</code>和<code>面密度</code>表示。</p>\n<ol>\n<li><code>道密度</code>是沿磁盘半径方向单位长度上的磁道数</li>\n<li><code>位密度</code>是磁道单位长度上能记录的二进制代码位数</li>\n<li><code>面密度</code>是道密度和位密度的乘积</li>\n</ol>\n</li>\n<li><p><strong>磁盘容量</strong>:</p>\n<ol>\n<li><code>非格式化容量</code>:指磁记录表面可利用的磁化单元总数,由道密度和位密度计算而来</li>\n<li><code>格式化容量</code>:按照某种特定记录格式所能存储的信息总量</li>\n</ol>\n<p><em>格式化后的容量比非格式化容量要小</em></p>\n</li>\n<li><p><strong>平均存取时间</strong>。平均存取时间由三部分构成:</p>\n<ol>\n<li><code>寻道时间</code>:磁头移动到目的磁道的时间</li>\n<li><code>旋转延迟时间</code>:磁头定位道要读写的扇区的时间</li>\n<li><code>传输时间</code>:传输数据所花费的时间</li>\n</ol>\n</li>\n<li><p><strong>数据传输率</strong>:从盘存储器在单位时间向主机传送数据的字节数</p>\n<p>假设磁盘转速位 r 转/s,每条磁道容量位 N 字节,则数据传输率为: D~r~ = rN</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">假定一个磁盘转速为<span class=\"token function\">6000rpm</span><span class=\"token punctuation\">(</span>转/分<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>平均寻道时间为5ms<span class=\"token punctuation\">,</span>平均数据传输率为4MB/s<span class=\"token punctuation\">,</span>不考虑排队等待时间<span class=\"token punctuation\">,</span>则读一个512字节扇区的平均时间约为<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nA. 5.125ms\tB.10.125ms\tC.15.125ms\tD.20.125ms\n\n<span class=\"token property\">解析</span><span class=\"token punctuation\">:</span>磁盘访问时间 = 寻道时间t1 + 找扇区时间t2 + 数据传输时间t3\n\n本题中 寻道时间题目已经给出<span class=\"token punctuation\">,</span>为5ms\n\t  找扇区的时间为 0.5圈/6000rpm = 5ms <span class=\"token punctuation\">(</span>这里的0.5圈是指寻找扇区时最快可能立刻寻到即0圈<span class=\"token punctuation\">,</span>最慢可能需要转一整圈即1圈<span class=\"token punctuation\">,</span>则平均需要<span class=\"token punctuation\">(</span>1+0<span class=\"token punctuation\">)</span>/2=0.5圈<span class=\"token punctuation\">)</span>\n\t  数据传输时间为 512/4M = 0.125ms\n\n总时间 = t1 + t2 + t3 = 5 + 5 + 0.125 = 10.125ms<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"磁盘地址\"><a href=\"#磁盘地址\" class=\"headerlink\" title=\"磁盘地址\"></a>磁盘地址</h5><p><img src=\"计算机组成原理基础/地址.svg\" alt=\"地址\"></p>\n<h5 id=\"磁盘阵列\"><a href=\"#磁盘阵列\" class=\"headerlink\" title=\"磁盘阵列\"></a>磁盘阵列</h5><p> RAID(独立冗余磁盘阵列(又称廉价冗余磁盘阵列))是指将多个独立的物理磁盘罪成一个独立的逻辑盘,数据在多个物理盘上分割交叉存储、并行访问,具有更好的存储性能、可靠性和安全性。</p>\n<ul>\n<li>RAID0:无冗余无校验的磁盘阵列(将数据块交叉存放在不同的物理磁盘的扇区中,几个磁盘交叉并行读写)</li>\n<li>RAID1:镜像磁盘阵列(一个使用,一个备份)</li>\n<li>RAID2:采用纠错的海明码的磁盘阵列</li>\n<li>RAID3:位交叉奇偶校验的磁盘阵列</li>\n<li>RAID4:块交叉奇偶校验的磁盘阵列</li>\n<li>RAID5:无独立校验的奇偶校验磁盘阵列</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>还有 RAID01 和 RAID10</p></blockquote>\n<h4 id=\"固态硬盘\"><a href=\"#固态硬盘\" class=\"headerlink\" title=\"固态硬盘\"></a>固态硬盘</h4><p>是一种基于闪存技术的存储器,与 U 盘并没有本质上的差别,只是容量更大,存取性能更好</p>\n<p><img src=\"计算机组成原理基础/SSD-1688781567110-32.svg\" alt=\"SSD\"></p>\n<p>一个闪存由 B 块组成,每块由 P 页组成。数据是以页为单位读写的。只有在一页所属的块整个被擦除后,才能写这一页。某个块经历了约 10 万次的擦写后,就会损坏,无法使用(坏块),所以闪存翻译层中有一个平均磨损逻辑试图通过将擦除平均分布在所有块上来最大化每个块的寿命</p>\n<p>闪存的随机写很慢,因为首先,擦除块就很慢(1ms 级),比访问页要高一个数量级,其次若要修改一个块中包含数据的一个页,那么就要把这个块中所有含有数据的页复制到一个新(被擦除过的)块中,才能进行对那页的写</p>\n<h2 id=\"高速缓冲储存器\"><a href=\"#高速缓冲储存器\" class=\"headerlink\" title=\"高速缓冲储存器\"></a>高速缓冲储存器</h2><p><strong>程序的局部性原理</strong>:</p>\n<ul>\n<li>==空间局部性==:在最近的未来要用的的信息,很可能与正在使用的信息在存储空间上是邻近的,因为指令通常是顺序存放,顺序执行的,数据一本是以向量,数组等形式簇聚地储存在一起的</li>\n<li>==时间局部性==:最近未来要使用到的信息,很可能是现在正在使用的信息,因为程序中存在循环</li>\n</ul>\n<p>基于上述的程序的局部性原理,人们制造出了 Cache(高速缓冲寄存器)</p>\n<h3 id=\"Cache-的基本工作原理\"><a href=\"#Cache-的基本工作原理\" class=\"headerlink\" title=\"Cache 的基本工作原理\"></a>Cache 的基本工作原理</h3><p> Cache 是介于 CPU 和主存 之间的小容量存储器，但存取速度比主存快，容量远小于主存。cache 能高速地向 CPU 提供指令和数据，从而加快了程序的执行速 度。从功能上看，它是主存的缓冲存储器，由高速的 SRAM 组成。为追求高速，包括管理 在内的全部功能由硬件实现，因而对程序员是透明的。</p>\n<p> 为便于 Cache 和主存交换信息,Cache 和主存都被划分为相等的块,<code>Cache块</code>又称为<code>Cache行</code>,所以 Cache 中的块数要远小于主存中的块数,它仅仅保存主存中最活跃的若干块的副本。</p>\n<p> CPU 与 Cache 之间的数据交换以<code>字</code>为单位,而 Cache 与主存之间的数据交换则以<code>Cache块</code>为单位</p>\n<p>问题也随之而来:</p>\n<ul>\n<li>数据查找。如何快速判断数据是否在 Cache 中</li>\n<li>地址映射。主存块如何存放在 Cache 中,如何将主存地址转换为 Cache 地址</li>\n<li>替换策略。Cache 满了以后,使用何种策略对 Cache 块进行替换或淘汰</li>\n<li>写入策略。如何既保证主存块和 Cache 块的数据一致性,又尽量提升效率</li>\n</ul>\n<h3 id=\"Cache-和主存的映射方式\"><a href=\"#Cache-和主存的映射方式\" class=\"headerlink\" title=\"Cache 和主存的映射方式\"></a>Cache 和主存的映射方式</h3><p>地址映射方式有全相联方式、直接方式和组相联方式三种，下面分别介绍。</p>\n<h4 id=\"全相联映射\"><a href=\"#全相联映射\" class=\"headerlink\" title=\"全相联映射\"></a>全相联映射</h4><p>我的理解是主存中的任意一个块,可以映射到 Cache 中的任意一行(块)中</p>\n<p><img src=\"计算机组成原理基础/image-20230708140308405.png\" alt=\"image-20230708140308405\"></p>\n<p> CPU 访存指令指定了一个主存地址，为了 快速检索，指令中的块号与 cache 中所有行的标记同时在比较器中进行比较。如果块号命中， 则按字地址从 cache 中读取一个字；如果块号未命中，则按主存地址从主存中读取这个字。 在全相联 cache 中，全部标记用一个相联存储器来实现，全部数据存储用一个普通 RAM 来 实现。全相联方式的主要缺点是高速比较器电路难于设计和实现，因此只适合于小容量 cache 采用。</p>\n<p><img src=\"计算机组成原理基础/image-20230708170005023.png\" alt=\"image-20230708170005023\"></p>\n<h4 id=\"直接映射\"><a href=\"#直接映射\" class=\"headerlink\" title=\"直接映射\"></a>直接映射</h4><p> 直接映射方式也是一种多对一的映射关系，但一个主存块只能拷贝到 cache 的一个特定 行位置上去。cache 的行号 i 和主存的块号 j 有如下函数关系：</p>\n<script type=\"math/tex; mode=display\">i=j\\quad\\mathrm{mod}\\quad m</script><p> 式中，m 为 cache 中的总行数。显然，主存的第 0 块，第 m 块，第 2m 块，…，第 2s –m 块 只能映射到 cache 的第 0 行；而主存的第 1 块，第 m+1 块，第 2m+1 块，…，第 2s –m+1 块</p>\n<p><img src=\"计算机组成原理基础/image-20230708170627625.png\" alt=\"image-20230708170627625\"></p>\n<p><img src=\"计算机组成原理基础/image-20230708170722759.png\" alt=\"image-20230708170722759\"></p>\n<p> 直接映射方式的优点是硬件简单，成本低，地址变换速度快。缺点是每个主存块只有 一个固定的行位置可存放。如果连续访问块号相距 m 整数倍的两个块，因两个块映射到同 一 cache 行时，就会发生冲突。发生冲突时就要将原先存入的行换出去，但很可能过一段时 间又要换入。频繁的置换会使 cache 效率下降。因此直接映射方式适合于需要大容量 cache 的场合，更多的行数可以减小冲突的机会。</p>\n<h4 id=\"组相联映射\"><a href=\"#组相联映射\" class=\"headerlink\" title=\"组相联映射\"></a>组相联映射</h4><p>我的理解为组内全相联映射,组间直接映射</p>\n<p>这种方式将 cache 分成 u 组，每组 v 行。主存块存放到哪个组是固定的，取决于主存块 在主存区中是第几块。至于存到该组哪一行是灵活的，即有如下函数关系：</p>\n<script type=\"math/tex; mode=display\">\\begin{aligned}m&=u\\times v\\\\\\text{组号}\\quad q&=j\\quad\\mathrm{mod}\\quad u\\end{aligned}</script><p><img src=\"计算机组成原理基础/image-20230708171256557.png\" alt=\"image-20230708171256557\"></p>\n<p><img src=\"计算机组成原理基础/image-20230708171327757.png\" alt=\"image-20230708171327757\"></p>\n<p> 组相联映射方式中的<code>每组行数 v</code> 一般取值较小，典型值是 2、4、8、16。这种规模的<code>v 路</code>比较器容易设计和实现。而块在组中的排放又有一定的灵活性，使冲突减少。为强调比 较器的规模和存放的灵活程度，常称之为 <code>v 路组相联 cache</code>。</p>\n<p>v=4 路组相联的<strong>内存地址</strong>格式如下所示:</p>\n<p><img src=\"计算机组成原理基础/image-20230708172232560.png\" alt=\"image-20230708172232560\"></p>\n<p>则cache地址是使用内存地址减去组号后加上[脏位]+[有效位]+[组数位数]+[组内偏移]+[数据长度]</p>\n<h3 id=\"Cache-中主存块的替换算法\"><a href=\"#Cache-中主存块的替换算法\" class=\"headerlink\" title=\"Cache 中主存块的替换算法\"></a>Cache 中主存块的替换算法</h3><ol>\n<li><p><strong>随机算法</strong>(RAND)</p>\n<p>字面意思</p>\n</li>\n<li><p><strong>先进先出算法</strong>(FIFO)</p>\n<p>字面意思</p>\n</li>\n<li><p><strong>近期最少使用算法</strong>(LRU)</p>\n<p>LRU 算法将近期内长久未被访问过的行换出。为此，每行也设置一个计数器，但它们 是 cache 每命中一次，命中行计数器清零，其他各行计数器增 1。当需要替换时，比较各特 定行的计数值，将计数值最大的行换出。这种算法保护了刚复制到 cache 中的新数据行，符 合 cache 工作原理，因而使 cache 有较高的命中率。</p>\n</li>\n<li><p><strong>最不经常使用算法</strong>(LFU):</p>\n<p>LFU 算法认为应将一段时间内被访问次数最少的那行数据换出。为此，每行设置一个 计数器。新行调入后从 0 开始计数，每访问一次，被访行的计数器增 1。当需要替换时，对 这些特定行的计数值进行比较，将计数值最小的行换出，同时将这些特定行的计数器都清 零。这种算法将计数周期限定在两次替换之间的间隔时间内，因而不能严格反映近期访问情况。</p>\n</li>\n</ol>\n<p><a href=\"\">具体的复习留到操作系统的该知识点</a></p>\n<h3 id=\"Cache-写策略\"><a href=\"#Cache-写策略\" class=\"headerlink\" title=\"Cache 写策略\"></a>Cache 写策略</h3><p>因为 Cache 中的内容是主存块中的副本,所以当 CPU 对 Cache 中的内容进行更新时,就需要用写策略使 Cache 内容和主存内容保持一致</p>\n<p>对于<code>Cache写命中</code>有两种处理方法</p>\n<ul>\n<li><p><strong>全写法</strong>:CPU 对 Cache 写命中时,需要把数据同时下写入 Cache 和主存的对应块中</p>\n<p>缺点是增加了访存次数,降低了 Cache 的效率</p>\n<p>为了减少(缓解)直接写入主存的时间消耗在主存和 Cache 之间加一个<code>写缓冲器</code>(逻辑上为 FIFO 队列),写缓冲虽然可以解决速度不匹配的问题,但若出现频繁写时,会使写缓冲饱和溢出(Cache 和主存速度不匹配)</p>\n</li>\n</ul>\n<p><img src=\"计算机组成原理基础/写缓冲.svg\" alt=\"写缓冲\"></p>\n<p>增加 L2cache 可以有效避免写缓冲饱和溢出问题</p>\n<p><img src=\"计算机组成原理基础/写缓冲改进-1688820281371-3.svg\" alt=\"写缓冲改进\"></p>\n<ul>\n<li><strong>回写法</strong>:每个 Cache 行设置一个修改位(脏位),CPU 对 Cache 写命中时,只需要把数据写入 Cache 中的某一个块中,当这一个块需要被替换时,检查其脏位是否为 1,为 1 则说明被修改过,将其写回内存,反之,无须写回内存</li>\n</ul>\n<p>对于<code>Cache写不命中</code>也有两种处理方法</p>\n<ul>\n<li><strong>写分配法</strong>:CPU 将块写入主存中,Cache 从主存中将该块调入 Cache 中</li>\n<li><strong>非写分配法</strong>:只写主存,不调块</li>\n</ul>\n<p>非写分配法——全写法 写分配法——回写法 通常是这两个组合</p>\n<h2 id=\"虚拟存储器\"><a href=\"#虚拟存储器\" class=\"headerlink\" title=\"虚拟存储器\"></a>虚拟存储器</h2><p> 主存和辅存共同构成了虚拟存储器,二者在硬件和软件系统共同的管理下工作,对于程序员来而言,虚拟存储器是透明的。虚拟存储器具有主存的速度和辅存的容量</p>\n<p> 用户编制程序时使用的地址称为<code>虚地址</code>或<code>逻辑地址</code>，其对应的存储空间称为<code>虚存空间</code>或<code>逻辑地址空间</code>；而计算机物理内存的访问地址则称为<code>实地址</code>或<code>物理地址</code>，其对应的存储空间称为<code>物理存储空间</code>或<code>主存空间</code>。程序进行虚地址到实地址转换的过程称为程序的再定位</p>\n<p>虚存机制也要解决一些关键问题。</p>\n<ol>\n<li><p>调度问题 决定哪些程序和数据应被调入主存。</p>\n</li>\n<li><p>地址映射问题 在访问主存时把虚地址变为主存物理地址(这一过程称为内地址变 换)；在访问辅存时把虚地址变成辅存的物理地址(这一过程称为外地址变换)，以便换页。 此外还要解决主存分配、存储保护与程序再定位等问题。</p>\n</li>\n<li><p>替换问题 决定哪些程序和数据应被调出主存。</p>\n</li>\n<li><p>更新问题 确保主存与辅存的一致性。</p>\n</li>\n</ol>\n<h3 id=\"页式虚拟存储器\"><a href=\"#页式虚拟存储器\" class=\"headerlink\" title=\"页式虚拟存储器\"></a>页式虚拟存储器</h3><p> 页式虚拟存储器以<code>页</code>为基本单位。把虚拟空间和主存空间都划分成一个一个大小相等的<code>页</code>,主存的<code>页</code>被称为<code>实页</code>、<code>页框</code>,虚存的页被称为<code>虚页</code>。我们把虚拟地址分为两个字段,<code>虚页号</code>和<code>页内地址</code>。虚拟地址到物理地址的转换是通过<code>页表</code>来实现的。页表是一张存放虚存号和实存号的对照表,它记录程序的虚页调入主存时被安排在主存中的位置。页表一般长久地保存在内存中。</p>\n<h3 id=\"页表\"><a href=\"#页表\" class=\"headerlink\" title=\"页表\"></a>页表</h3><p> 页式虚拟存储器以页为基本单位,虚拟空间与主存空间都被划分为相同的大小</p>\n<p>以下为一个页表式例:</p>\n<ul>\n<li><p><code>有效位</code>也称<em>装入位</em>,用来表示对应页面是否在主存,若为 1 则表示该虚拟页已从外存调入主存,此时页表项存放该页的物理页号;(内页表)若为 0,则表示没有调用主存,此时页表项可以存放该页的磁盘地址(外页表)</p>\n</li>\n<li><p><code>脏位</code>也称<em>修改位</em>,,用来表示页面是否被修改过,虚存机制中采用回写策略,利用脏位可判断替换时是否需要写回磁盘</p>\n</li>\n<li><code>引用位</code>也称<em>使用位</em>,用来配合替换策略进行设置,例如是否实现最先调入(FIFO 位)或最近最少用(LRU 位)策略等</li>\n</ul>\n<p><img src=\"计算机组成原理基础/主存中的页.svg\" alt=\"主存中的页\"></p>\n<p> CPU 执行指令时将虚拟地址转换为主存物理地址。页表基址寄存器存放进程(每一个进程都有一个页表/段表)的页表首地址,然后根据虚拟地址高位部分的虚拟页号找到对应的页表项,若装入位为 1,则取出物理页号,和虚拟地址低位部分的页内地址拼接,形成实际物理地址;若装入位为 0,则说明缺页,需要操作系统进行缺页处理。</p>\n<p>以下页式虚拟存储器的地址变化过程示意图:</p>\n<p><img src=\"计算机组成原理基础/image-20230709104250288.png\" alt=\"image-20230709104250288\"></p>\n<p>每个进程所需的页数并不固定，所以页表的长度是可变的，因此通常的实现方法是把 页表的基地址保存在寄存器中，而页表本身则放在主存中。由于虚存地址空间可以很大， 因而每个进程的页表有可能非常长。例如，如果一个进程的虚地址空间为 2GB，每页的大 小为 512B，则总的虚页数为 231/29 =222。 为了节省页表本身占用的主存空间，一些系统把页表安排存储在虚存空间，因而页表本身也要进行分页。当一个进程运行时，其页表中一部分在主存中，另一部分则在辅存中 保存。 另一些系统采用二级页表结构。每个进程有一个页目录表，其中的每个表项指向一个 页表。因此，若页目录表的长度(表项数)是 m，每个页表的最大长度(表项数)为 n，则一个 进程最多可以有 m×n 个页</p>\n<p>优点是,页面的长度固定,页面的长度固定,页表简单,调入方便。缺点是,由于程序不可能正好是页面的整数倍,最后一页的零头将无法利用而造成浪费,并且页不是逻辑上独立的实体,所以处理、保护和共享都不及段式虚拟存储器方便</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">某页式存储管理系统中<span class=\"token punctuation\">,</span>主存为128KB<span class=\"token punctuation\">,</span>分成32块<span class=\"token punctuation\">,</span>块号为0<span class=\"token punctuation\">,</span>1<span class=\"token punctuation\">,</span>2<span class=\"token punctuation\">,</span>3<span class=\"token punctuation\">,</span>...<span class=\"token punctuation\">,</span>31<span class=\"token punctuation\">;</span>某作业有5块<span class=\"token punctuation\">,</span>其页号位0<span class=\"token punctuation\">,</span>1<span class=\"token punctuation\">,</span>2<span class=\"token punctuation\">,</span>3<span class=\"token punctuation\">,</span>4<span class=\"token punctuation\">,</span>被分别装入主存的3<span class=\"token punctuation\">,</span>8<span class=\"token punctuation\">,</span>4<span class=\"token punctuation\">,</span>6<span class=\"token punctuation\">,</span>9块中。有一逻辑地址为[3<span class=\"token punctuation\">,</span>70]<span class=\"token punctuation\">(</span>其中方括号中的第一个元素为页号<span class=\"token punctuation\">,</span>第二个元素为页内地址<span class=\"token punctuation\">,</span>均为十进制<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>则其对应的物理地址为<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nA. 24646\tB. 24576\tC. 24070\tD. 670<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"快表-TLB\"><a href=\"#快表-TLB\" class=\"headerlink\" title=\"快表(TLB)\"></a>快表(TLB)</h3><p>地址变换高速缓存(Translation Look-aside Buffer,TLB)</p>\n<p>由于页表通常在主存中，因而即使逻辑页已经在主存中，也至少要访问两次物理存储器才能实现一次访存，这将使虚拟存储器的存取时间加倍。为了避免对主存访问次数的增 多，可以对页表本身实行二级缓存，把页表中最活跃的部分存放在高速存储器中。这个专用于页表缓存的高速存储部件通常称为转换后援缓冲器(TLB)，又称为快表。而保存在主存中的完整页表则称为慢表。快表的作用是加快地址变换 👇</p>\n<p><img src=\"计算机组成原理基础/image-20230709164335824.png\" alt=\"image-20230709164335824\"></p>\n<p><strong>TLB、页表、Cache、主存之间的访问关系</strong></p>\n<p>简而言之，TLB 是地址缓存，那个 cache 是数据缓存。那么其实就分为了三个情况：</p>\n<ol>\n<li><p>TLB 缺失，要去页表中找地址</p>\n</li>\n<li><p>cache 缺失，要向内存要数据</p>\n</li>\n<li><p>缺页，要向磁盘要数据，同时更新 TLB 和 页表</p>\n</li>\n</ol>\n<p>先查找 TLB，如果缺失，那么查找页表，还缺就缺页了。如果查找 TLB 命中，那么根据 TLB 获取物理地址，然后查找数据 cache，就算普通的 cache 查找了。</p>\n<p>以下是 TLB 虚拟存储器的 CPU 访存过程 👇:</p>\n<p><img src=\"计算机组成原理基础/390f3c60-d634-4858-a257-f018e7e2e048.png\" alt=\"390f3c60-d634-4858-a257-f018e7e2e048\"></p>\n<h3 id=\"段式虚拟存储器\"><a href=\"#段式虚拟存储器\" class=\"headerlink\" title=\"段式虚拟存储器\"></a>段式虚拟存储器</h3><p> 段式存储器中的<code>段</code>是按照程序的逻辑结构划分的,各个<code>段</code>的长度因程序而异。把虚拟地址分为两个部分:<code>段号</code>和<code>段内地址</code>。虚拟地址到实地址的变换是通过<code>段表</code>来实现的。段表是程序逻辑段和在主存中存放位置的对照表。段表的每行记录与某个段对应的<code>段号</code>、<code>装入位(有效位)</code>、<code>段起点地址</code>和<code>段长</code>。由于段的长度可变,所以段表中要给出各段的起始位置与段的长度</p>\n<p> CPU 根据虚拟地址访存时，首先根据段号与段表基地址拼接成对应的段表行，然后根据该段表行的装入位判断该段是否已调入主存(装入位为“1”，表示该段已调入主存；装入位为“0”，表示该段不在主存中)。已调入主存时，从段表读出该段在主存中的起始地址，与段内地址(偏移量)相加，得到对应的主存实地址。段式虚拟存储器的地址变换如下图所示:</p>\n<p><img src=\"计算机组成原理基础/image-20230709205758778.png\" alt=\"image-20230709205758778\"></p>\n<p>因为段的长度不固定，段式虚拟存储器也有一些缺点：</p>\n<p>① 主存空间分配比较麻烦。</p>\n<p>② 容易在段间留下许多外碎片，造成存储空间利用率降低。</p>\n<p>③ 由于段长不一定是 2 的整数次幂，因而不能简单地像分页方式那样用虚地址和实地址的最低若干二进制位作为段内偏移量，并与段号进行直接拼接，必须用加法操作通过段起址与段内偏移量的求和运算求得 物理地址。因此，段式存储管理比页式存储管理方式需要更多的硬件支持。</p>\n<p>优点:段的分界与程序的自然分界相对应,因而具有逻辑独立性,使得它易于编译、管理、修改和保护,也便于多道程序的共享</p>\n<h3 id=\"段页式虚拟存储器\"><a href=\"#段页式虚拟存储器\" class=\"headerlink\" title=\"段页式虚拟存储器\"></a>段页式虚拟存储器</h3><p> 把程序按逻辑结构分段，每段再划分为固定大小的页，主存空间也划分为大小相等的页程序对主存的调入、调出仍以页为基本传送单位，这样的虚拟存储器称为段页式虚拟存像器。在段页式虚拟存储器中，每个程序对应一个段表，每段对应一个页表，段的长度必须是页长的整数倍，段的起点必须是某一页的起点。<br>​ 虚地址分为<code>段号</code>、<code>段内页号</code>、<code>页内地址</code>三部分。CPU 根据虚地址访存时，首先根据段号有到段表地址：然后从段表中取出该段的页表起始地址，与虚地址段内页号合成，得到页表地址；最后从页表中取出实页号，与页内地址拼接形成主存实地址。<br>段页式虚拟存储器的优点是，兼具页式和段式虚拟存储器的优点，可以按段实现共享和像护。缺点是在地址变换过程中需要两次查表，系统开销较大。</p>\n<h3 id=\"虚拟存储器与-Cache-的比较\"><a href=\"#虚拟存储器与-Cache-的比较\" class=\"headerlink\" title=\"虚拟存储器与 Cache 的比较\"></a>虚拟存储器与 Cache 的比较</h3><p>虚拟存储器与 Cache 既有很多相同之处，又有很多不同之处</p>\n<p><strong>相同之处</strong></p>\n<ol>\n<li><p>最终目标都是为了提高系统性能，两者都有容量、速度、价格的梯度。</p>\n</li>\n<li><p>都把数据划分为小信息块，并作为基本的传递单位，虚存系统的信息块更大。</p>\n</li>\n<li><p>都有地址的映射、替换算法、更新策略等问题。</p>\n</li>\n<li><p>依据程序的局部性原理应用“快速缓存的思想”，将活跃的数据放在相对高速的部件中。</p>\n</li>\n</ol>\n<p><strong>不同之处</strong></p>\n<ol>\n<li>Cache 主要解决系统速度，而虚拟存储器却是为了解决主存容量。</li>\n<li>Cache 全由硬件实现，是硬件存体器，对所有程序员透明；而虚拟存储器由 OS 和硬件共同实现，是逻辑上的存储器，对系统程序员不透明，但对应用程序员透明。</li>\n<li>对于不命中性能影响，因为 CPU 的速度的为 Cache 的 10 倍，主存的速度为硬盘的 100 倍以上，因此虚拟存储器系统不命中时对系统性能影响更大。</li>\n<li>CPU 与 Cache 和主存都建立了直接访问的通路.而辅存 CPU 没有直接通路。也就是说在 Cache 不命中时主存能和 CPU 直接通信,同时将数据调入 Cache;而虚拟存储器系统不命中时,只能先由硬盘调入主存，而不能直接和 CPU 通信。</li>\n</ol>\n<h1 id=\"指令系统\"><a href=\"#指令系统\" class=\"headerlink\" title=\"指令系统\"></a>指令系统</h1><p><strong>指令就是计算机执行某种操作的命令。一台计算机所有的指令的集合构成该机的指令系统,也称指令集,指令系统是计算机的主要属性,位于硬件和软件交界面上</strong></p>\n<h2 id=\"指令的基本形式\"><a href=\"#指令的基本形式\" class=\"headerlink\" title=\"指令的基本形式\"></a>指令的基本形式</h2><p><strong>基本专业词汇</strong>:</p>\n<p>一条指令通常包括<code>操作码</code>和<code>地址码</code>字段两部分</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">操作码字段</th>\n<th style=\"text-align:center\">地址码字段</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p> <code>操作码</code>指出指令中指令应该执行什么性质的操作以及具有何种功能。操作码是识别指令,了解指令功能及区分操作数地址的组成和使用方法等的关键信息。例如指出的是算数加运算还是算数减运算,是程序转移还是返回操作。</p>\n<p> <code>地址码</code>给出被操作的信息(指令或数据)的地址,包括参加运算的一个或多个操作数所在的地址、运算结果的保存地址、程序的转移地址、被调用的子程序入口地址等</p>\n<p> <strong>指令的长度</strong>是指一条指令中所包含的二进制代码的位数,指令字长取决于<code>操作码长度</code>、<code>操作数地址码的长度</code>和<code>操作数地址的个数</code>。指令长度与机器字长没有固定的关系,它可以等于<a href=\"#字、字长、机器字长、指令字长、存储字长的区别和联系是什么?\">机器字长</a>,也可以大于或小于机器字长。通常,把指令字长等于机器字长的指令称为<code>单字长指令</code>,指令长度等于半个机器字长的指令称为<code>半字长指令</code>,指令长度等与两个机器字长的指令称为<code>双字长指令</code></p>\n<p>在一个指令系统中,若所有指令的长度都是相等的,则称为<code>定长指令字结构</code>。定长指令的执行速度快,控制简单。若各种指令的长度随功能而异,则称为<code>变长指令字结构</code>。然而,因为主存一般都是按<a href=\"#字、字长、机器字长、指令字长、存储字长的区别和联系是什么?\">字节编址</a>的,所以指令字长多为字节的整数倍</p>\n<p> 根据指令中操作数地址码的数目不同,可将指令分为以下几种格式:</p>\n<p><strong>零地址指令</strong></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">OP</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>只给出操作码 OP,没有显式地址,这种指令有两种可能</p>\n<ol>\n<li>不需要操作数的指令,如空操作指令、停机指令、关中断指令等。</li>\n<li>零地址的运算类指令仅用在堆栈计算机中。通常参与运算的两个操作数隐含地从栈顶和次栈顶弹出,再送到运算器进行运算,运算结构再隐含地压入堆栈</li>\n</ol>\n<p><strong>一地址指令</strong></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">OP</th>\n<th style=\"text-align:center\">A~1~</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>这种指令也有两种常见的形态,要根据操作码的含义确定究竟是哪种。</p>\n<ol>\n<li><p>只有目的操作数的单操作指令,按 A~1~的地址读取操作数,进行 OP 操作后,结果存回原地址(A~1~)</p>\n<p>指令含义:OP(A~1~) → A~1~</p>\n<p>如操作码的含义是加 1、减 1、求反、求补等</p>\n</li>\n<li><p>隐含约定目的地址的双操作数指令,按指令地址 A~1~可读取源操作数,指令可隐含约定另外一个操作数由 ACC(累加器)提供,运算结果也将存放在 ACC 中</p>\n<p>指令含义:(ACC)OP(A~1~) → ACC</p>\n</li>\n</ol>\n<p><strong>二地址指令</strong></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">OP</th>\n<th style=\"text-align:center\">A~1~(目的操作数地址)</th>\n<th style=\"text-align:center\">A~2~(源操作数地址)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>指令含义: (A~1~)OP(A~2~) → A~1~</p>\n<p>其中目的操作数地址还用来保存此次的运算结果</p>\n<p><strong>三地址指令</strong></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">OP</th>\n<th style=\"text-align:center\">A~1~</th>\n<th style=\"text-align:center\">A~2~</th>\n<th style=\"text-align:center\">A~3~(结果)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>指令含义: (A~1~)OP(A~2~) → A~3~</p>\n<p>若地址字段均为主存地址,则完成一条三地址需要 4 次访存(取指令 1 次,取两个操作数 2 次,存放结果 1 次)</p>\n<p><strong>四地址指令</strong></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">OP</th>\n<th style=\"text-align:center\">A~1~</th>\n<th style=\"text-align:center\">A~2~</th>\n<th style=\"text-align:center\">A~3~(结果)</th>\n<th style=\"text-align:center\">A~4~(下条需要执行的指令的地址)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>设某等长指令字结构机器的指令长度为 16 位包括 4 位基本操作码字段和 三个 4 位地址字段:</p>\n<p><img src=\"计算机组成原理基础/image-20230710175330239.png\" alt=\"image-20230710175330239\"></p>\n<p>4 位基本操作码若全部用于三地址指令， 则只能安排 16 种三地址指令。通常一个指令系统中指令的地址码个数不一定相同，为了确保指令字长度尽可能统一，可以采用<strong>扩展操作码技术</strong>，向地址码字段扩展操作码的长度。如 表 4.2 所示，三地址指令的操作码占用 4 位基 本操作码编码空间的 0000 ～ 1110 共 24 –1=15 种组合，剩下一个编码 1111 用于把操作码扩 展到 A1 地址域，即从 4 位操作码扩展到 8 位。 二地址指令的操作码占用 8 位操作码编码空间 的 1111, 0000 ～ 1111, 1101 共 24 –2=14 种，剩 下两个编码 1111, 1110 和 1111, 1111 用于把操 作码扩展到 A2 地址域，即从 8 位操作码扩展 到 12 位。一地址指令的操作码占用 12 位操作 码编码空间的 1111, 1110, 0000 ～ 1111, 1111, 1110 共 25 –1=31 种编码，剩下一个编码 1111,1111,1111 用于把操作码扩展到 A3 地址域，即 从 12 位操作码扩展到 16 位。零地址指令的操作码占用 16 位操作码编码空间的 1111,1111,1111,0000 ～ 1111,1111,1111,1111 共 24 =16 种编码</p>\n<p><img src=\"计算机组成原理基础/image-20230710175459752.png\" alt=\"image-20230710175459752\"></p>\n<p>设计拓展操作码指令格式时啊,必须注意以下两点:</p>\n<ol>\n<li>不允许短码是长码的前缀,即短操作码不能与长操作码前面部分的代码相同</li>\n<li>各指令的操作码一定不能重复</li>\n</ol>\n<p>通常情况下,对使用频率较高的指令分配较短的操作码,对使用频率较低的指令分配较长的操作码,从而尽可能减少指令译码和分析的时间。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>🤔<strong>采用扩展操作码设计方案的目的是</strong>?：</p>\n<p> 保持指令字长度不变而增加指令的数量</p></blockquote>\n<h2 id=\"指令的操作类型\"><a href=\"#指令的操作类型\" class=\"headerlink\" title=\"指令的操作类型\"></a>指令的操作类型</h2><ol>\n<li><p><strong>数据传送</strong></p>\n<p>传送指令通常有<code>寄存器之间的传送(MOV)</code>、<code>从内存单元读取数据到CPU寄存器(LOAD)</code>、<code>从CPU寄存器写数据到内存单元中是(STORE)</code>等。</p>\n</li>\n<li><p><strong>算数和逻辑运算</strong></p>\n<p>这类指令主要有加(ADD)、减(SUB)、比较(CMP)、乘(MUL)、除(DIV)、加 1(INC)、减 1(DEC)、与(AND)、或(OR)、取反(NOT)、异或(XOR)等</p>\n</li>\n<li><p><strong>移位操作</strong></p>\n<p>移位指令主要有算法移位、逻辑移位、循环移位</p>\n</li>\n<li><p><strong>转移操作</strong></p>\n<p>转移指令主要有无条件转移(JMP)、条件转移(BRANCH)、调用(CALL)、返回(RET)、陷阱(TRAP)等。</p>\n<p>无条件转移指令在任何情况下都执行转移操作</p>\n<p>条件转移一般是某个标志位的值,或几个标志位的组合。</p>\n<p>调用指令和转移指令的区别:执行调用指令时必须保存下一条指令的地址(返回地址),当程序执行结束时,根据返回地址返回到主程序继续执行;而转移指令则不返回执行。</p>\n</li>\n<li><p><strong>输入输出操作</strong></p>\n<p>用于完成 CPU 与外部设备交换数据或传送控制命令及状态信息</p>\n</li>\n</ol>\n<h2 id=\"指令的寻址方式\"><a href=\"#指令的寻址方式\" class=\"headerlink\" title=\"指令的寻址方式\"></a>指令的寻址方式</h2><p> 寻址方式是寻找指令或操作数有效地址的方式,即确定本条指令的数据地址及下一条待执行指令的地址的方法。寻址方式分为<code>指令寻址</code>和<code>数据寻址</code>两大类</p>\n<h3 id=\"指令寻址\"><a href=\"#指令寻址\" class=\"headerlink\" title=\"指令寻址\"></a>指令寻址</h3><p>寻找下一条将要执行的指令地址称为指令寻址</p>\n<p>指令寻址有两种方式:一种是<code>顺序寻址方式</code>,另一种是<code>跳跃寻址方式</code></p>\n<p><strong>顺序寻址</strong></p>\n<p> 通过程序计数器 PC 加 1(一个指令字长),自动形成下一条指令地址</p>\n<p><strong>跳跃寻址</strong></p>\n<p> 通过转移类指令实现。所谓的跳跃是指下一条指令的地址不由程序计算器 PC 自动给出,而由本条指令给出的下条指令地址的计算方式。而是否跳跃可能受到状态寄存器和操作数的控制,跳跃的地址分为<code>绝对地址(由标记符直接得到)</code>和<code>相对地址(相对于当前指令地址的偏移量)</code>。跳跃的结果是当前指令修改 PC 值,所以下一条指令仍然通过 PC 给出。</p>\n<h3 id=\"数据寻址\"><a href=\"#数据寻址\" class=\"headerlink\" title=\"数据寻址\"></a>数据寻址</h3><p>数据寻址是指如何在指令中表示一个操作数的地址,如何用这种表示得到操作数或怎么样计算出操作数的地址</p>\n<p>数据寻址的方式较多,为区分各种方式,通常在指令字中涉案之一个字段,用来表明属于哪一种寻址方式</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">操作码</th>\n<th style=\"text-align:center\">寻址地址</th>\n<th style=\"text-align:center\">形式地址 A(偏移量)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>以下是一些常见的数据寻址方式:</p>\n<h4 id=\"隐含寻址\"><a href=\"#隐含寻址\" class=\"headerlink\" title=\"隐含寻址\"></a>隐含寻址</h4><p> 这种类型的指令，不是明显地给出操作数的地址，而是在指令中隐含着操作数的地址， 如图所示。例如，单地址的指令格式，就不是明显地在地址字段中指出第二操作数 的地址，而是规定累加寄存器 ACC 作为第二操作数地址。指令格式明显指出的仅是第一操作数的地址 A。因此，累加寄存器 AC 对单地址指令格式来说是隐含地址。</p>\n<p><img src=\"计算机组成原理基础/image-20230711072851580.png\" alt=\"image-20230711072851580\"></p>\n<h4 id=\"立即数寻址\"><a href=\"#立即数寻址\" class=\"headerlink\" title=\"立即数寻址\"></a>立即数寻址</h4><p> 指令的地址字段指出的不是操作数的地址，而是操作数本身，这种寻址方式称为立即 寻址，如图所示。指令中的操作数称为立即数。立即寻址方式的特点是指令中包含的操作数立即可用，节省了访问内存的时间。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">OP</th>\n<th style=\"text-align:center\">立即寻址特征</th>\n<th style=\"text-align:center\">A</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>A 部分即位立即数本身,以补码的形式存储</p>\n<h4 id=\"直接寻址\"><a href=\"#直接寻址\" class=\"headerlink\" title=\"直接寻址\"></a>直接寻址</h4><p> 直接寻址是一种基本的寻址方法，其特点是：在指令格式的地址字段中直接指出操作 数在内存的地址 A。由于操作数的地址直接给出而不需要经过某种变换，所以称这种寻址 方式为直接寻址方式。采用直接寻址方式时，指令字中的形式地址 A 就是操作数的有效地址 EA。因此通常把 形式地址 A 又称为<code>直接地址</code>。</p>\n<p>下图是直接寻址方式的示意图 👇</p>\n<p><img src=\"计算机组成原理基础/image-20230711085829114.png\" alt=\"image-20230711085829114\"></p>\n<h4 id=\"间接寻址\"><a href=\"#间接寻址\" class=\"headerlink\" title=\"间接寻址\"></a>间接寻址</h4><p> 间接寻址是相对于直接寻址而言的，在间接寻址的情况下，指令地址字段中的形式地址 A 不是操作数的真正地址，而是操作数地址有效地址所在的存储单元的地址,也就是<code>操作数地址的地址</code>。间接寻址可以是一次间接寻址,还可以是多次间接寻址</p>\n<p>下面是间接寻址的示意图 👇</p>\n<p><img src=\"计算机组成原理基础/image-20230711090943348.png\" alt=\"image-20230711090943348\"></p>\n<p>由于访问速度过慢,这种寻址方式并不常见。一般问到扩大寻址范围,通常指的是<code>寄存器间接寻址</code></p>\n<h4 id=\"寄存器寻址\"><a href=\"#寄存器寻址\" class=\"headerlink\" title=\"寄存器寻址\"></a>寄存器寻址</h4><p>寄存器寻址是指在指令字种直接给出操作数所在的寄存器编号,即 EA = R,其操作数在由 R~i~所指的寄存器内</p>\n<p><img src=\"计算机组成原理基础/image-20230711092026375.png\" alt=\"image-20230711092026375\"></p>\n<h5 id=\"寄存器间接寻址\"><a href=\"#寄存器间接寻址\" class=\"headerlink\" title=\"寄存器间接寻址\"></a>寄存器间接寻址</h5><p>寄存器 R~i~种给出的不是一个操作数,而是操作数所在的主存单元的地址即 EA = (R~i~)</p>\n<p><img src=\"计算机组成原理基础/image-20230711092540650.png\" alt=\"image-20230711092540650\"></p>\n<h4 id=\"偏移寻址\"><a href=\"#偏移寻址\" class=\"headerlink\" title=\"偏移寻址\"></a>偏移寻址</h4><p>一种强有力的寻址方式是直接寻址和寄存器间接寻址方式的结合，它有几种形式，我 们称它为偏移寻址。有效地址计算公式为 EA=A+(R)</p>\n<p>常用的三种偏移寻址是<code>相对寻址</code>、<code>基址寻址</code>、<code>变址寻址</code>。</p>\n<h5 id=\"相对寻址\"><a href=\"#相对寻址\" class=\"headerlink\" title=\"相对寻址\"></a>相对寻址</h5><p>相对寻址是把 PC 的内容加上指令格式中的形式地址 A 而形成操作数的有效地址,即 EA = (PC) +A,其中 A 是相对于前指令地址的偏移量,可正可负,补码表示</p>\n<p><img src=\"计算机组成原理基础/image-20230711094719377.png\" alt=\"image-20230711094719377\"></p>\n<p><img src=\"计算机组成原理基础/image-20230711100601565.png\" alt=\"image-20230711100601565\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意对于转移指令 JMP A,当 CPU 从存储器中取出一字节时,会自动执行(PC) + 1 → PC。若转移指令地址为 X,且占 2B 在取出该指令后 PC 的值会加 2 即(PC) = X+2,这样在执行完该指令后,会自动跳转到 X + 2 + A 的地址继续执行</p>\n<p>🙋‍♂️ 多道程序设计中，各个程序段可能要在内存中浮动，而相对寻址特别利于程序浮动</p></blockquote>\n<h5 id=\"基址寻址\"><a href=\"#基址寻址\" class=\"headerlink\" title=\"基址寻址\"></a>基址寻址</h5><p>将 CPU 中基址寄存器(BR)的内容加上指令格式中形式地址 A 而形成的操作数的有效地址,即 EA = (BR) + A。其中基址寄存器既可采用专用寄存器,又可采用通用寄存器</p>\n<p><img src=\"计算机组成原理基础/image-20230711094605323.png\" alt=\"image-20230711094605323\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注:基址寄存器是<strong>面向操作系统</strong>的，<strong>其内容由操作系统或管理程序确定</strong>。在程序执行过程中，基址寄存器的内容不变(作为基地址)，形式地址可变(作为偏移量)。当采用通用寄存器作为基址寄存器时，可由<strong>用户决定哪个寄存器作为基址寄存器</strong>，但其<strong>内容仍由操作系统确定</strong>。</p></blockquote>\n<p>优点:可扩大寻址范围(基址寄存器的位数大于形式地址 A 的位数) ;用户不必考虑自己的程序存于主存的哪一空间区域，故有利于多道程序设计，以及可用于编制浮动程序。</p>\n<h5 id=\"变址寻址\"><a href=\"#变址寻址\" class=\"headerlink\" title=\"变址寻址\"></a>变址寻址</h5><p> 地址域引用一个主存地址，被引用的专用寄存器含有对那个地址的正偏移量。这意味着主存地址位数大于寄存器中的偏移量位数，与基址寻址刚好相反。但是二者 有效地址的计算方法是相同的。变址的用途是为重复操作的完成提供一种高效机制。例如， 主存位置 A 处开始放一个数值列表，打算为表的每个元素加 1。我们需要取每个数位，对 它加 1，然后再存回，故需要的有效地址序列是 A, A+1, A+2, …直到最后一个位置。此时 值 A 存入指令地址字段，再用一个变址寄存器 IX(初始化为 0)。每次操作之后，变址寄存器 内容增 1。此时，EA=A+(R)，R←(R+1)</p>\n<p><img src=\"计算机组成原理基础/image-20230711104751971.png\" alt=\"image-20230711104751971\"></p>\n<p>变址寻址的优点是可扩大寻址范围(变址寄存器的位数大于形式地址 A 的位数);在数组处理过程中，可设定 A 为数组的首地址，不断改变变址寄存器 IX 的内容，便可很容易形成数组中任一数据的地址，特别适合编制循环程序。偏移量(变址寄存器 IX)的位数足以表示整个存储空间。</p>\n<p>显然，变址寻址与基址寻址的有效地址形成过程极为相似。但从本质上讲，两者有较大区别。<strong>基址寻址面向系统，主要用于为多道程序或数据分配存储空间，因此基址寄存器的内容通常由操作系统或管理程序确定，在程序的执行过程中其值不可变，而指令字中的 A 是可变的</strong>:<strong>变址寻址立足于用户，主要用于处理数组问题，在变址寻址中，变址寄存器的内容由用户设定，在程序执行过程中其值可变，而指令字中的 A 是不可变的。</strong></p>\n<h4 id=\"堆栈寻址\"><a href=\"#堆栈寻址\" class=\"headerlink\" title=\"堆栈寻址\"></a>堆栈寻址</h4><p> 堆栈有<code>寄存器堆栈(硬堆栈)</code>和<code>存储器堆栈(软堆栈)</code>两种形式，它们都以后进先出(LIFO)的原理存储数据。不论是寄存器堆栈，还是存储器堆栈，数据的存取都与栈顶地址打交通，为此需要一个<code>隐式或显式的堆栈指示器(寄存器)</code>,该寄存器被称为<code>堆栈指针(SP)</code>。数据进栈时使用 PUSH 指令，将数据压入栈顶地址，堆栈指示器减 1；数据退栈时，使用 POP 指令，数据从栈顶地址弹出，堆栈指示器加 1。从而保证了堆栈中数据先进后出的存取顺序。</p>\n<h4 id=\"各个寻址方式比较\"><a href=\"#各个寻址方式比较\" class=\"headerlink\" title=\"各个寻址方式比较\"></a>各个寻址方式比较</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">寻址方式</th>\n<th style=\"text-align:center\">有效地址</th>\n<th style=\"text-align:center\">访存次数(执行阶段)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">隐含寻址</td>\n<td style=\"text-align:center\">程序指定</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">立即寻址</td>\n<td style=\"text-align:center\">A 即是操作数</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">直接寻址</td>\n<td style=\"text-align:center\">EA = A</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">一次间接寻址</td>\n<td style=\"text-align:center\">EA = (A)</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">寄存器寻址</td>\n<td style=\"text-align:center\">EA = R~i~</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">寄存器一次寻址</td>\n<td style=\"text-align:center\">EA = (R~i~)</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">相对寻址</td>\n<td style=\"text-align:center\">EA = (PC) + A</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">基址寻址</td>\n<td style=\"text-align:center\">EA = (BR) + A</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">变址寻址</td>\n<td style=\"text-align:center\">EA = (IX) + A</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"程序的机器级代码表示\"><a href=\"#程序的机器级代码表示\" class=\"headerlink\" title=\"程序的机器级代码表示\"></a>程序的机器级代码表示</h2><h3 id=\"常用汇编指令介绍\"><a href=\"#常用汇编指令介绍\" class=\"headerlink\" title=\"常用汇编指令介绍\"></a>常用汇编指令介绍</h3><h4 id=\"相关寄存器\"><a href=\"#相关寄存器\" class=\"headerlink\" title=\"相关寄存器\"></a>相关寄存器</h4><p> x86 处理器中有 8 个 32 位的通用寄存器,各寄存器及说明如下图所示。为了向后兼容,<code>EAX</code>、<code>EBX</code>、<code>ECX</code>和<code>EDX</code>的高两位字节和低两位字节可以独立使用,<code>E</code>为<code>Extended(拓展)</code>,表示 32 位寄存器;<code>D</code>表示<code>Destination(目标)</code>(Destination Index, DI, 目标索引);<code>S</code>表示<code>Source(源)</code>(Source Index, SI, 源索引)。例如,<code>EAX</code>的低两位称为<code>AX</code>,而<code>AX</code>的高低字节又可以分别作为两个 8 位寄存器,分别称为<code>AH</code>和<code>AL</code>。寄存器的名称与大小写无关,既可以用<code>EAX</code>,又可以用<code>eax</code>。</p>\n<p><img src=\"计算机组成原理基础/寄存器.svg\" alt=\"寄存器\"></p>\n<p>除了 EBP 和 ESP 外,其他几个寄存器的用途是比较任意的</p>\n<h4 id=\"汇编指令格式\"><a href=\"#汇编指令格式\" class=\"headerlink\" title=\"汇编指令格式\"></a>汇编指令格式</h4><p> 使用不同编程工具开发程序,用到的汇编程序也不同,一般有两种不同汇编格式:<code>AT&amp;T格式</code>和<code>Intel格式</code>。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>AT&amp;T 格式是一种汇编语言的语法格式，主要用于 Unix 和 Linux 等操作系统中。</p></blockquote>\n<p>他们的区别主要体现如下:</p>\n<p>以下简称为<strong>A 格式</strong>和<strong>I 格式</strong></p>\n<p>①A 格式的指令只能用小写字母,而 I 格式的指令对大小写不敏感</p>\n<p>② 在 A 格式中,第一个为<code>源操作数</code>,第二个为<code>目的操作数</code>,方向<strong>从左到右</strong>,合乎日常顺序,I 格式中,第一个为<code>目的操作数</code>,第二个为<code>源操作数</code>,方向<strong>由右向左</strong></p>\n<p>③ 在 A 格式中,寄存器需要加前缀”%”,立即数需要加前缀”$”;在 I 格式中,寄存器和立即数都不需要加</p>\n<p>④ 在内存寻址方面,A 格式使用”()”,而 I 格式使用”[]”</p>\n<p><del>⑤ 在 A 格式中，操作码和源操作数、目标操作数之间用逗号隔开，而在 I 格式中则用空格隔开</del></p>\n<p>⑥ 在处理负责寻址方式时,例如 A 格式的内存操作数”<code>disp(base,index,scale)</code>“分别表示<code>偏移量(disp)</code>、<code>基址寄存器(base)</code>、<code>变址寄存器(index)</code>和<code>比例因子(scale)</code>,如”8(%edx,%eax,2)”表示操作数为 M[R[edx]+R[eax]×2+8],其对应的 I 格式的操作数为”[edx+eax×2+8]”</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>M</code>: 表示内存操作，即对内存进行读取或写入操作。</p>\n<p><code>R[edx]</code>:表示以通用寄存器 edx 的内容作为值参与计算</p>\n<p><code>比例因子</code>:是一个常数，用于与变址寄存器的值相乘。</p>\n<p><code>R[eax]×2</code>:将寄存器 eax 的内容乘以 2 作为变址寄存器的偏移量</p></blockquote>\n<p>⑦ <strong>在指定数据长度方面,A 格式指令操作码的后面紧跟一个字符,表明操作数大小,”b”表示 byte(字节)、”w”表示 word(字)或”l”表示 Long(双字)。I 格式也有类似的语法,他在操作码后面显示地注明 byte ptr、word ptr、dword ptr。</strong></p>\n<p>例子:将一个 16 位的数据保存到内存地址 0x200 处</p>\n<p>AT&amp;T 格式:</p>\n<pre class=\"line-numbers language-x86asm\" data-language=\"x86asm\"><code class=\"language-x86asm\">movb $0x56, 0x200<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>Intel 格式</p>\n<pre class=\"line-numbers language-x86asm\" data-language=\"x86asm\"><code class=\"language-x86asm\">mov word ptr [0x200], 0x56<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>由于 32 位和 64 位都是由 16 位拓展而来,因此用 word(字)表示 16 位</p></blockquote>\n<p>以下是两种格式指令格式的对比</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">AT&amp;T 格式</th>\n<th style=\"text-align:center\">Intel 格式</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">mov $100, %eax</td>\n<td style=\"text-align:center\">mov eax, 100</td>\n<td style=\"text-align:center\">100 → R[eax]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mov %eax, %ebx</td>\n<td style=\"text-align:center\">mov ebx, eax</td>\n<td style=\"text-align:center\">R[eax] → R[ebx]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mov %eax, (%ebx)</td>\n<td style=\"text-align:center\">mov [ebx], eax</td>\n<td style=\"text-align:center\">R[eax] → M[R[ebx]]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mov %eax, -8(%ebp)</td>\n<td style=\"text-align:center\">mov [ebp-8], eax</td>\n<td style=\"text-align:center\">R[eax] →M[R[ebx]-8]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lea 8(%edx, %eax, 2), %eax</td>\n<td style=\"text-align:center\">lea eax, [edx+eax*2+8]</td>\n<td style=\"text-align:center\">R[edx]+R[eax]×2+8 → R[eax](这个 lea 指令（effective address）的意思是计算有效地址,而不是直接从内存中加载数据到寄存器,所以这里不是 M[R[edx]+R[eax]×2+8])</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">movl %eax, %ebx</td>\n<td style=\"text-align:center\">mov dword ptr ebx, eax</td>\n<td style=\"text-align:center\">长度为 4 字节的 R[eax] → R[ebx]</td>\n</tr>\n</tbody>\n</table>\n</div>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>R[r]表示寄存器 r 的内容,M[addr]表示主存单元 addr 的内容,→ 表示信息传送方向</p></blockquote>\n<h4 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h4><p>汇编指令通常可以分为<code>数据传送指令</code>、<code>逻辑计算指令</code>和<code>控制流指令</code>下面是以 Intel 格式为例的一些重要指令</p>\n<p>以下是一些格式介绍:</p>\n<ul>\n<li><code>&lt;reg&gt;</code>:表示任意寄存器,若其后带有数字,则指定其位数,如\\<reg32>表示 32 位寄存器(eax、ebx、ecx、edx、esi、edi、ebp、esp);\\<reg16>代表 16 位寄存器(ax、bx、cx、dx、si、di、bp、sp);\\<reg8>代表 8 位寄存器(ah、al、bh、bl、ch、cl、dh、dl)</li>\n<li><code>&lt;mem&gt;</code>:表示内存地址(如[eax]、[var+4]或 dword ptr [eax+ebx])</li>\n<li><code>&lt;con&gt;</code>:表示 8 位、16 位或 32 位常数。\\<con8>表示 8 位常数;\\<con16>表示 16 位常数;\\<con32>表示 32 位常数</li>\n<li><code>&lt;cl&gt;</code>:表示要移动的位数，它可以是一个立即数或者是另一个寄存器。</li>\n</ul>\n<p>x86 中的指令机器码长度为 1 字节,对同一指令的不同用途有多种编码方式,比如 mov 指令就有 28 种机内编码,用于不同的操作数类型或用于特定的寄存器:</p>\n<pre class=\"line-numbers language-x86asm\" data-language=\"x86asm\"><code class=\"language-x86asm\">mov &lt;con16&gt;, ax\t\t\t\t\t\t#机器码为B8H\nmov &lt;con8&gt;, al\t\t\t\t\t\t#机器码为B0H\nmov &lt;reg16&gt;, &lt;reg16&gt;&#x2F;&lt;mem16&gt;\t\t#机器码为89H\nmov &lt;reg8&gt;&lt;mem18&gt;, &lt;reg8&gt;\t\t\t#机器码为8AH\nmov &lt;reg16&gt;&#x2F;&lt;mem16&gt;, &lt;reg16&gt;\t\t#机器码为8BH<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"数据传送指令\"><a href=\"#数据传送指令\" class=\"headerlink\" title=\"数据传送指令\"></a>数据传送指令</h5><h6 id=\"mov-指令\"><a href=\"#mov-指令\" class=\"headerlink\" title=\"mov 指令\"></a>mov 指令</h6><p>将第二个操作数(寄存器的内容,内存中的内容或常数值)复制到第一个操作数(寄存器或内存)。但<strong>不能直接用于从内存复制到内存</strong></p>\n<p>其语法如下:</p>\n<pre class=\"line-numbers language-x86asm\" data-language=\"x86asm\"><code class=\"language-x86asm\">mov &lt;reg&gt;, &lt;reg&gt;\nmov &lt;reg&gt;, &lt;mem&gt;\nmov &lt;mem&gt;, &lt;reg&gt;\nmov &lt;reg&gt;, &lt;con&gt;\nmov &lt;mem&gt;, &lt;com&gt;\n\n#例子:\nmov eax, ebx \t\t\t\t#将ebx值复制到eax\nmov byte ptr [var], 5\t\t#将5保存到var指示的内存地址的一字节中<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h6 id=\"push-指令\"><a href=\"#push-指令\" class=\"headerlink\" title=\"push 指令\"></a>push 指令</h6><p>将操作数压入内存的栈,常用于函数调用。ESP 时栈顶,压栈前先将 ESP 值减 4(栈增长方向与内存地址增长方向相反),然后将操作数压入 ESP 指示的地址</p>\n<p><img src=\"计算机组成原理基础/1251900-20171222111105318-578935555.png\" alt=\"img\"></p>\n<p>语法如下:</p>\n<pre class=\"line-numbers language-x86asm\" data-language=\"x86asm\"><code class=\"language-x86asm\">push &lt;reg32&gt;\npush &lt;mem&gt;\npush &lt;con32&gt;\n\n#例子:\npush eax\t\t#将eax值压栈\npush [var]\t\t#将var值指示的内存地址的4字节值压栈<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h6 id=\"pop-指令\"><a href=\"#pop-指令\" class=\"headerlink\" title=\"pop 指令\"></a>pop 指令</h6><p>与 push 指令相反,pop 指令执行的是出栈操作,出栈前先将 ESP 指示的地址中的内容出栈,然后将 ESP 的值加 4</p>\n<p><img src=\"计算机组成原理基础/1251900-20171222111908896-493635123.png\" alt=\"img\"></p>\n<p>语法格式如下:</p>\n<pre class=\"line-numbers language-x86asm\" data-language=\"x86asm\"><code class=\"language-x86asm\">pop edi\t\t\t#弹出栈顶元素送到edi\npop [ebx] \t\t#弹出栈顶元素送到ebx值指示的内存地址的4字节中<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h5 id=\"算数和逻辑运算指令\"><a href=\"#算数和逻辑运算指令\" class=\"headerlink\" title=\"算数和逻辑运算指令\"></a>算数和逻辑运算指令</h5><h6 id=\"add-sub-指令\"><a href=\"#add-sub-指令\" class=\"headerlink\" title=\"add/sub 指令\"></a>add/sub 指令</h6><p><code>add</code>指令将两个操作数相加,相加的结果保存到第一个操作数中。<code>sub</code>指令用于两个操作数相减,相减的结果保存到第一个操作数中</p>\n<pre class=\"line-numbers language-x86asm\" data-language=\"x86asm\"><code class=\"language-x86asm\">add &lt;reg&gt;,&lt;reg&gt; &#x2F; sub &lt;reg&gt;,&lt;reg&gt;\nadd &lt;reg&gt;,&lt;mem&gt; &#x2F; sub &lt;reg&gt;,&lt;mem&gt;\nadd &lt;mem&gt;,&lt;reg&gt; &#x2F; sub &lt;mem&gt;,&lt;reg&gt;\nadd &lt;reg&gt;,&lt;con&gt; &#x2F; sub &lt;reg&gt;,&lt;con&gt;\nadd &lt;mem&gt;,&lt;con&gt; &#x2F; sub &lt;mem&gt;,&lt;con&gt;\n\n#例子:\nsub eax, 10\t\t#eax ← eax-10\nadd byte ptr [var], 10 \t\t#10与var值指示的内存地址的1字节的值相加,并将结果保存在var值指示的内存地址的字节中<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h6 id=\"inc-dec-指令\"><a href=\"#inc-dec-指令\" class=\"headerlink\" title=\"inc/dec 指令\"></a>inc/dec 指令</h6><p><code>inc</code>指令是表示将操作数自增 1;<code>dec</code>指令是表示将操作数自减 1</p>\n<pre class=\"line-numbers language-x86asm\" data-language=\"x86asm\"><code class=\"language-x86asm\">inc &lt;reg&gt; &#x2F; dec &lt;reg&gt;\ninc &lt;mem&gt; &#x2F; dec &lt;mem&gt;\n\n#例子:\ndec eax\t\t\t#eax的值自减1\ninc dword ptr\t#var所指示的啊内存地址的4字节的值自增1(d double,word 16位)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h6 id=\"imul-指令\"><a href=\"#imul-指令\" class=\"headerlink\" title=\"imul 指令\"></a>imul 指令</h6><p>带符号整数乘法指令,有两种格式:</p>\n<p>① 两个操作数,将两个操作数相乘,将结果保存在第一个操作数中,<strong>第一个操作数必须为寄存器</strong></p>\n<p>②3 个操作数,将第二个和第三个操作数相乘,将结果保存在第一个操作数中,<strong>第一个操作数必须为寄存器</strong></p>\n<p>其语法格式如下:</p>\n<pre class=\"line-numbers language-x86asm\" data-language=\"x86asm\"><code class=\"language-x86asm\">imul &lt;reg32&gt;,&lt;reg32&gt;\nimul &lt;reg32&gt;,&lt;mem&gt;\nimul &lt;reg32&gt;,&lt;reg32&gt;,&lt;con&gt;\nimul &lt;reg32&gt;,&lt;mem&gt;,&lt;con&gt;\n\n\n#例子:\nimul eax, [var]\t\t#eax ← eax * [var]\nimul esi, edi, 25\t#esi ← edi * 25<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>乘法操作结果可能溢出,则编译器设置<code>溢出标志 OF=1</code>,以使 CPU 调出溢出异常处理程序。</p>\n<h6 id=\"idiv-指令\"><a href=\"#idiv-指令\" class=\"headerlink\" title=\"idiv 指令\"></a>idiv 指令</h6><p>带符号整数除法,他只有一个操作数,即除数,而被除数则为 edx:eax 中的内容(64 位整数),操作结果有两部分:商和余数,商送到 eax,余数送到 edx</p>\n<p>其语法如下:</p>\n<pre class=\"line-numbers language-x86asm\" data-language=\"x86asm\"><code class=\"language-x86asm\">idiv &lt;reg32&gt;\nidiv &lt;mem&gt;\n\n#例子:\nidiv ebx\nidiv dword ptr [var]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h6 id=\"and-or-xor-指令\"><a href=\"#and-or-xor-指令\" class=\"headerlink\" title=\"and/or/xor 指令\"></a>and/or/xor 指令</h6><p>分别是<code>逻辑与</code>、<code>逻辑或</code>、<code>逻辑异或</code>指令操作,用于操作数的位操作,操作结果放在第一个操作数中</p>\n<pre class=\"line-numbers language-x86asm\" data-language=\"x86asm\"><code class=\"language-x86asm\">and &lt;reg&gt;,&lt;reg&gt; &#x2F; or &lt;reg&gt;,&lt;reg&gt; &#x2F; xor &lt;reg&gt;,&lt;reg&gt;\nand &lt;reg&gt;,&lt;mem&gt; &#x2F; or &lt;reg&gt;,&lt;mem&gt; &#x2F; xor &lt;reg&gt;,&lt;mem&gt;\nand &lt;mem&gt;,&lt;reg&gt; &#x2F; or &lt;mem&gt;,&lt;reg&gt; &#x2F; xor &lt;mem&gt;,&lt;reg&gt;\nand &lt;reg&gt;,&lt;con&gt; &#x2F; or &lt;reg&gt;,&lt;con&gt; &#x2F; xor &lt;reg&gt;,&lt;con&gt;\nand &lt;mem&gt;,&lt;con&gt; &#x2F; or &lt;mem&gt;,&lt;con&gt; &#x2F; xor &lt;mem&gt;,&lt;con&gt;\n\n#例子:\nand eax, 0fH\t\t#将eax中的前28位全部置为0,最后4位保持不变,0fH(H表示该数为16进制数)\nxor edx, edx\t\t#置edx中的内容为0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h6 id=\"not-指令\"><a href=\"#not-指令\" class=\"headerlink\" title=\"not 指令\"></a>not 指令</h6><p>位翻转指令,将操作数中的每一位翻转,即 0 → 1、1 → 0</p>\n<p>其语法如下:</p>\n<pre class=\"line-numbers language-x86asm\" data-language=\"x86asm\"><code class=\"language-x86asm\">not &lt;reg&gt;\nnot &lt;mem&gt;\n\n#例子:\nnot byte ptr [var]\t#将var值指示的内存地址的一字节的所有位翻转<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h6 id=\"neg-指令\"><a href=\"#neg-指令\" class=\"headerlink\" title=\"neg 指令\"></a>neg 指令</h6><p>取负指令</p>\n<pre class=\"line-numbers language-x86asm\" data-language=\"x86asm\"><code class=\"language-x86asm\">neg &lt;reg&gt;\nneg &lt;mem&gt;\n\n#例子:\nneg eax\t\t\t\t#eax ← eax<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h6 id=\"shl-shr-指令\"><a href=\"#shl-shr-指令\" class=\"headerlink\" title=\"shl/shr 指令\"></a>shl/shr 指令</h6><p>逻辑移位指令,shl 为逻辑左移,shr 为逻辑右移,第一个操作数表示被操作数,第二个操作指示移位的位数</p>\n<pre class=\"line-numbers language-x86asm\" data-language=\"x86asm\"><code class=\"language-x86asm\">shl &lt;reg&gt;,&lt;con8&gt; &#x2F; shr &lt;reg&gt;,&lt;con8&gt;\nshl &lt;mem&gt;,&lt;con8&gt; &#x2F; shr &lt;mem&gt;,&lt;con8&gt;\nshl &lt;reg&gt;,&lt;cl&gt; &#x2F; shr &lt;reg&gt;,&lt;cl&gt;\nshl &lt;mem&gt;,&lt;cl&gt; &#x2F; shr &lt;mem&gt;,&lt;cl&gt;\n\n#例:\nshl eax, 1\t\t\t#将eax值左移一位,相当于乘2\nshr ebx, cl \t\t#将ebx值右移n位(n为cl中的值),相当于除2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"控制流指令\"><a href=\"#控制流指令\" class=\"headerlink\" title=\"控制流指令\"></a>控制流指令</h5><p> x86 处理器维持一个指示当前执行指令的指令指针(IP),当一条指令执行后,此指针自动指向下一条指令。IP 寄存器不能直接操作,但可以用控制流指令更新。通常用标签(label)指示程序中的指令地址,在 x86 的汇编代码中,可在任何指令前加入标签。例如:</p>\n<pre class=\"line-numbers language-x86asm\" data-language=\"x86asm\"><code class=\"language-x86asm\">\tmov esi, [ebp+8]\nbegin: xor ecx, ecx\n\tmov eax, [esi]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>这样 begin 指示了第二条指令,控制流指令通过标签就可以实现程序指令的跳转</p>\n<h6 id=\"jmp-指令\"><a href=\"#jmp-指令\" class=\"headerlink\" title=\"jmp 指令\"></a>jmp 指令</h6><p>控制 IP 转移到 label 所指示的地址(从 label 中取出指令执行)</p>\n<pre class=\"line-numbers language-x86asm\" data-language=\"x86asm\"><code class=\"language-x86asm\">jmp &lt;label&gt;\n\n#例子:\njmp begin\t\t\t#跳转到begin标记的指令执行<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h6 id=\"jcondition-指令\"><a href=\"#jcondition-指令\" class=\"headerlink\" title=\"jcondition 指令\"></a>jcondition 指令</h6><p>条件转移指令,依据 CPU 状态字中的一系列条件状态转移。CPU 状态字中包括指示最后一个算数运算结果是否为 0,运算结果是否为负数等</p>\n<pre class=\"line-numbers language-x86asm\" data-language=\"x86asm\"><code class=\"language-x86asm\">je &lt;label&gt;\t(jump when equal)\njne &lt;label&gt;\t(jump when not equal)\njz &lt;label&gt;\t(jump when last result was zero)\njnz &lt;label&gt;\t(jump when result was not zero)\njg &lt;label&gt;\t(jump when greather than)\njge &lt;label&gt;\t(jump when greather than or equal to)\njl &lt;label&gt;\t(jump when less than)\njle &lt;label&gt;\t(jump when less than or equal to)\n\n#例子:\ncmp eax, ebx\njle done \t\t\t#如果eax的值小于等于ebx的值,跳转到done指示的指令执行,否则执行下一条指令<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h6 id=\"cmp-test-指令\"><a href=\"#cmp-test-指令\" class=\"headerlink\" title=\"cmp/test 指令\"></a>cmp/test 指令</h6><p>cmp 指令用于比较两个操作数的值(compare),test 指令对两个操作数进行逐位与运算,<strong>这两类指令都不保存操作结果,仅根据运算结果设置 CPU 状态字中的条件码</strong></p>\n<pre class=\"line-numbers language-x86asm\" data-language=\"x86asm\"><code class=\"language-x86asm\">cmp &lt;reg&gt;,&lt;reg&gt; &#x2F; test &lt;reg&gt;,&lt;reg&gt;\ncmp &lt;mem&gt;,&lt;reg&gt; &#x2F; test &lt;mem&gt;,&lt;reg&gt;\ncmp &lt;reg&gt;,&lt;mem&gt; &#x2F; test &lt;reg&gt;,&lt;mem&gt;\ncmp &lt;reg&gt;,&lt;con&gt; &#x2F; test &lt;reg&gt;,&lt;con&gt;\n\n#cmp和test通常和jcondition指令搭配使用,举例:\ncmp dword ptr [var], 10\t\t#将var指示的主存地址为4字节的内容,与10进行比较\njne loop\t\t\t\t\t#如果相等则顺序执行,如果不相等则跳转到loop处执行\ntest eax, eax\t\t\t\t#测试eax是否为0\njz xxxx\t\t\t\t\t\t#为零则置标志ZF为1,跳转到xxxx处执行<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h6 id=\"call-ret-指令\"><a href=\"#call-ret-指令\" class=\"headerlink\" title=\"call/ret 指令\"></a>call/ret 指令</h6><p>分别用于实现子程序(过程、函数等)的调用及返回</p>\n<pre class=\"line-numbers language-x86asm\" data-language=\"x86asm\"><code class=\"language-x86asm\">call &lt;label&gt;\nret<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>call 指令首先将当前执行指令地址入栈,然后无条件转移到由标签指示的命令。与其他简单的跳转指令不同,call 指令保存调用前的地址信息(当 call 命令结束后,返回调用之前的地址)。</p>\n<p>ret 指令实现子程序的返回机制,ret 指令弹出栈中保存的指令地址,然后无条件转移到保存的指令地址执行。</p>\n<h3 id=\"过程调用的机器级表示\"><a href=\"#过程调用的机器级表示\" class=\"headerlink\" title=\"过程调用的机器级表示\"></a>过程调用的机器级表示</h3><p>上面说 call/ret 指令主要用于过程调用,他们都属于一种无条件转移指令。</p>\n<p>假定过程 P(调用者)调用过程 Q(被调用者),过程调用的执行步骤如下:</p>\n<ol>\n<li>P 将入口参数(实参)放在 Q 能够访问到的地方</li>\n<li>P 将返回地址存到特定的地方,然后控制转移到 Q(call 实现)</li>\n<li>Q 保存 P 的现场(通用寄存器的内容),并为自己的非静态局部变量分配空间</li>\n<li>执行过程 Q</li>\n<li>Q 恢复 P 的现场,将返回结果放到 P 能够访问到的地方,并释放局部变量所占空间</li>\n<li><p>Q 取出返回地址,将控制转移到 P(ret 实现)</p>\n<p>其中寄存器 EAX、ECX 和 EDX 是<code>调用者保存寄存器</code>,其保存和恢复的任务由过程 P 负责,P 调用 Q 时,Q 就可以直接使用这 3 个寄存器</p>\n</li>\n</ol>\n<p>寄存器 ESI、EDI、EBX 是<code>被调用者保存寄存器</code>,Q 必须先将他们的值保存在栈中才能使用它们,并在返回 P 之前先恢复它们的值</p>\n<p>每个过程都有自己的栈区,称为<code>栈帧</code>,因此,一个栈由若干帧栈帧组成。帧指针寄存器 EBP 指示当前栈帧的起止位置(栈底),栈指针寄存器 ESP 指示栈顶,栈从高地址向低地址增长,因此当前栈帧的范围在帧指针 EBP 和 ESP 指向的区域之间</p>\n<h3 id=\"选择语句的机器级表示\"><a href=\"#选择语句的机器级表示\" class=\"headerlink\" title=\"选择语句的机器级表示\"></a>选择语句的机器级表示</h3><p> 常见的选择结构语句有<code>if-then</code>、<code>if-then-else</code>、<code>case(或switch)</code>等。编译器通过条件码(标志位)设置指令和各类转移指令来实现程序中的选择结构语句。</p>\n<p><strong>条件码(标志位)</strong></p>\n<p> 除了整数寄存器,CPU 还维护一组<code>条件码(标志位)寄存器</code>,他们描述了<strong>最近</strong>的算数或逻辑运算操作的属性。可以检测这些寄存器来执行条件分支指令,最常用的条件码如下:</p>\n<ul>\n<li><strong>CF(Carry Flag)</strong>:进(借)位标志,最近无符号整数加(减)运算后的进(借)位情况。有进(借)位时,CF = 1;否则 CF = 0</li>\n<li><strong>ZF(Zero Flag)</strong>:零标志。最近的操作的运算结果是否为 0。若结果为 0,ZF = 1;否则 ZF = 0</li>\n<li>==<strong>SF(Sign Flag)</strong>:符号标志。最近的带符号数运算结果的符号。若为负,SF = 1;否则 SF = 0==</li>\n<li><strong>OF(Overflow Flag)</strong>:溢出标志。最近的带符号数运算结果是否溢出,若溢出,OF =1;否则 OF = 0</li>\n</ul>\n<p><strong>可见,OF 和 SF 对无符号数运算来说没有意义,而 CF 对带符号数运算来说没有意义</strong></p>\n<h2 id=\"CISC-和-RISC-的基本概念\"><a href=\"#CISC-和-RISC-的基本概念\" class=\"headerlink\" title=\"CISC 和 RISC 的基本概念\"></a>CISC 和 RISC 的基本概念</h2><p> CISC 复杂指令系统计算机，功能更强大，指令更复杂；RISC 精简指令系统计算机，指令简单，执行速度快。</p>\n<p> RISC 精简指令系统计算机，要求指令系统简化，尽量使用<strong>寄存器-寄存器</strong>操作指令。指令格式一致，指令长度固定、种类少，寻址方式种类少，<strong>指令功能没那么强</strong>。</p>\n<p>RISC 采用指令流水线技术，使大部分指令在一个时钟周期内完成。适合流水线的指令系统的特征有 ∶</p>\n<p> ① 指令长度应尽量一致;</p>\n<p> ② 指令格式应尽量规整;</p>\n<p> ③ 保证除 Load/Store 指令外的其他指令都不访问存储器;</p>\n<p> ④<strong>数据和指令在存储器中”对齐”存放</strong>。</p>\n<h1 id=\"中央处理器\"><a href=\"#中央处理器\" class=\"headerlink\" title=\"中央处理器\"></a>中央处理器</h1><h2 id=\"CPU-的功能和基本结构\"><a href=\"#CPU-的功能和基本结构\" class=\"headerlink\" title=\"CPU 的功能和基本结构\"></a>CPU 的功能和基本结构</h2><h3 id=\"CPU-的功能\"><a href=\"#CPU-的功能\" class=\"headerlink\" title=\"CPU 的功能\"></a>CPU 的功能</h3><p> <strong>指令控制</strong> 程序的顺序控制，称为指令控制。由于程序是一个指令序列，这些指令的 相互顺序不能任意颠倒，必须严格按程序规定的顺序进行，因此，保证机器按顺序执行程 序是 CPU 的首要任务。</p>\n<p> <strong>操作控制</strong> 一条指令的功能往往是由若干个操作信号的组合来实现的，因此，CPU 管理并产生由内存取出的每条指令的操作信号，把各种操作信号送往相应的部件，从而控制 这些部件按指令的要求进行动作。</p>\n<p> <strong>时间控制</strong> 对各种操作实施时间上的定时，称为时间控制。因为在计算机中，各种指令的操作信号均受到时间的严格定时。另外，一条指令的整个执行过程也受到时间的严格 定时。只有这样，计算机才能有条不紊地自动工作。</p>\n<p> <strong>数据加工</strong> 所谓数据加工，就是对数据进行算术运算和逻辑运算处理。完成数据的加工处理，是 CPU 的根本任务。因为，原始信息只有经过加工处理后才能对人们有用</p>\n<p> <strong>中断处理</strong> 对计算机运行过程中出现的异常情况和特殊请求进行处理</p>\n<h3 id=\"CPU-的基本结构\"><a href=\"#CPU-的基本结构\" class=\"headerlink\" title=\"CPU 的基本结构\"></a>CPU 的基本结构</h3><p><strong>控制器</strong></p>\n<p>由<code>程序计数器(PC)</code>、<code>指令寄存器(IR)</code>、<code>指令译码器(ID)</code>、<code>时序产生器和操作控制器(OC)</code>组成， 它是发布命令的“决策机构”，即完成协调和指挥整个计算机系统的操作。</p>\n<p>控制器的主要功能有：</p>\n<ol>\n<li><p>从指令 cache 中取出一条指令，并指出下一条指令在指令 cache 中的位置。</p>\n</li>\n<li><p>对指令进行译码或测试，并产生相应的操作控制信号，以便启动规定的动作。比如， 一次数据 cache 的读/写操作，一个算术逻辑运算操作，或一个输入/输出操作。</p>\n</li>\n<li><p>指挥并控制 CPU、数据 cache 和输入/输出设备之间数据流动的方向。</p>\n</li>\n</ol>\n<p>下面详细介绍一下控制器的组成:</p>\n<ol>\n<li><p><strong>指令寄存器(IR)</strong> <span style=\"color:red\">指令寄存器用来保存当前正在执行的一条指令。</span>当执行一条指令 时，先把它从指令存储器(简称指存)读出，然后再传送至指令寄存器。指令划分为操作码 和地址码字段，由二进制数字组成。为了执行任何给定的指令，必须对操作码进行测试， 以便识别所要求的操作。一个叫做指令译码器的部件就是做这项工作的。指令寄存器中操 作码字段 OP 的输出就是指令译码器的输入。操作码一经译码后，即可向操作控制器发出具 体操作的特定信号。</p>\n</li>\n<li><p><strong>程序计数器(PC)</strong> <span style=\"color:red\">用来指出下一条指令在主存中存放给的地址。</span>在程序开始执行前，必须将它的起始地址，即程序的第一条指令所在的指存单元地址送入 PC，因此 PC 的内容即是从指存提取的第一条指令的地址。当执行指令时，CPU 将自动修改 PC 的内容，以便使其保持的总是将要执行的下一条指令的地址。由于大多数指令都是按 顺序来执行的，所以修改的过程通常只是简单的对 PC 加 1。 但是，当遇到转移指令如 JMP 指令时，那么后继指令的地址(即 PC 的内容)必须从指令寄存器中的地址字段取得。在这种情况下，下一条从指存取出的指令将由转移指令来规定，而不是像通常一样按顺序来取得。因此程序计数器的结构应当是具有寄存器和计数两种功能的结构。<code>汇编程序员可见</code></p>\n</li>\n<li><strong>存储器地址寄存器(MAR)</strong> 用于存放要访问的主存单元的地址</li>\n<li><strong>存储数据寄存器(MDR)</strong> 用于存放向主存写入的信息或从主存读出的信息</li>\n<li><strong>时序系统</strong> 用于产生各种时序信号,他们都由统一时钟(CLOCK)分频得到</li>\n<li><strong>微操作信号信号发生器</strong> 根据 IR 的内容(指令)、PSW 的内容(状态信息)及时序信号,产生控制计算机各个部件所要用到的控制信号</li>\n</ol>\n<p><strong>运算器</strong></p>\n<p>由<code>算术逻辑运算单元(ALU)</code>、<a href=\"####相关寄存器\"><code>通用寄存器</code></a>、<code>数据缓冲寄存器(DR)</code>和<code>程序状态字寄存器(状态条件寄存器，PSWR)</code>组成，它是数据加工处理部件。相对控制器而言，运算器接受控制器的命令而进行动作，即<strong>运算器所进行的全部操作都是由控制器发出的控制信号来指挥的</strong>，<strong>所以它是执行部件</strong>。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>🙋‍♂️ 执行部件是相对于控制器来说的,一台数字计算机基本可以分为两个部分:控制部分和执行部分,控制器就是控制部件,而其余的就是执行部件</p></blockquote>\n<p>运算器有两个主要功能：</p>\n<ol>\n<li><p>执行所有的算术运算。</p>\n</li>\n<li><p>执行所有的逻辑运算，并进行逻辑测试，如零值测试或两个值的比较。 通常，一个算术操作产生一个运算结果，而一个逻辑操作则产生一个判决。</p>\n</li>\n</ol>\n<p>下面详细介绍一下运算器的组成:</p>\n<ol>\n<li><p><strong>算数逻辑单元(ALU)</strong>: 进行算数/逻辑运算</p>\n</li>\n<li><p><strong>暂存寄存器</strong>: 用于暂存从主存读来的数据,该数据不能存放在通用寄存器中,某则会破坏其原有的内容。<code>暂存寄存器对应用程序员来说是透明的</code></p>\n</li>\n<li><p><strong>累加寄存器(ACC)</strong>:一个通用寄存器,用于暂时存放 ALU 的运算结果,可做加法运算的一个输入端</p>\n</li>\n<li><p><strong>通用寄存器</strong> 在我们的模型中，通用寄存器有 4 个(R0 ～ R3)，其功能是：当算术逻 辑单元(ALU)执行算术或逻辑运算时，为 ALU 提供一个工作区。例如，在执行一次加法运 算时，选择两个操作数(分别放在两个寄存器)相加，所得的结果送回其中一个寄存器(如 R2)中，而 R2 中原有的内容随即被替换。</p>\n<p> 目前 CPU 中的通用寄存器，可多达 64 个，甚至更多。其中任何一个可存放源操作数， 也可存放结果操作数。在这种情况下，需要在指令格式中对寄存器号加以编址。从硬件结 构来讲，需要使用通用寄存器堆结构，以便选择输入信息源。通用寄存器还用作地址指示 器、变址寄存器、堆栈指示器等。</p>\n</li>\n<li><p><strong>程序状态字寄存器(PSWR)</strong> 程序状态字寄存器又称为状态条件寄存器，<span style=\"color:red\">保存由算术运算指令和逻辑运算指令运算或测试结果建立的各种条件代码</span>，如运算结果<code>进位标志C)</code>，<code>运算结果溢出标志(V)</code>，<code>运算结果为零标志(Z)</code>，<code>运算结果为负标志(N)</code>，等等。这些 标志位通常分别由 1 位触发器保存。 除此之外，状态条件寄存器还保存中断和系统工作状态等信息，以便使 CPU 和系统能 及时了解机器运行状态和程序运行状态。因此，状态条件寄存器是一个由各种状态条件标 志拼凑而成的寄存器。<code>对所有用户可见</code></p>\n</li>\n<li><p><strong>移位器</strong> 对操作数或运算记过进行移位操作</p>\n</li>\n<li><p><strong>计数器</strong> 控制乘除运算的操作步骤</p>\n</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>虚拟存储器对系统程序员可见</p></blockquote>\n<p>以下是哈弗结构的 CPU 模型简略图(数据 cache 和指令 cache 分离)👇:</p>\n<p><img src=\"计算机组成原理基础/image-20230712163507973.png\" alt=\"image-20230712163507973\"></p>\n<p>`</p>\n<p><strong>==寄存器和存储器的可见性总结==</strong>:</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">寄存器</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:center\">汇编程序员可见</th>\n<th style=\"text-align:center\">应用程序员可见</th>\n<th style=\"text-align:center\">系统程序员可见</th>\n<th style=\"text-align:center\">用户是否可见(可编程)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">PSW</td>\n<td style=\"text-align:left\">在条件转移指令中使用，以及在程序员使用 CMP 指令时需要用到</td>\n<td style=\"text-align:center\"><strong>是</strong></td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\"><strong>是</strong></td>\n<td style=\"text-align:center\"><strong>是</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PC</td>\n<td style=\"text-align:left\">跳转指令需要使用 PC+n 来实现</td>\n<td style=\"text-align:center\"><strong>是</strong></td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\"><strong>是</strong></td>\n<td style=\"text-align:center\"><strong>是</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">通用寄存器</td>\n<td style=\"text-align:left\">程序员可以使用通用寄存器 R 写指令</td>\n<td style=\"text-align:center\"><strong>是</strong></td>\n<td style=\"text-align:center\"><strong>是</strong></td>\n<td style=\"text-align:center\"><strong>是</strong></td>\n<td style=\"text-align:center\"><strong>是</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">MAR</td>\n<td style=\"text-align:left\">内存地址寄存器，用于存储要访问的内存地址</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\"><strong>是</strong></td>\n<td style=\"text-align:center\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">MDR</td>\n<td style=\"text-align:left\">内存数据寄存器，用于存储从内存读取或将数据写入内存的数据</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\"><strong>是</strong></td>\n<td style=\"text-align:center\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">累加器 ACC</td>\n<td style=\"text-align:left\">用于存储运算结果和进行算术逻辑操作</td>\n<td style=\"text-align:center\"><strong>是</strong></td>\n<td style=\"text-align:center\"><strong>是</strong></td>\n<td style=\"text-align:center\"><strong>是</strong></td>\n<td style=\"text-align:center\"><strong>是</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">IR</td>\n<td style=\"text-align:left\">指令寄存器，用于存储当前正在执行的指令</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\"><strong>是</strong></td>\n<td style=\"text-align:center\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Cache</td>\n<td style=\"text-align:left\">高速缓存，用于临时存储内存中的数据，以提高访问速度</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\"><strong>是</strong></td>\n<td style=\"text-align:center\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">微程序结构和功能</td>\n<td style=\"text-align:left\">CPU 内部的微指令，用于控制 CPU 的操作流程</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\"><strong>是</strong></td>\n<td style=\"text-align:center\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">暂存寄存器</td>\n<td style=\"text-align:left\">CPU 内部用于完成某些操作的寄存器</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\"><strong>是</strong></td>\n<td style=\"text-align:center\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">虚拟寄存器</td>\n<td style=\"text-align:left\">虚拟机中的寄存器</td>\n<td style=\"text-align:center\"><strong>是</strong></td>\n<td style=\"text-align:center\"><strong>是</strong></td>\n<td style=\"text-align:center\"><strong>是</strong></td>\n<td style=\"text-align:center\"><strong>是</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">虚拟存储器</td>\n<td style=\"text-align:left\">系统程序员通过虚拟存储器来管理内存的使用，以及进行进程之间的隔离和保护。</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\"><strong>是</strong></td>\n<td style=\"text-align:center\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">基址寄存器</td>\n<td style=\"text-align:left\">存储基址，用于地址转换计算</td>\n<td style=\"text-align:center\"><strong>是</strong></td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\"><strong>是</strong></td>\n<td style=\"text-align:center\"><strong>是</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">变址寄存器</td>\n<td style=\"text-align:left\">存储索引，用于变址寻址</td>\n<td style=\"text-align:center\"><strong>是</strong></td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\"><strong>是</strong></td>\n<td style=\"text-align:center\"><strong>是</strong></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"指令的过程\"><a href=\"#指令的过程\" class=\"headerlink\" title=\"指令的过程\"></a>指令的过程</h2><h3 id=\"指令周期\"><a href=\"#指令周期\" class=\"headerlink\" title=\"指令周期\"></a>指令周期</h3><p>CPU 从主存中取出并执行一条指令的时间称为指令周期,不同指令的指令周期可能不同。</p>\n<p>指令周期常用若干机器周期来表示,一个机器周期又包含若干个时钟周期(也称节拍或 T 周期,它是 CPU 操作的最基本的单位)。</p>\n<p><img src=\"计算机组成原理基础/image-20230712224618774.png\" alt=\"image-20230712224618774\"></p>\n<p>完整的指令周期：</p>\n<p><img src=\"计算机组成原理基础/20201019215210426.png\" alt=\"img\"></p>\n<p>上述 4 个工作周期都有 CPU 访存操作，只是访存的目的不同。</p>\n<p><strong>取指周期是为了取指令(控制器自动进行，不需要得到相应的指令)</strong></p>\n<p><strong>间址周期是为了取操作数有效地址</strong></p>\n<p><strong>执行周期是为了取操作数并执行运算</strong></p>\n<p><strong>中断周期是为了保存程序断点</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>为了区分不同的工作周期,在 CPU 内设置了 4 个标志触发器 FE、IND、EX 和 INT,他们分别对应<code>取指</code>、<code>间址</code>、<code>执行</code>和<code>中断</code>周期,并以”1”状态表示有效</p></blockquote>\n<h3 id=\"指令周期的数据流\"><a href=\"#指令周期的数据流\" class=\"headerlink\" title=\"指令周期的数据流\"></a>指令周期的数据流</h3><h4 id=\"取指周期\"><a href=\"#取指周期\" class=\"headerlink\" title=\"取指周期\"></a>取指周期</h4><p>根据 PC 中的内容从主存中取出指令代码并存放在 IR 中</p>\n<p>取指周期的数据流向如下图 👇:</p>\n<p><img src=\"计算机组成原理基础/image-20230713092234989.png\" alt=\"image-20230713092234989\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong><em>在取指令开始的时候，PC 存放的是当前指令的地址；取指完成后，PC 中存放的是下一条指令的地址。</em></strong><br>区别在于 是取指令开始的阶段还是取指令结束的阶段。</p>\n<p>由此也可得出一个结论:<strong>每个指令周期CPU至少访存一次</strong></p></blockquote>\n<h4 id=\"间址周期\"><a href=\"#间址周期\" class=\"headerlink\" title=\"间址周期\"></a>间址周期</h4><p>取操作数的有效地址</p>\n<p>间址周期的数据流向如下图 👇:</p>\n<p><img src=\"计算机组成原理基础/image-20230713092728467.png\" alt=\"image-20230713092728467\"></p>\n<p>为什么有个或？ 因为在取指周期阶段是先把指令放在 MDR 里面，再传到 IR；进入到间址周期， MDR 中内容是暂时还没有改的，里面存的也还是之前的内容。所以 “有个或” 。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Ad(IR)表示取出 IR 中存放指令字的地址字段</p></blockquote>\n<h4 id=\"执行周期\"><a href=\"#执行周期\" class=\"headerlink\" title=\"执行周期\"></a>执行周期</h4><p>根据 <strong>IR 中的指令的操作码</strong>和 <strong>MDR 中地址</strong>对应的主存的操作数，通过 ALU 操作产生执行结果。<br>不同的指令执行周期操作不同，因此数据流无法统一。</p>\n<h4 id=\"中断周期\"><a href=\"#中断周期\" class=\"headerlink\" title=\"中断周期\"></a>中断周期</h4><p>处理中断请求。假设程序断点存入堆栈中,并用 SP 指示栈顶地址,并且进栈操作是<strong>先修改栈顶指针,后存入数据</strong></p>\n<p><img src=\"计算机组成原理基础/image-20230713091644918.png\" alt=\"image-20230713091644918\"></p>\n<p><span style=\"color:rgb(246, 132, 43);font-weight:600\">只是先暂停任务，去完成其它任务。为了恢复当前任务，需要保存断点。</span><span style=\"color:rgb( 142, 205, 109);font-weight:600\">【断点：本来要执行的下一条指令，即 PC 的内容】</span><br>一般使用 堆栈结构来保存断点，SP 表示栈顶地址。<br>假设 SP 指向栈顶元素，进栈操作是先修改指针后存入数据。【如果是栈顶元素上一个位置，则是先存入数据，再移动指针】</p>\n<p>调整指针是通过 <span style=\"color:red;font-weight:600\">减 1</span> 实现，和平时的方向是相反的，<span style=\"color:rgb( 142, 205, 109);font-weight:600\">因为在主存中选一片区域做堆栈的时候，是从高地址码向低地址去扩增的。</span>所以进栈用减法，出栈用加法。</p>\n<p><span style=\"color:rgb(51, 153, 234);font-weight:600\">到第 3 步，将 PC 的内容送到 MDR 之后，配合之前写的命令，PC 的内容就会通过数据总线放到存储器中。<br>(MDR)  → M(MAR)</span></p>\n<p>第 3 步完成后，<br>就完成了中断操作的第一个任务：保存断点（即暂停当前任务）；<span style=\"color:rgb(246, 132, 43);font-weight:600\">下一步是要去完成其它任务，怎么开始完成其它任务？</span><br><span style=\"color:rgb( 142, 205, 109);font-weight:600\">把任务要执行的第一条指令地址（即中断服务程序的入口地址）放到 PC 中。</span>这个地址是由向量形成部件产生的（中断章节具体介绍），故该地址又被称为 向量地址。 这样下一步， CPU 还是根据 PC 中的内容去寻找下一条指令，所以就切入到了一个新的程序的运行。</p>\n<h3 id=\"指令执行方案\"><a href=\"#指令执行方案\" class=\"headerlink\" title=\"指令执行方案\"></a>指令执行方案</h3><p><strong>单指令周期</strong>：具体来说，就是不分取指阶段、执行阶段等，而是将指令周期作为一个阶段，就相当于每个指令周期都是一个机器周期。这种模式下，指令和指令之间是串行执行的。因为所有的指令需要统一 一个时间，所以指令周期 取决于执行时间最长的指令的执行时间。</p>\n<p><strong>多指令周期</strong>:对不同类型的指令选用不同的执行步骤。指令之间串行执行。</p>\n<p><strong>流水线方案</strong>：间隔一定时间启动就启动一条指令，原理是：在不同的机器周期（不同的小步骤下），一条指令所需要的硬件资源是不同的，所以这样的安排相当于多条指令在并行执行，只不过在不同的阶段在使用不同的硬件。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">假定不使用Cache和指令预取技术<span class=\"token punctuation\">,</span>且机器处于开中断状态<span class=\"token punctuation\">,</span>则在下列有关指令的叙述中<span class=\"token punctuation\">,</span>错误的是<span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span>\nA. 每个指令周期中CPU都至少访问内存一次  \t\t\t//取指周期\nB. 每个指令周期一定大于或等于一个CPU时钟周期\t\t    \nC. 空操作指令的指令周期中任何寄存器的内容都不会修改\t   // PC的内容改变<span class=\"token punctuation\">(</span>PC+1<span class=\"token punctuation\">)</span> 选B\nD. 当前程序子在每条指令结束时都可能被外部中断打断\t\t<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"数据通路的功能和基本结构\"><a href=\"#数据通路的功能和基本结构\" class=\"headerlink\" title=\"数据通路的功能和基本结构\"></a>数据通路的功能和基本结构</h2><h3 id=\"数据通路的功能\"><a href=\"#数据通路的功能\" class=\"headerlink\" title=\"数据通路的功能\"></a>数据通路的功能</h3><p>数据通路就是数据在功能部件之间传送的路径；</p>\n<p>数据通路描述了信息从哪里开始、中间经过哪些部件、最终传送到哪个寄存器；</p>\n<p>数据通路由 ==控制部件== 控制，控制部件根据每条指令功能的不同生成对数据通路的控制信号；</p>\n<p>数据通路的功能是==实现 CPU 内部的 运算器与寄存器 及 寄存器之间 的数据交换== ；</p>\n<h3 id=\"数据通路的基本结构\"><a href=\"#数据通路的基本结构\" class=\"headerlink\" title=\"数据通路的基本结构\"></a>数据通路的基本结构</h3><p>数据通路的基本结构包括以下三种：</p>\n<p>① <strong>CPU 内部单总线结构</strong></p>\n<p>所有寄存器的输入端和输出端都连接连接到一条公共通路上；</p>\n<p>特点：结构简单、易数据冲突、性能低；</p>\n<p>② <strong>CPU 内部三总线结构</strong></p>\n<p>所有寄存的输入输出端链接到多条公共通路上</p>\n<p>③ <strong>专用数据通路方式</strong></p>\n<p>根据指令执行过程中的数据和地址的流动方向安排连接线路；</p>\n<p>特点：避免使用共享的总线，性能高、硬件量大；</p>\n<p><img src=\"计算机组成原理基础/20210715141630.png\" alt=\"找不到图片(Image not found)\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>字母加”<code>in</code>“表示该部件允许输入控制信号</p>\n<p>字母加”<code>out</code>“表示该部件允许输出控制信号</p>\n<p>注意: <code>内部总线</code>是指同一部件，如 CPU 内部连接各寄存器及运算部件之间的总线; <code>系统总线</code>是指同一台计算机系统的各部件，如 CPU、内存、通道和各类 IO 接口间互相连接的总线。</p></blockquote>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>采用</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"寄存器之间的数传送\"><a href=\"#寄存器之间的数传送\" class=\"headerlink\" title=\"寄存器之间的数传送\"></a>寄存器之间的数传送</h4><p>寄存器之间的数据传送可通过 CPU 内部总线完成。在图 5.7 中，某寄存器 AX 的输出和输入分别由 AXout 和 AXin 控制。这里以 PC 寄存器为例，把 PC 内容送至 MAR，实现传送操作的流程及控制信号为</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">PC→Bus PCout有效，PC内容送总线\nBus→MAR MARin有效，总线内容送MAR<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h4 id=\"主存与-CPU-之间的数据传送\"><a href=\"#主存与-CPU-之间的数据传送\" class=\"headerlink\" title=\"主存与 CPU 之间的数据传送\"></a>主存与 CPU 之间的数据传送</h4><p>主存与 CPU 之间的数据传送也要借助 CPU 内部总线完成。现以 CPU 从主存读取指令为例说明数据在数据通路中的传送过程。实现传送操作的流程及控制信号为</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">PC→Bus→MAR PCout 和 MARin有效，现行指令地址→MAR\n1→R CU发读命令\n<span class=\"token function\">MEM</span><span class=\"token punctuation\">(</span>MAR<span class=\"token punctuation\">)</span>→MDR MDRin有效\nMDR→BuS→IR MDRout和 IRin有效，现行指令→IR<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"执行算术或逻辑运算\"><a href=\"#执行算术或逻辑运算\" class=\"headerlink\" title=\"执行算术或逻辑运算\"></a>执行算术或逻辑运算</h5><p>执行算术或逻辑操作时，由于 ALU 本身是没有内部存储功能的组合电路，因此如要执行加法运算，相加的两个数必须在 ALU 的两个输入端同时有效。图 5.7 中的暂存器 Y 即用于该目的。先将一个操作数经 CPU 内部总线送入暂存器 Y 保存，Y 的内容在 ALU 的左输入端始终有效，再将另一个操作数经总线直接送到 ALU 的右输入端。这样两个操作数都送入了 ALU，运算结果暂存在暂存器 Z 中。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token function\">Ad</span><span class=\"token punctuation\">(</span>IR<span class=\"token punctuation\">)</span>→Bus→MAR MDRout和 MARin有效\n1→R CU发读命令\nMEM→数据线→MDR 操作数从存储器→数据线→MDR\nMDR→Bus→Y MDRout 和 Yin有效，操作数→Y\n<span class=\"token punctuation\">(</span>ACC<span class=\"token punctuation\">)</span>+<span class=\"token punctuation\">(</span>Y<span class=\"token punctuation\">)</span>→Z ACCout 和 ALUin有效，CU向ALU发加命令，结果→Z\nZ→ACC Zout和 ACCin有效，结果→ACC<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"控制器的功能和工作原理\"><a href=\"#控制器的功能和工作原理\" class=\"headerlink\" title=\"控制器的功能和工作原理\"></a>控制器的功能和工作原理</h2><h3 id=\"控制器的结构和功能\"><a href=\"#控制器的结构和功能\" class=\"headerlink\" title=\"控制器的结构和功能\"></a>控制器的结构和功能</h3><p>从图 5.8 可以看到计算机硬件系统的五大功能部件及其连接关系。它们通过数据总线、地址总线和控制总线连接在一起，其中点画线框内的是控制器部件。</p>\n<p><img src=\"计算机组成原理基础/20210715150655.png\" alt=\"找不到图片(Image not found)\"></p>\n<p>控制器的主要功能有:</p>\n<ol>\n<li><p>从主存中取出一条指令，并指出下一条指令在主存中的位置。</p>\n</li>\n<li><p>对指令进行译码或测试，产生相应的操作控制信号，以便启动规定的动作。</p>\n</li>\n<li><p>指挥并控制 CPU、主存、输入和输出设备之间的数据流动方向。</p>\n</li>\n</ol>\n<p>根据控制器产生微操作控制信号的方式的不同，控制器可分为<code>硬布线控制器</code>(RISC中使用)和<code>微程序控制器</code>(CSIC使用)，两类控制器中的 PC 和 IR 是相同的，但确定和表示指令执行步骤的办法以及给出控制各部件运行所需要的控制信号的方案是不同的。</p>\n<h3 id=\"硬布线控制器\"><a href=\"#硬布线控制器\" class=\"headerlink\" title=\"硬布线控制器\"></a>硬布线控制器</h3><p> 基本原理是根据指令的要求、当前的时序及外部和内部的状态，按时间的顺序发送一系列微操作控制信号。它由复杂的组合逻辑门电路和一些触发器构成，因此又称<code>组合逻辑控制器</code>。</p>\n<p><img src=\"计算机组成原理基础/d9481fa2bf02472bbcfb7d9af2838d29.png\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"硬布线控制器的时序系统及微操作\"><a href=\"#硬布线控制器的时序系统及微操作\" class=\"headerlink\" title=\"硬布线控制器的时序系统及微操作\"></a>硬布线控制器的时序系统及微操作</h4><p>1) 时钟周期。用时钟信号控制节拍发生器，可以产生节拍，每个节拍的宽度正好对应一个时钟周期。在每个节拍内机器可完成一个或几个需同时执行的操作。</p>\n<p>2) 机器周期。机器周期可视为所有指令执行过程中的一个基准时间。不同指令的操作不同，指令周期也不同。访问一次存储器的时间是固定的，因此通常以存取周期作为基准时间，即内存中读取一个指令字的最短时间作为机器周期。在存储字长等于指令字长的前提下，取指周期也可视为机器周期。</p>\n<p>在一个机器周期里可完成若干微操作，每个微操作都需一定的时间，可用时钟信号来控制产生每个微操作命令。</p>\n<p>3) 指令周期。</p>\n<p>4) 微操作命令分析。控制单元具有发出各种操作命令（控制信号）序列的功能。这些命令与指令有关，而且必须按一定次序发出，才能使机器有序地工作。</p>\n<p>执行程序的过程中，对于不同的指令，控制单元需发出各种不同的微操作命令。一条指令分为 3 个工作周期:取指周期、间址周期和执行周期。下面分析各个子周期的微操作命令。</p>\n<p><img src=\"计算机组成原理基础/20210930183346.png\" alt=\"找不到图片(Image not found)\"></p>\n<h5 id=\"CPU-的控制方式\"><a href=\"#CPU-的控制方式\" class=\"headerlink\" title=\"CPU 的控制方式\"></a>CPU 的控制方式</h5><p>控制单元控制一条指令执行的过程，实质上是依次执行一个确定的微操作序列的过程。由于不同指令所对应的微操作数及复杂程度不同，因此每条指令和每个微操作所需的执行时间也不同。主要有以下 3 种控制方式。</p>\n<ol>\n<li><p><code>同步控制方式</code> 。所谓同步控制方式，是指系统有一个统一的时钟，所有的控制信号均来自这个统一的时钟信号。通常以最长的微操作序列和最烦琐的微操作作为标准，采取完全统一的、具有相同时间间隔和相同数目的节拍作为机器周期来运行不同的指令。同步控制方式的优点是控制电路简单，缺点是运行速度慢。</p>\n</li>\n<li><p><code>异步控制方式</code>。异步控制方式不存在基准时标信号，各部件按自身固有的速度工作，通过应答方式进行联络。异步控制方式的优点是运行速度快，缺点是控制电路比较复杂。</p>\n</li>\n<li><p><code>联合控制方式</code>。联合控制方式是介于同步、异步之间的一种折中。这种方式对各种不同的指令的微操作实行大部分采用同步控制、小部分采用异步控制的办法。</p>\n</li>\n</ol>\n<h5 id=\"硬布线控制单元设计步骤\"><a href=\"#硬布线控制单元设计步骤\" class=\"headerlink\" title=\"硬布线控制单元设计步骤\"></a>硬布线控制单元设计步骤</h5><p>硬布线控制单元设计步骤包括:</p>\n<ol>\n<li><p><strong>列出微操作命令的操作时间表</strong>。先根据微操作节拍安排，列出微操作命令的操作时间表。操作时间表中包括各个机器周期、节拍下的每条指令完成的微操作控制信号。表 5.1 列出了 CLA、COM、SHR 等 10 条机器指令微操作命令的操作时间表。表中 FE、IND 和 EX 为 CPU 工作周期标志，T~0~～ T~2~,为节拍，Ⅰ 为间址标志，在取指周期的 T~2~时刻，若测得 I=1，则 IND 触发器置“1”，标志进入间址周期;若 I=0，则 EX 触发器置“1”，标志进入执行周期。同理，在间址周期的 T~2~时刻，若测得 IND=0(表示一次间接寻址)，则 EX 触发器置“1”，进入执行周期;若测得 IND= 1(表示多次间接寻址)，则继续间接寻址。在执行周期的 T~2~时刻，CPU 要向所有中断源发中断查询信号，若检测到有中断请求并满足响应条件，则 INT 触发器置“1”，标志进入中断周期。表中未列出 INT 触发器置“1”的操作和中断周期的微操作。表中第一行对应 10 条指令的操作码，代表不同的指令。若某指令有表中所列出的微操作命令，其对应的单元格内为 1。</p>\n</li>\n<li><p><strong>进行微操作信号综合</strong>。在列出微操作时间表后，即可对它们进行综合分析、归类，根据<br>微操作时间表可写出各微操作控制信号的逻辑表达式并进行适当的简化。表达式一般包括下列因素:</p>\n</li>\n</ol>\n<p>微操作控制信号=机器周期 ∧ 节拍 ∧ 脉冲 ∧ 操作码 ∧ 机器状态条件</p>\n<p>根据表 5.1 便可列出每个微操作命令的初始逻辑表达式，经化简、整理可获得能用现有门电路实现的微操作命令逻辑表达式。</p>\n<p><img src=\"计算机组成原理基础/20210716142423.png\" alt=\"找不到图片(Image not found)\"></p>\n<p>例如，根据表 5.1 可写出 M(MAR)–MDR 微操作命令的逻辑表达式:</p>\n<p>$\\begin{aligned} &amp; \\mathrm{M}(\\mathrm{MAR}) \\rightarrow \\mathrm{MDR} \\ &amp; \\quad=\\mathrm{FE} \\cdot T_1+\\mathrm{IND} \\cdot \\mathrm{T}_1(\\mathrm{ADD}+\\mathrm{STA}+\\mathrm{LDA}+\\mathrm{JMP}+\\mathrm{BAN})+\\mathrm{EX} \\cdot T_1(\\mathrm{ADD}+\\mathrm{LDA}) \\ &amp; \\quad=T_1{\\mathrm{FE}+\\mathrm{IND}(\\mathrm{ADD}+\\mathrm{STA}+\\mathrm{LDA}+\\mathrm{JMP}+\\mathrm{BAN})+\\mathrm{EX}(\\mathrm{ADD}+\\mathrm{LDA})}\\end{aligned}$</p>\n<p>式中，ADD、STA、LDA、JMP、BAN 均来自操作码译码器的输出。</p>\n<ol>\n<li><strong>画出微操作命令的逻辑图</strong>。根据逻辑表达式可画出对应每个微操作信号的逻辑电路图，<br>并用逻辑门电路实现。</li>\n</ol>\n<p>例如，M(MAR)-MDR 的逻辑表达式所对应的逻辑图如图 5.10 所示，图中未考虑门的扇入系数。</p>\n<p><img src=\"计算机组成原理基础/20210716142756.png\" alt=\"找不到图片(Image not found)\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>🤔<strong>扇入系数是什么?</strong></p>\n<p>在数字电路设计中，”门的扇入系数”（Fan-in）是指一个逻辑门所能接受的输入数量。每个逻辑门都有一个特定的扇入限制，表示它能够连接的输入信号线的数量。</p>\n<p> 逻辑门的扇入系数取决于特定的逻辑门类型。例如，一个 2 输入的 AND 门具有扇入系数 2，意味着它可以连接两个输入信号线。如果连接了超过 2 个输入信号线，可能会导致电路设计上的问题。</p></blockquote>\n<h3 id=\"微程序控制器\"><a href=\"#微程序控制器\" class=\"headerlink\" title=\"微程序控制器\"></a>微程序控制器</h3><p> 微程序控制器采用存储逻辑实现，也就是把微操作信号代码化，使每条机器指令转化成为一段微程序并存入一个专门的存储器（控制存储器）中，微操作控制信号由微指令产生。</p>\n<h4 id=\"微程序控制的基本概念\"><a href=\"#微程序控制的基本概念\" class=\"headerlink\" title=\"微程序控制的基本概念\"></a>微程序控制的基本概念</h4><p> 微程序设计思想就是将每条机器指令编写成一个微程序，每个微程序包含若干微指令，每条微指令对应一个或几个微操作命令。这些微程序可以存到一个控制存储器中，用寻址用户程序机器指令的办法来寻址每个微程序中的微指令。目前，大多数计算机都采用微程序设计技术。</p>\n<p>微程序设计技术涉及的基本术语如下:</p>\n<ol>\n<li><strong>微命令</strong>与<strong>微操作</strong> 。一条机器指令可以分解成一个微操作序列，这些微操作是计算机中最基本的、不可再分解的操作。在微程序控制的计算机中，将控制部件向执行部件发出的各种控制命令称为 微命令微命令 ，它是构成控制序列的最小单位。例如，打开或关闭某个控制门的电位信号、某个寄存器的打入脉冲等。微命令和微操作是一一对应的。微命令是微操作的控制信号，微操作是微命令的执行过程。微命令有相容性和互斥性之分。相容性微命令是指那些可以同时产生、共同完成某一些微操作的微命令;而互斥性微命令是指在机器中不允许同时出现的微命令。相容和互斥都是相对的，一个微命令可以和一些微命令相容，和另一些微命令互斥。</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意:在组合逻辑控制器中也存在微命令与微操作这两个概念，它们并非只是微程序控制器的专有概念。</p></blockquote>\n<ol>\n<li><p><strong>微指令</strong>与<strong>微周期</strong>。微指令是若干微命令的集合。存放微指令的控制存储器的单元地址称为微地址。一条微指令通常至少包含两大部分信息:</p>\n<p>① <code>操作控制字段</code>，又称<strong>微操作码字段</strong>，<strong>用于产生某一步操作所需的各种操作控制信号</strong>。</p>\n<p>②<code>顺序控制字段</code>，又称<strong>微地址码字段</strong>，<strong>用于控制产生下一条要执行的微指令地址</strong>。微周期通常指从控制存储器中读取一条微指令并执行相应的微操作所需的时间。</p>\n</li>\n<li><p><strong>主存储器</strong>与<strong>控制存储器</strong>。主存储器用于存放程序和数据，在 CPU 外部，用 RAM 实现;<code>控制存储器（CM）</code>用于存放微程序，在 CPU 内部，用 ROM 实现。</p>\n</li>\n<li><p><strong>程序</strong>与<strong>微程序</strong>。 <code>程序是指令的有序集合指令的有序集合</code> ，用于完成特定的功能; <code>微程序微程序是微指令的有序集合微指令的有序集合</code>，<strong>一条指令的功能由一段微程序来实现</strong>。</p>\n</li>\n</ol>\n<p>微程序和程序是两个不同的概念。微程序是由微指令组成的，用于描述机器指令。微程序实际上是机器指令的实时解释器，是由计算机设计者事先编制好并存放在控制存储器中的，一般不提供给用户。对于程序员来说，计算机系统中微程序的结构和功能是透明的，无须知道。而程序最终由机器指令组成，是由软件设计人员事先编制好并存放在主存或辅存中的。</p>\n<p>读者应注意区分以下寄存器:</p>\n<p>①<code>地址寄存器(MAR)</code>。用于存放主存的读/写地址。</p>\n<p>②<code>微地址寄存器(CMAR或μPC)</code>。用于存放控制存储器的读/写微指令的地址。</p>\n<p>③<code>指令寄存器（IR)</code>。用于存放从主存中读出的指令。</p>\n<p>④<code>微指令寄存器（CMDR或μIR)</code>。用于存放从控制存储器中读出的微指令。</p>\n<h4 id=\"微程序控制器组成和工作过程\"><a href=\"#微程序控制器组成和工作过程\" class=\"headerlink\" title=\"微程序控制器组成和工作过程\"></a>微程序控制器组成和工作过程</h4><h5 id=\"微程序控制器的基本组成\"><a href=\"#微程序控制器的基本组成\" class=\"headerlink\" title=\"微程序控制器的基本组成\"></a>微程序控制器的基本组成</h5><p>图 5.11 所示为一个微程序控制器的基本结构，主要画出了微程序控制器比组合逻辑控制器多出的部件，包括:</p>\n<p>①<strong>控制存储器</strong>。它是微程序控制器的核心部件，用于存放各指令对应的微程序，控制存储器可用只读存储器 ROM 构成。</p>\n<p>②<strong>微指令寄存器</strong>。用于存放从 CM 中取出的微指令，它的位数同微指令字长相等。</p>\n<p>③<strong>微地址形成部件</strong>。用于产生初始微地址和后继微地址,以保证微指令的连续执行。</p>\n<p>④<strong>微地址寄存器</strong>。接收微地址形成部件送来的微地址，为在 CM 中读取微指令作准备。</p>\n<p><strong>微程序控制器</strong>在结构上通常位于<code>指令译码器</code>和<code>操作控制器</code>之间</p>\n<p><img src=\"计算机组成原理基础/20210930184630.png\" alt=\"找不到图片(Image not found)\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>图中的控制存储器就是 CM</p></blockquote>\n<h5 id=\"微程序控制器的工作过程\"><a href=\"#微程序控制器的工作过程\" class=\"headerlink\" title=\"微程序控制器的工作过程\"></a>微程序控制器的工作过程</h5><p>微程序控制器的工作过程实际上就是在微程序控制器的控制下计算机执行机器指令的过程，这个过程可以描述如下:</p>\n<p>① 执行取微指令公共操作。具体的执行是:在机器开始运行时，自动将取指微程序的入口地址送入 CMAR，并从 CM 中读出相应的微指令送入 CMDR。取指微程序的入口地址一般为 CM 的 0 号单元，当取指微程序执行完后，从主存中取出的机器指令就已存入指令寄存器中。</p>\n<p>② 由机器指令的操作码字段通过微地址形成部件产生该机器指令所对应的微程序的入口地址，并送入 CMAR。</p>\n<p>③ 从 CM 中逐条取出对应的微指令并执行。</p>\n<p>④ 执行完对应于一条机器指令的一个微程序后，又回到取指微程序的入口地址，继续第 ①<br>步，以完成取下一条机器指令的公共操作。</p>\n<p>以上是一条机器指令的执行过程，如此周而复始，直到整个程序执行完毕。</p>\n<h4 id=\"微程序和机器指令\"><a href=\"#微程序和机器指令\" class=\"headerlink\" title=\"微程序和机器指令\"></a>微程序和机器指令</h4><p> 通常，一条机器指令对应一个微程序。由于任何一条机器指令的取指令操作都是相同的，因此可将取指令操作的微命令统一编成一个微程序，这个微程序只负责将指令从主存单元中取出并送至指令寄存器。</p>\n<p> 此外，也可编出对应间址周期的微程序和中断周期的微程序。这样，控制存储器中的微程序个数应为机器指令数再加上对应取指、间址和中断周期等共用的微程序数。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意:若指令系统中具有 n 种机器指令，则控制存储器中的微程序数至少是 n+1(1 为公共的取指微程序)。</p></blockquote>\n<h5 id=\"微指令的编码方式\"><a href=\"#微指令的编码方式\" class=\"headerlink\" title=\"微指令的编码方式\"></a>微指令的编码方式</h5><p>微指令的编码方式又称微指令的控制方式，是指如何对微指令的控制字段进行编码，以形成控制信号。编码的目标是在保证速度的情况下，尽量缩短微指令字长。</p>\n<h6 id=\"直接编码（直接控制）方式\"><a href=\"#直接编码（直接控制）方式\" class=\"headerlink\" title=\"直接编码（直接控制）方式\"></a>直接编码（直接控制）方式</h6><p> 微指令的直接编码方式如图 5.12 所示。直接编码法无须进行译码，微指令的微命令字段中每位都代表一个微命令。设计微指令时，选用或不选用某个微命令，只要将表示该微命令的对应位设置成 1 或 0 即可。每个微命令对应并控制数据通路中的一个微操作。</p>\n<p>这种编码的优点是简单、直观，执行速度快，操作并行性好;缺点是微指令字长过长，n 个微命令就要求微指令的操作字段有 n 位，造成控制存储器容量极大。</p>\n<p><img src=\"计算机组成原理基础/20210716143824.png\" alt=\"找不到图片(Image not found)\"></p>\n<p>以下是一个具体的直接编码样例 👇：</p>\n<p><img src=\"计算机组成原理基础/image-20230713200142941.png\" alt=\"image-20230713200142941\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>遵循<code>互斥性微命令</code>分在同一段内，<code>相容性微命令</code>分在不同段内。</p></blockquote>\n<h6 id=\"字段直接编码方式\"><a href=\"#字段直接编码方式\" class=\"headerlink\" title=\"字段直接编码方式\"></a>字段直接编码方式</h6><p> 将微指令的微命令字段分成若干小字段，把互斥性微命令组合在同一字段中，把相容性微命令组合在不同字段中，每个字段独立编码，每种编码代表一个微命令且各字段编码含义单独定义，与其他字段无关，这就是字段直接编码方式，如图 5.13 所示。</p>\n<p>这种方式可以缩短微指令字长，但因为要通过译码电路后再发出微命令，因此比直接编码方式慢。</p>\n<p>微命令字段分段的原则:</p>\n<p>① 互斥性微命令分在同一段内，相容性微命令分在不同段内。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>所谓<code>相容性</code>的微操作，是指在同时或同一个 CPU 周期内可以并行执行的 微操作。</p>\n<p>所谓<code>相斥性</code>的微操作，是指不能在同时或不能在同一个 CPU 周期内并行执行的微操作。</p></blockquote>\n<p>② 每个小段中包含的信息位不能太多，否则将增加译码线路的复杂性和译码时间。</p>\n<p>③ 一般每个小段还要留出一个状态，表示本字段不发出任何微命令。因此，当某字段的长度为 3 位时，最多只能表示 7 个互斥的微命令，通常用 000 表示不操作。</p>\n<p><img src=\"计算机组成原理基础/20210930185025.png\" alt=\"找不到图片(Image not found)\"></p>\n<p> 图 5.21 示出了一个简单运算器模型，其中 ALU 为算术逻辑单元，R1、R2、R3 为三个寄存器。三个寄存器的内容都可以通过多路开关从 ALU 的 X 输入端或 Y 输入端送至 ALU，而 ALU 的输出可以送往任何一个寄存器 或同时送往 R1，R2，R3 三个寄存器。在 我们给定的数据通路中，多路开关的每 个控制门仅是一个常闭的开关，它的一个输入端代表来自寄存器的信息，而另一个输入端则作为操作控制端。一旦两 个输入端都有输入信号时，它才产生一个输出信号，从而在控制线能起作用的 一个时间宽度中来控制信息在部件中流 动。图中每个开关门由控制器中相应的 微命令来控制，例如，开关门 4 由控制 器中编号为 4 的微命令控制，开关门 6 由编号为 6 的微命令控制，如此等等。 三个寄存器 R1、R2、R3 的时钟输入端 1、 2、3 也需要加以控制，以便在 ALU 运算 完毕而输出公共总线上电平稳定时，将结果打入到某一寄存器。另外，我们假定 ALU 只有 +，–，M(传送)三种操作。Cy 为最高进位触发器，有进位时该触发器状态为“1”。</p>\n<p> ALU 的操作(加、减、传送)在同一个 CPU 周期中只能选择一种，不能并行，所以+，–， M(传送)三个微操作是相斥性的微操作。类似地，4、6、8 三个微操作是相斥性的，5、7、 9 三个微操作也是相斥性的。ALU 的 X 输入微操作 4、6、8 与 Y 输入的 5、7、9 这两组信号中，任意两个微操作也都是相容性的。</p>\n<p><img src=\"计算机组成原理基础/image-20230713195734514.png\" alt=\"image-20230713195734514\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>其直接编码格式如上上上图 5.22</p></blockquote>\n<h6 id=\"字段间接编码方式\"><a href=\"#字段间接编码方式\" class=\"headerlink\" title=\"字段间接编码方式\"></a>字段间接编码方式</h6><p> 一个字段的某些微命令需由另一个字段中的某些微命令来解释，由于不是靠字段直接译码发出的微命令，因此称为字段间接编码，又称隐式编码。这种方式可进一步缩短微指令字长，但因削弱了微指令的并行控制能力，因此通常作为字段直接编码方式的一种辅助手段。</p>\n<h5 id=\"微指令的地址形成方式\"><a href=\"#微指令的地址形成方式\" class=\"headerlink\" title=\"微指令的地址形成方式\"></a>微指令的地址形成方式</h5><p>后继微地址的形成主要有以下两大基本类型:</p>\n<ol>\n<li><p><strong>直接由微指令的下地址字段指出</strong>。微指令格式中设置一个下地址字段，<strong>由微指令的下地址字段直接指出后继微指令的地址，这种方式又称</strong>==断定方式==。</p>\n</li>\n<li><p><strong>根据机器指令的操作码形成</strong>。机器指令取至指令寄存器后，微指令的地址由操作码经微地址形成部件形成。</p>\n</li>\n</ol>\n<p>实际上，微指令序列地址的形成方式还有以下几种:</p>\n<p>① 增量计数器法，即(CMAR)+1→CMAR，适用于后继微指令的地址连续的情况。</p>\n<p>② 根据各种标志决定微指令分支转移的地址。</p>\n<p>③ 通过网络测试形成。</p>\n<p>④ 由硬件直接产生微程序入口地址。</p>\n<p>电源加电后，第一条微指令的地址可由专门的硬件电路产生，也可由外部直接向 CMAR 输入微指令的地址，这个地址即为取指周期微程序的入口地址。</p>\n<h5 id=\"微指令的格式\"><a href=\"#微指令的格式\" class=\"headerlink\" title=\"微指令的格式\"></a>微指令的格式</h5><p>微指令格式与微指令的编码方式有关，通常分水平型微指令和垂直型微指令两种。</p>\n<p><strong>水平型微指令</strong></p>\n<p> 从编码方式看，<code>直接编码</code>、<code>字段直接编码</code>、<code>字段间接编码</code>和<code>混合编码</code>都属于水平型微指令。水平型微指令的基本指令格式如图 5.14 所示，指令字中的一位对应一个控制信号，有输出时为 1，否则为 0。一条水平型微指令定义并执行几种并行的基本操作。</p>\n<p><img src=\"计算机组成原理基础/20210716144416.png\" alt=\"找不到图片(Image not found)\"></p>\n<p>水平型微指令的优点是微程序短，执行速度快;缺点是微指令长，编写微程序较麻烦。</p>\n<p><strong>垂直型微指令</strong></p>\n<p> 垂直型微指令的特点是采用类似机器指令操作码的方式，在微指令中设置微操作码字段，采用微操作码编译法，由微操作码规定微指令的功能，其基本的指令格式如图 5.15 所示。一条垂直型微指令只能定义并执行一种基本操作。</p>\n<p><img src=\"计算机组成原理基础/20210716144502.png\" alt=\"找不到图片(Image not found)\"></p>\n<p>垂直型微指令格式的优点是微指令短、简单、规整，便于编写微程序;缺点是微程序长，执行速度慢，工作效率低。</p>\n<p><strong>混合型微指令</strong></p>\n<p>在垂直型的基础上增加一些不太复杂的并行操作。微指令较短，仍便于编写;微程序也不长，执行速度加快。</p>\n<p><strong>水平型微指令和垂直型微指令的对比</strong>👇：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">特点</th>\n<th style=\"text-align:left\">水平型微指令</th>\n<th style=\"text-align:left\">垂直型微指令</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">并行操作能力</td>\n<td style=\"text-align:left\">强</td>\n<td style=\"text-align:left\">较差</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">效率</td>\n<td style=\"text-align:left\">高</td>\n<td style=\"text-align:left\">低</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">灵活性</td>\n<td style=\"text-align:left\">强</td>\n<td style=\"text-align:left\">较差</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">执行时间</td>\n<td style=\"text-align:left\">短</td>\n<td style=\"text-align:left\">长</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">微指令字长度</td>\n<td style=\"text-align:left\">较长</td>\n<td style=\"text-align:left\">较短</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">微程序长度</td>\n<td style=\"text-align:left\">短</td>\n<td style=\"text-align:left\">长</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">用户掌握难度</td>\n<td style=\"text-align:left\">高</td>\n<td style=\"text-align:left\">相对容易</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h5 id=\"微程序控制单元的设计步骤\"><a href=\"#微程序控制单元的设计步骤\" class=\"headerlink\" title=\"微程序控制单元的设计步骤\"></a>微程序控制单元的设计步骤</h5><p>微程序控制单元设计的主要任务是编写各条机器指令所对应的微程序。具体的设计步骤如下:</p>\n<ol>\n<li>写出对应机器指令的微操作命令及节拍安排。无论是组合逻辑设计还是微程序设计，对应相同的 CPU 结构，两种控制单元的微操作命令和节拍安排都是极相似的。如微程序控制单元在取指阶段发出的微操作命令及节拍安排如下:</li>\n</ol>\n<script type=\"math/tex; mode=display\">\\begin{aligned}T_{0}&:\\quad \\text{PC}\\to\\text{MAR},\\ 1\\to\\text{R}\\\\T_{1}&:\\quad \\text{M(MAR)}\\to\\text{MDR},\\ (\\text{PC})+1\\to\\text{PC}\\\\T_{2}&:\\quad \\text{MDR}\\to\\text{IR},\\ \\text{OP(IR)}\\to\\text{微地址形成部件}\\end{aligned}</script><p>与硬布线控制单元相比，只在 T~2~节拍内的微操作命令不同。微程序控制单元在 T~2~节拍内要将指令的操作码送至微地址形成部件，即 OP(IR)→ 微地址形成部件，以形成该条机器指令的微程序首地址。而硬布线控制单元在 T~2~,节拍内要将指令的操作码送至指令译码器，以控制 CU 发出相应的微命令，即 OP(IR)→ID。</p>\n<p>若把一个节拍 T 内的微操作安排在一条微指令中完成，上述微操作对应 3 条微指令。但由于微程序控制的所有控制信号都来自微指令，而微指令又存在控制存储器中，因此欲完成上述这些微操作，必须先将微指令从控制存储器中读出，即必须先给出这些微指令的地址。在取指微程序中，除第一条微指令外，其余微指令的地址均由上一条微指令的下地址字段直接给出，因此上述每条微指令都需增加一个将微指令下地址字段送至 CMAR 的微操作，记为 Ad(CMDR)→CMAR。取指微程序的最后一条微指令，其后继微指令的地址是由微地址形成部件形成的，即微地址形成部件 →CMAR。为了反映该地址与操作码有关，因此记为 OP(IR)→ 微地址形成部件 →CMAR。</p>\n<p>综上所述，考虑到需要形成后继微指令地址，上述分析的取指操作共需 6 条微指令完成:</p>\n<p><img src=\"计算机组成原理基础/80450e5a13714efc8bf44aaac9496007.png\" alt=\"在这里插入图片描述\"></p>\n<p>执行阶段的微操作命令及节拍安排，分配原则类似。与硬布线控制 单元微操作命令的节拍安排相比，多了将下一条微指令地址送至 CMAR 的微操作命令，即 Ad(CMDR)→CMAR。其余的微操作命令与硬布线控制单元相同。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意:这里为了理解，应将微指令和机器指令相联系，因为每执行完一条微指令后要得到下一条微指令的地址。</p></blockquote>\n<ol>\n<li>确定微指令格式。微指令格式包括微指令的编码方式、后继微指令地址的形成方式和微指令字长等。</li>\n</ol>\n<p>根据微操作个数决定采用何种编码方式，以确定微指令的操作控制字段的位数。由微指令数确定微指令的顺序控制字段的位数。最后按操作控制字段位数和顺序控制字段位数就可确定微指令字长。</p>\n<ol>\n<li>编写微指令码点。根据操作控制字段每位代表的微操作命令，编写每条微指令的码点。</li>\n</ol>\n<h5 id=\"动态微程序设计和毫微程序设计\"><a href=\"#动态微程序设计和毫微程序设计\" class=\"headerlink\" title=\"动态微程序设计和毫微程序设计\"></a>动态微程序设计和毫微程序设计</h5><ol>\n<li><p><strong>动态微程序设计</strong>。在一台微程序控制的计算机中，假如能根据用户的要求改变微程序，则这台机器就具有动态微程序设计功能。</p>\n<p>动态微程序的设计需要可写控制寄存器的支持，否则难以改变微程序的内容。实现动态微程序设计可采用可擦除可编程只读存储器（EPROM)。</p>\n</li>\n<li><p><strong>毫微程序设计</strong>。在普通的微程序计算机中，从主存取出的每条指令是由放在控制存储器中的微程序来解释执行的，通过控制线对硬件进行直接控制。</p>\n<p>若硬件不由微程序直接控制，而是通过存放在第二级控制存储器中的毫微程序来解释的，这个第二级控制存储器就称为毫微存储器，直接控制硬件的是毫微微 指令。</p>\n</li>\n</ol>\n<h3 id=\"硬布线控制器和微程序控制器的比较\"><a href=\"#硬布线控制器和微程序控制器的比较\" class=\"headerlink\" title=\"硬布线控制器和微程序控制器的比较\"></a>硬布线控制器和微程序控制器的比较</h3><p><img src=\"计算机组成原理基础/20210716150404.png\" alt=\"找不到图片(Image not found)\"></p>\n<h2 id=\"指令流水线\"><a href=\"#指令流水线\" class=\"headerlink\" title=\"指令流水线\"></a>指令流水线</h2><p> 一条指令的执行过程可分解为若干阶段，每个阶段由相应的功能部件完成。如果将各阶段视为相应的流水段，则指令的执行过程就构成了一条指令流水线。采用流水线技术只需增加少量硬件就能把计算机的运算速度提高几倍，因此成为计算机中普遍使用的一种并行处理技术。</p>\n<h3 id=\"指令流水的定义\"><a href=\"#指令流水的定义\" class=\"headerlink\" title=\"指令流水的定义\"></a>指令流水的定义</h3><p>根据计算机的不同，具体的分法也不同。例如，图 5.16 把一条指令的执行过程分为如下 <code>三个</code>阶段（或过程)。</p>\n<p><img src=\"计算机组成原理基础/20210716181707.png\" alt=\"找不到图片(Image not found)\"></p>\n<p><code>取指</code> :根据 PC 内容访问主存储器，取出一条指令送到 IR 中。</p>\n<p><code>分析</code> :对指令操作码进行译码，按照给定的寻址方式和地址字段中的内容形成操作数的有效地址 EA，并从有效地址 EA 中取出操作数。</p>\n<p><code>执行</code> :根据操作码字段，完成指令规定的功能，即把运算结果写到通用寄存器或主存中。</p>\n<p>当多条指令在处理器中执行时,可以采用以下两种方式。</p>\n<ol>\n<li>顺序执行方式。前一条指令执行完后，才启动下一条指令，如图 5.17(a)所示。假设取指、分析、执行三个阶段的时间都相等，用 t 表示，顺序执行 n 条指令所用时间 T 为</li>\n</ol>\n<script type=\"math/tex; mode=display\">T = 3nt</script><p>传统冯·诺依曼机采用顺序执行方式，又称串行执行方式。其优点是控制简单，硬件代价小;缺点是执行指令的速度较慢，在任何时刻，处理机中只有一条指令在执行，各功能部件的利用率很低。例如取指时内存是忙碌的，而指令执行部件是空闲的。</p>\n<ol>\n<li>流水线执行方式。为了提高指令的执行速度，可以把取 k ＋ 1 条指令提前到分析第 k 条指令的期间完成，而将分析第 k ＋ 1 条指令与执行第 k 条指令同时进行，如图 5.17(b)所示。采用此种方式时，执行 n 条指令所用的时间为</li>\n</ol>\n<script type=\"math/tex; mode=display\">T = (2+n)t</script><p>与顺序执行方式相比，采用流水线执行方式能使指令的执行时间缩短近 2/3，各功能部件的利用率明显提高。但为此需要付出硬件上较大开销的代价，控制过程也更复杂。在理想情况下，每个时钟周期都有一条指令进入流水线，处理机中同时有 3 条指令在执行，每个时钟周期都有一条指令完成，每条指令的时钟周期数（即 CPI）都为 1。</p>\n<p><img src=\"计算机组成原理基础/20210716182135.png\" alt=\"找不到图片(Image not found)\"></p>\n<p>为了进一步获得更高的执行速度，还可以将流水段进一步细分。如将一条指令的执行过程分为 <code>取指令</code> 、 <code>指令译码</code> 、 <code>执行</code> 和 <code>写回</code> 四个阶段，就形成了 <code>四级流水</code> ;还可进一步分为 <code>取指令(IF)</code> 、 <code>指令译码(ID)</code> 、 <code>执行(EX)</code> 、<code>访存(M)</code> 和 <code>写回(WB)</code> ，就形成了 <code>五级流水</code>。</p>\n<ul>\n<li>各缩写的全称</li>\n<li>IF：instruction fetch</li>\n<li>ID：instruction decode</li>\n<li>EX：execute</li>\n<li>M：memory</li>\n<li>WB：write back</li>\n</ul>\n<p>流水线设计的原则是如下:指令流水段个数以最复杂指令所用的功能段个数为准;流水段的长度以最复杂的操作所花的时间为准。假设某条指令的 5 个阶段所花的时间分别如下。① 取指:200ps;译码:100ps;③ 执行: 150ps;④ 访存 200ps;⑤ 写回 100ps。不考虑数据通路中的各种延迟，该指令的总执行时间为 750ps。按照流水线设计原则，每个流水段的长度为 200ps，所以每条指令的执行时间为 1ns，反正比串行执行时增加了 250ps。假设某程序中有 N 条指令，单周期处理机所用时间为 N×750ns。而流水处理机所用时间为 750ps + (N-1)×200。因此，<code>流水线方式并不能缩短一条指令的执行时间</code>，但是，对于整个程序来说，可以大大增加指令执行的吞吐率。</p>\n<p>为了利于实现指令流水线，指令集应具有如下特征:</p>\n<ol>\n<li><p>指令长度应尽量一致，有利于简化取指令和指令译码操作。否则，取指令所花时间长短不易，使取指部件极其复杂，且也不利于指令译码。</p>\n</li>\n<li><p>指令格式应尽量规整，尽量保证源寄存器的位置相同，有利于在指令未知时就可取寄存器操作数，否则须译码后才能确定指令中各寄存器编号的位置。</p>\n</li>\n<li><p>采用 Load/Store 指令，其他指令（如运算指令）都不能访问存储器，这样可把 Load/Store 指令的地址计算和运算指令的执行步骤规整在同一个周期中，有利于减少操作步骤。</p>\n</li>\n<li><p>数据和指令在存储器中“<code>对齐</code>”存放。这样，有利于减少访存次数，使所需数据在一个流水段内就能从存储器中得到。</p>\n</li>\n</ol>\n<h3 id=\"流水线的表示方法\"><a href=\"#流水线的表示方法\" class=\"headerlink\" title=\"流水线的表示方法\"></a>流水线的表示方法</h3><p>通常用时空图来直观地描述流水线的工作过程，如图 5.18 所示。</p>\n<p>在时空图中，横坐标表示时间，即输入流水线中的各个任务在流水线中所经过的时间。流水线中各个流水段的执行时间都相等时，横坐标就被分割成相等长度的时间段。纵坐标表示空间，即流水线的每个流水段（对应各执行部件)。</p>\n<p> 在图 5.18 中，第一条指令 I1 在时刻 T~0~进入流水线，在时刻 T~4~流出流水线。第二条指令 I——2 在时刻 T~1~进入流水线，在时刻 T~5~流出流水线。以此类推，每经过一个 Δt 时间，便有一条指令进入流水线，从时刻 t4 开始有一条指令流出流水线。</p>\n<p> 从图 5.18 中可以看出，当 t~8~ =8Δt 时，流水线上便有 5 条指令流出。若采用串行方式执行指令，当 t8 =8Δt 时，只能执行 2 条指令，可见使用流水线方式成倍地提高了计算机的速度。</p>\n<p><img src=\"计算机组成原理基础/20210716182718.png\" alt=\"找不到图片(Image not found)\"></p>\n<h3 id=\"流水线方式的特点\"><a href=\"#流水线方式的特点\" class=\"headerlink\" title=\"流水线方式的特点\"></a>流水线方式的特点</h3><p>与传统的串行执行方式相比，采用流水线方式具有如下特点:</p>\n<ol>\n<li><p>把一个任务（一条指令或一个操作）分解为几个有联系的子任务，每个子任务由一个专门的功能部件来执行，并依靠多个功能部件并行工作来缩短程序的执行时间。</p>\n</li>\n<li><p>流水线每个功能段部件后面都要有一个缓冲寄存器，或称锁存器，其作用是保存本流水段的执行结果，供给下一流水段使用。</p>\n</li>\n<li><p>流水线中各功能段的时间应尽量相等，否则将引起堵塞、断流。</p>\n</li>\n<li><p>只有连续不断地提供同一种任务时才能发挥流水线的效率，所以在流水线中处理的必须是连续任务。在采用流水线方式工作的处理机中，要在软件和硬件设计等多方面尽量为流水线提供连续的任务。</p>\n</li>\n<li><p>流水线需要有<code>装入时间</code>和<code>排空时间</code>。装入时间是指第一个任务进入流水线到输出流水线的时间。排空时间是指最后一个任务进入流水线到输出流水线的时间。</p>\n</li>\n</ol>\n<h3 id=\"流水线的分类\"><a href=\"#流水线的分类\" class=\"headerlink\" title=\"流水线的分类\"></a>流水线的分类</h3><p>按照不同的分类标准，可以把流水线分成多种不同的种类。下面从几个不同的角度介绍流水线的基本分类方法。</p>\n<h5 id=\"部件功能级、处理机级和处理机间级流水线\"><a href=\"#部件功能级、处理机级和处理机间级流水线\" class=\"headerlink\" title=\"部件功能级、处理机级和处理机间级流水线\"></a>部件功能级、处理机级和处理机间级流水线</h5><p>根据流水线使用级别的不同，流水线可分为部件功能级流水线、处理机级流水线和处理机间流水线。</p>\n<p><code>部件功能级流水</code> 将复杂的算术逻辑运算组成流水线工作方式。例如，可将浮点加法操作分成求阶差、对阶、尾数相加及结果规格化等 4 个子过程。</p>\n<p><code>处理机级流水</code> 把一条指令解释过程分成多个子过程，如前面提到的取指、译码、执行、访存和写回 5 个子过程。</p>\n<p>处理机间流水是一种宏流水，其中每个处理机完成某一专门任务，各个处理机得到的结果需存放在与下一个处理机共享的存储器中。</p>\n<h5 id=\"单功能流水线和多功能流水线\"><a href=\"#单功能流水线和多功能流水线\" class=\"headerlink\" title=\"单功能流水线和多功能流水线\"></a>单功能流水线和多功能流水线</h5><p>按可以完成的功能，流水线可分为单功能流水线和多功能流水线。</p>\n<p><code>单功能流水线</code>是指只能实现一种固定的专门功能的流水线; <code>多功能流水线</code> 是指通过各段间的不同连接方式可以同时或不同时地实现多种功能的流水线。</p>\n<h5 id=\"动态流水线和静态流水线\"><a href=\"#动态流水线和静态流水线\" class=\"headerlink\" title=\"动态流水线和静态流水线\"></a>动态流水线和静态流水线</h5><p>按同一时间内各段之间的连接方式，流水线可分为静态流水线和动态流水线。</p>\n<p><code>静态流水线</code> 指在同一时间内，流水线的各段只能按同一种功能的连接方式工作。</p>\n<p><code>动态流水线</code> 指在同一时间内，当某些段正在实现某种运算时，另一些段却正在进行另一种运算。这样对提高流水线的效率很有好处，但会使流水线控制变得很复杂。</p>\n<h5 id=\"线性流水线和非线性流水线\"><a href=\"#线性流水线和非线性流水线\" class=\"headerlink\" title=\"线性流水线和非线性流水线\"></a>线性流水线和非线性流水线</h5><p>按流水线的各个功能段之间是否有反馈信号，流水线可分为线性流水线与非线性流水线。</p>\n<p><code>线性流水线</code> 中，从输入到输出，每个功能段只允许经过一次，不存在反馈回路。 <code>非线性流水线</code> 存在反馈回路，从输入到输出的过程中，某些功能段将数次通过流水线，这种流水线适合进行线性递归的运算。</p>\n<p>流水线的每个子过程由专用的功能段实现，各功能段所需的时间应尽量相等。否则，时间长的功能段将成为流水线的瓶颈。</p>\n<h4 id=\"影响流水线的因素\"><a href=\"#影响流水线的因素\" class=\"headerlink\" title=\"==影响流水线的因素==\"></a>==影响流水线的因素==</h4><p>在指令流水线中，可能会遇到一些情况使得流水线无法正确执行后续指令而引起流水线阻塞或停顿，这种现象称为流水线冲突（冒险)。导致流水线冲突的原因主要有 3 种: <code>结构冒险(资源冲突)</code>、 <code>数据冒险(数据冲突)</code>和 <code>控制冒险(控制冲突)</code>。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>以下还是使用<code>冒险</code>,因为描述的是两个指令之间的关系和隐藏风险，而不是事实上的发生了冲突</p></blockquote>\n<h5 id=\"资源冒险\"><a href=\"#资源冒险\" class=\"headerlink\" title=\"资源冒险\"></a>资源冒险</h5><p>由于多条指令在同一时刻争用同一资源而形成的冲突称为资源冲突，即由硬件资源竞争造成的冲突，有以下两种解决办法:</p>\n<p>1）前一指令访存时，使后一条相关指令（以及其后续指令）暂停一个时钟周期。</p>\n<p>2）单独设置数据存储器和指令存储器，使取数和取指令操作各自在不同的存储器中进行。</p>\n<p>事实上，现代计算机都引入了 Cache 机制，而 L1 Cache 通常采用数据 Cache 和指令 Cache 分离的方式，因而也就避免了资源冲突的发生。</p>\n<h5 id=\"数据冒险\"><a href=\"#数据冒险\" class=\"headerlink\" title=\"数据冒险\"></a>数据冒险</h5><p>在一个程序中，下一条指令会用到当前指令计算出的结果，此时这两条指令即为数据冲突。当多条指令重叠处理时就会发生冲突，数据冲突可分为三类（结合综合题 3 理解):</p>\n<ol>\n<li><p><strong>写后读(Read After Write，RAW)相关</strong>:表示当前指令将数据写入寄存器后，下一条指令才能从该寄存器读取数据。否则，先读后写，读到的就是错误（旧）数据。</p>\n</li>\n<li><p><strong>读后写(Write After Read，WAR）相关</strong>:表示当前指令读出数据后，下一条指令才能写该寄存器。否则，先写后读，读到的就是错误（新）数据。</p>\n</li>\n<li><p><strong>写后写(Write After Write，WAW)相关</strong>:表示当前指令写入寄存器后，下一条指令才能写该寄存器。否则，下一条指令在当前指令之前写，将使寄存器的值不是最新值。</p>\n</li>\n</ol>\n<p><em>解决的办法有以下几种</em>:</p>\n<ol>\n<li><p>把遇到数据相关的指令及其后续指令都暂停一至几个时钟周期，直到数据相关问题消失后再继续执行(流水线气泡)，可分为硬件阻塞(stall)和软件插入“NOP”指令(空指令,即不执行任何有用的操作，只是占据了一个时钟周期，以使后续指令延迟进入流水线)两种方法。</p>\n</li>\n<li><p>设置相关专用通路，即不等前一条指令把计算结果写回寄存器组，下一条指令也不再读寄存器组，而直接把前一条指令的 ALU 的计算结果作为自己的输入数据开始计算过程，使本来需要暂停的操作变得可以继续执行，这称为<code>数据旁路技术</code>(流水线定向)。</p>\n</li>\n<li><p>通过编译器对数据相关的指令编译优化的方法，调整指令顺序来解决数据相关。</p>\n</li>\n</ol>\n<h5 id=\"控制冒险\"><a href=\"#控制冒险\" class=\"headerlink\" title=\"控制冒险\"></a>控制冒险</h5><p>一条指令要确定下一条指令的位置，例如在执行转移、调用或返回等指令时会改变 PC 值，而造成断流,会引起控制冒险。解决的办法有以下几种:</p>\n<ol>\n<li><p><strong>对转移指令进行分支预测</strong>，尽早生成转移目标地址。分支预测分为简单（静态）预测和动态预测。静态预测总是预测条件不满足，即继续执行分支指令的后续指令。动态预测根据程序执行的历史情况，进行动态预测调整，有较高的预测准确率。</p>\n</li>\n<li><p><strong>预取转移成功和不成功两个控制流方向上的目标指令</strong>。</p>\n</li>\n<li><p>加快和提前形成条件码。</p>\n</li>\n<li><p>提高转移方向的猜准率。</p>\n</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意:Cache 缺失的处理过程也会引起流水线阻塞。在不过多增加硬件成本的情况下，如何尽可能地提高指令流水线的运行效率是选用指令流水线技术必须解决的关键问题。</p></blockquote>\n<h3 id=\"流水线的性能指标\"><a href=\"#流水线的性能指标\" class=\"headerlink\" title=\"==流水线的性能指标==\"></a>==流水线的性能指标==</h3><p>衡量流水线性能的主要指标有<code>吞吐率</code>、<code>加速比</code>和<code>效率</code>。下面以<a href=\"#####线性流水线和非线性流水线\">线性流水线</a>为例分析流水线的主要性能指标，其分析方法和有关公式也适用于非线性流水线。</p>\n<h4 id=\"吞吐率\"><a href=\"#吞吐率\" class=\"headerlink\" title=\"吞吐率\"></a>吞吐率</h4><p>流水线的吞吐率 TP(Through Put)是指<strong>单位时间内流水线所完成的任务数量或输出结果的数量</strong></p>\n<script type=\"math/tex; mode=display\">TP=\\frac n{T_k}\\qquad\\qquad\\text{(3.1)}</script><p>其中,n 为任务数,T~k~是处理完 n 个任务所用的时间,这是计算流水线吞吐率的最基本的公式</p>\n<p><strong>各段时间均相等的流水线</strong></p>\n<p> 以下为个段时间均相等(都是 Δt)的线性流水的时空图。这里假设段数为 k,连续输入 n 个任务第一个任务输入后,经过 kΔt 的时间从输出端流出(完成)。此后的 n-1 个 Δt 中,每个 Δt 时间完成一个任务。在这种情况下,流水线完成 n 个连续任务所需要的总时间为</p>\n<script type=\"math/tex; mode=display\">T_k = k\\Delta t + (n-1)\\Delta t = (k+n-1)\\Delta t \\qquad\\qquad \\text{(3.2)}</script><p>将式 3.2 带入式 3.1 中得<strong>流水线实际吞吐率</strong>为:</p>\n<script type=\"math/tex; mode=display\">TP = \\frac n{(k+n-1)\\Delta t}</script><p>这种情况下的<strong>最大吞吐率</strong>为:</p>\n<script type=\"math/tex; mode=display\">TP_{max}=\\lim\\limits_{x \\to \\infty} \\frac n{(k+n-1)\\Delta t} = \\frac 1{\\Delta t}</script><p><img src=\"计算机组成原理基础/20210716183823.png\" alt=\"找不到图片(Image not found)\"></p>\n<p>由以上式子可知流水线的实际吞吐率总是小于最大吞吐率</p>\n<p><strong>各段不完全相等的流水线</strong></p>\n<p> 在下图(a)所示的流水线中，各段时间不完全相等。其中 S~1~S~2~S~3~,S~5~各段的时间都是 Δt,S~4~的时间是 3Δt ,是其他各段时间的 3 倍。S~4~是该<strong>流水线的瓶颈段</strong>。除了第一个任务外,其余(n-1)个任务必须按瓶颈段的时间间隔 max(Δt~1~ ,Δt~2~,…,Δt~k~)连续流入流水线。图(b)是该流水线的时空图，图中的灰色方格表示相应流水段在这一段时间内是空闲的。</p>\n<p><img src=\"计算机组成原理基础/image-20230714171756533.png\" alt=\"image-20230714171756533\"></p>\n<p><em>实际吞吐率为</em>:</p>\n<script type=\"math/tex; mode=display\">\\mathrm{TP}=\\frac{n}{\\sum\\limits^k\\Delta t_i+(n-1)\\max(\\Delta t_1,\\Delta t_2,\\cdot\\cdot\\cdot,\\Delta t_k)}</script><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>max(Δt~1~ ,Δt~2~,…,Δt~k~)为得出 Δt~1~ ,Δt~2~,…,Δt~k~之间的最大值带入计算</p></blockquote>\n<p>其中 Δt~i~为第 i 段的时间，共有 k 个段。分母中的第一部分是流水线完成第一个任务所用的时间;第二部分是完成其余 n-1 个任务所用的时间。</p>\n<p><em>流水线最大吞吐率为</em>:</p>\n<script type=\"math/tex; mode=display\">TP_{\\max}=\\frac1{\\max(\\Delta t_1,\\Delta t_2,\\cdotp\\cdotp\\cdotp\\Delta t_k)}</script><p>对于上图的例子.最大吞吐率为:</p>\n<script type=\"math/tex; mode=display\">TP_{\\max}=\\frac1{3\\Delta t}</script><p>从上式可以看出，当流水线各段的时间不完全相等时，流水线的最大吞吐率和实际吞吐率由时间最长的那个段决定,这个段就成了整条流水线的瓶颈。这时，瓶颈段一直处于忙碌状态，而其余各段则在许多时间内都是空闲的，硬件使用效率低。</p>\n<p>可以用下面两种方法来消除瓶颈段(将其转换为各段时间相等的流水线)。</p>\n<p><strong>细分瓶颈法</strong></p>\n<p> 把流水线中的瓶颈段切分为几个独立的功能段,从而使流水线各段的处理时间都相等。把瓶颈段 S~4~细分为 3 个子流水线段：S~4-1~，S~4-2~，S~4-3~。这样所产生的流水线各段时间均为 Δt,即每隔 Δt 流出一个结果</p>\n<p><img src=\"计算机组成原理基础/image-20230714175113790.png\" alt=\"image-20230714175113790\"></p>\n<p><strong>重复设置瓶颈段</strong></p>\n<p> 如果无法把瓶颈段再细分，就可以采用重复设置瓶颈段的方法来解决问题。重复设置的段并行工作，在时间上依次错开处理任务。这种方法的缺点是控制逻辑比较复杂，所需要的硬件也增加了。<br>​ 下图给出了把 S~4~,重复设置后的流水线及时空图。这里，从 S~3~到并列的 S~4a~,S~4b~,S~4c~之间需要设置一个数据分配器，它把从 S~3~输出的第一个任务分配给 S~4a~,第二个任务分配给 S~4b~,第三个任务分配给 S~4c~之后按此重复。而在 S~4a~,S~4b~,S~4c~到 S~5~之间需要设置一个数据收集器、依次分时将数据收集到 S~5~中。改进后的流水线能做到每隔 Δt 流出一个结果。</p>\n<p>重复设置瓶颈段示意图 👇：</p>\n<p><img src=\"计算机组成原理基础/image-20230714180014032.png\" alt=\"image-20230714180014032\"></p>\n<p>对应的流水时空图 👇：</p>\n<p><img src=\"计算机组成原理基础/image-20230714180056753.png\" alt=\"image-20230714180056753\"></p>\n<p>上述两种方法都能使改进后的流水线最大吞吐率达到</p>\n<script type=\"math/tex; mode=display\">TP_{max} = \\frac 1{\\Delta t}</script><h4 id=\"加速比\"><a href=\"#加速比\" class=\"headerlink\" title=\"加速比\"></a>加速比</h4><p>完成同样一批任务，不使用流水线所用的时间与使用流水线所用的时间之比，称为流水线的<code>加速比</code>。</p>\n<p>不使用流水线（即顺序执行）所用的时间为 T~s~，使用流水线后所用的时间为 T~k~，则该流水线的加速比为：</p>\n<script type=\"math/tex; mode=display\">S=\\frac{T_s}{T_k}</script><p>若流水线各段执行的时间都相等，则一条 k 段流水线完成 n 个任务所需的时间为$T_k=(k+n-1)\\Delta t$。而不使用流水线，即顺序执行 n 个任务时，所需的时间为$T_k=kn\\Delta t$。将和值代入上式，得实际加速比为</p>\n<script type=\"math/tex; mode=display\">S=\\frac{kn\\Delta t}{(k+n-1)\\Delta t}=\\frac{kn}{(k+n-1)}</script><p>当$n\\to \\infty$时，最大加速比为 S~max~ = k</p>\n<h4 id=\"效率\"><a href=\"#效率\" class=\"headerlink\" title=\"效率\"></a>效率</h4><p> 流水线的设备利用率称为流水线的<code>效率</code>。在时空图上，流水线的效率定义为完成 n 个任务占用的时空区有效面积，与 n 个任务所用的时间及 k 个流水段所围成的时空区总面积之比。因此，流水线的效率包含了时间和空间两个因素。</p>\n<p> n 个任务占用的时空区有效面积就是顺序执行 n 个任务所使用的总时间 T~0~，而 n 个任务所用的时间与 k 个流水段所围成的时空区总面积为 kT~k~，其中 T~k~是流水线完成 n 个任务所使用的总时间，因此计算流水线效率（E)的一般公式为</p>\n<script type=\"math/tex; mode=display\">E=\\frac {n个任务占用的时空区有效面积}{n个任务所用时间与k个流水段所围成的时空区总面积} = \\frac {T_0}{kT_k}</script><p>若流水线的各段执行时间相等，上式中的分子部分是 n 个任务实际占用的有效面积，分母部分是完成 n 个任务所用的时间与 k 个流水段所围成的总面积。因此，通过时空图来计算流水线的效率非常方便。</p>\n<p>流水线的各段执行时间均相等，当连续输入的任务数 n→∞ 时，最高效率为 E=1。</p>\n<h3 id=\"五段式指令流水线\"><a href=\"#五段式指令流水线\" class=\"headerlink\" title=\"==五段式指令流水线==\"></a>==五段式指令流水线==</h3><p><img src=\"计算机组成原理基础/e344585772fa4a45a228018db89afbfc.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"计算机组成原理基础/be46112aa19441c693c6055ca302d0b0.png\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"运算类指令\"><a href=\"#运算类指令\" class=\"headerlink\" title=\"运算类指令\"></a>运算类指令</h4><p>重点关注 运算类指令 各阶段的操作；</p>\n<p><img src=\"计算机组成原理基础/fb1878e37d2743b49542cee416a6beca.png\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"LOAD-指令\"><a href=\"#LOAD-指令\" class=\"headerlink\" title=\"LOAD 指令\"></a>LOAD 指令</h4><p><img src=\"计算机组成原理基础/1e9acc5bcacd44a2adfe4c37240198c2.png\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"STORE-指令\"><a href=\"#STORE-指令\" class=\"headerlink\" title=\"STORE 指令\"></a>STORE 指令</h4><p><img src=\"计算机组成原理基础/47b21adcbcbb40b2b6753e95de074209.png\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"条件转移指令\"><a href=\"#条件转移指令\" class=\"headerlink\" title=\"条件转移指令\"></a>条件转移指令</h4><p><img src=\"计算机组成原理基础/2c2025c254754b94bf97e88d45f388de.png\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"无条件转移指令\"><a href=\"#无条件转移指令\" class=\"headerlink\" title=\"无条件转移指令\"></a>无条件转移指令</h4><p><img src=\"计算机组成原理基础/d416f4cd1a914a61b3f62ee2675cdf5a.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"高级流水技术\"><a href=\"#高级流水技术\" class=\"headerlink\" title=\"高级流水技术\"></a>高级流水技术</h3><p>有两种增加指令级并行的策略：</p>\n<p>一种是多发射技术，它通过采用多个内部功能部件，使流水线功能段能同时处理多条指令，处理及一次可以发射多条指令进入流水线执行</p>\n<p>另一种是超流水线技术，它通过增加流水线级数来使更多的指令同时在流水线中重叠执行</p>\n<h4 id=\"超标量流水线技术\"><a href=\"#超标量流水线技术\" class=\"headerlink\" title=\"超标量流水线技术\"></a>超标量流水线技术</h4><p>每个时钟周期内可并发多条独立指令，即以并行操作方式将两条或多条指令编译并执行，为此需配置多个功能部件。</p>\n<p>超标量计算机不能调整指令的执行顺序，因此通过编译优化技术，把可并行执行的指令搭配起来，挖掘更多的指令并行性，如图 5.20 所示。</p>\n<p><img src=\"计算机组成原理基础/20210716184812.png\" alt=\"找不到图片(Image not found)\"></p>\n<h4 id=\"超长指令字\"><a href=\"#超长指令字\" class=\"headerlink\" title=\"超长指令字\"></a>超长指令字</h4><p>又称<code>静态发射技术</code>，由编译程序挖掘出指令间潜在的并行性，将多条能并行操作的指令组合成一条具有多个操作码字段的超长指令字（可达几百位)，为此需要采用多个处理部件。</p>\n<h4 id=\"超流水线技术\"><a href=\"#超流水线技术\" class=\"headerlink\" title=\"超流水线技术\"></a>超流水线技术</h4><p> 流水线功能划分得越多,时钟周期就越短，指令吞吐率也就越高,因此<strong>超流水线技术是通过提高流水线主频得方式来提升流水线的性能</strong>。但是流水线级数越多，用于流水线寄存器的开销也就越大，因而流水线级数是有限制的，并不是越多越好</p>\n<p><img src=\"计算机组成原理基础/20210716184857.png\" alt=\"找不到图片(Image not found)\"></p>\n<p>超流水线 CPU 在流水线充满后，每个时钟周期还是执行一条指令，CPI=1，但其主频更高</p>\n<p>多发射流水线 CPU 每个时钟周期可以处理多条指令，CPI&lt;1，相对而言，多发射里露水线成本更高，控制更复杂</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">下列给出的处理器类型中理想情况下 CPI 为 1 <span class=\"token property\">的是</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nI、单周期 CPU；II、多周期 CPU ；III、基本流水线 CPU； IV 超标量流水线 CPU\nA、I，II； B、I<span class=\"token punctuation\">,</span>III<span class=\"token punctuation\">;</span> C、II<span class=\"token punctuation\">,</span>IV<span class=\"token punctuation\">;</span> D、III<span class=\"token punctuation\">,</span>IV；\n\n解析：\n理想情况下 CPI（Cycle Per Instruction）为 1 表示每个指令在理想情况下只需要一个时钟周期来执行。根据给出的处理器类型，我们来分析每种类型的 CPU 是否满足 CPI 为 1。\n\nI. 单周期 CPU：在单周期 CPU 中，每条指令都需要相同数量的时钟周期来执行，因此 CPI 可能为 1。因此，I 是一个可能满足 CPI 为 1 的选项。\n\nII. 多周期 CPU：在多周期 CPU 中，不同类型的指令可能需要不同数量的时钟周期来执行，因此 CPI 不一定为 1。因此，II 不满足 CPI 为 1。\n\nIII. 基本流水线 CPU：在基本流水线 CPU 中，指令被划分为多个阶段，并且多个指令可以同时执行。在理想情况下，每个阶段只需要一个时钟周期，因此 CPI 可能为 1。因此，III 是一个可能满足 CPI 为 1 的选项。\n\nIV. 超标量流水线 CPU：在超标量流水线 CPU 中，多个指令可以同时执行，但每个指令可能需要多个时钟周期来执行完整的流水线流程。因此，CPI 不一定为 1。因此，IV 不满足 CPI 为 1。\n\n综上所述，满足 CPI 为 1 的选项是 B、I<span class=\"token punctuation\">,</span>III。因此，答案是 B。其中，单周期 CPU <span class=\"token punctuation\">(</span>I<span class=\"token punctuation\">)</span> 和基本流水线 CPU <span class=\"token punctuation\">(</span>III<span class=\"token punctuation\">)</span> 是理想情况下 CPI 为 1 的处理器类型。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"多处理器的基本概念\"><a href=\"#多处理器的基本概念\" class=\"headerlink\" title=\"多处理器的基本概念\"></a>多处理器的基本概念</h2><h3 id=\"SISD、SIMD、MIMD\"><a href=\"#SISD、SIMD、MIMD\" class=\"headerlink\" title=\"SISD、SIMD、MIMD\"></a>SISD、SIMD、MIMD</h3><p>基于指令流的数量和数据流的数量，计算机体系结构的分类。</p>\n<h4 id=\"单指令流单数据流结构-SISD\"><a href=\"#单指令流单数据流结构-SISD\" class=\"headerlink\" title=\"单指令流单数据流结构(SISD)\"></a>单指令流单数据流结构(SISD)</h4><p><code>(Single Instruction Single Data,SISD)</code></p>\n<p> 传统的串行计算机结构，通常只包含一个处理器和一个存储器。有些使用流水线的方式，所以有时会设置多个功能部件，并采用多模块交叉方式组织存储器。（之前介绍的大多都是 SISD 结构）</p>\n<p><img src=\"计算机组成原理基础/aae30ec640a345f6b2ed7d39bacd049b.png\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"单指令流多数据流结构（SIMD）\"><a href=\"#单指令流多数据流结构（SIMD）\" class=\"headerlink\" title=\"单指令流多数据流结构（SIMD）\"></a>单指令流多数据流结构（SIMD）</h4><p><code>(Single Instruction Multiple Data,SIMD)</code></p>\n<p>一个指令流同时对多个数据流进行处理，一般称为数据级并行技术。通常是由一个指令控制部件、多个处理单元组成。每个处理单元虽然执行的都是同一条指令，但每个单元都有自己的地址寄存器，就有了不同的数据地址。一个顺序应用程序被编译之后，可能按照 SISD 组织并运行与串行硬件上，也可能按 SIMD 组织并运行于并行硬件上。</p>\n<p>for 循环效率高，但 switch 或 case 时效率低。</p>\n<p><img src=\"计算机组成原理基础/a698d9454c6748fd955f7cde99d7b28f.png\" alt=\"在这里插入图片描述\"></p>\n<p>向量处理器也是 SIMD 的变体，是一种实现了直接操作一维数组（向量）指令集的 CPU。</p>\n<p><img src=\"计算机组成原理基础/80bf2635f10b443996352f52aa008128.png\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"多指令流单数据流结构（MISD）\"><a href=\"#多指令流单数据流结构（MISD）\" class=\"headerlink\" title=\"多指令流单数据流结构（MISD）\"></a>多指令流单数据流结构（MISD）</h4><p>同时执行多条指令，处理同一个数据，实际上不存在这样的计算机。</p>\n<h4 id=\"多指令流多数据流结构（MIMD）\"><a href=\"#多指令流多数据流结构（MIMD）\" class=\"headerlink\" title=\"多指令流多数据流结构（MIMD）\"></a>多指令流多数据流结构（MIMD）</h4><p><code>(Multiple Instruction Multiple Data,MIMD)</code></p>\n<p>同时执行多条指令，处理多个不同的数据。分为多计算机系统和多处理器系统。<br><code>多计算机系统</code>：每个计算机节点都具有各自的私有存储器，并且具有独立的主存地址空间，不能通过存取指令来访问不同节点的私有存储器，而要通过消息传递进行数据传送，也称为消息传递 MIMD。</p>\n<p><img src=\"计算机组成原理基础/3b2815de8c7b45fd92480579ae993519.png\" alt=\"在这里插入图片描述\"></p>\n<p><code>多处理器系统</code>：共享存储多处理器（SMP）系统的简称，它具有共享的单一地址空间，通过访存指令来访问系统中的所有存储器，也称共享存储 MIMD</p>\n<p><img src=\"计算机组成原理基础/1c0220e29fdd4af883fbd1823642bdd5.png\" alt=\"在这里插入图片描述\"></p>\n<p>SIMD 和 MIMD 是两种并行计算模式，其中<strong>SIMD 是一种数据级并行模式</strong>，而<strong>MIMD 是一种并行程度更高的线程级并行或线程级以上并行计算模式</strong>。</p>\n<h3 id=\"硬件多线程的基本概念\"><a href=\"#硬件多线程的基本概念\" class=\"headerlink\" title=\"硬件多线程的基本概念\"></a>硬件多线程的基本概念</h3><p>在传统的 CPU 中，线程的切换包含了一系列开销，频繁切换回极大影响系统性能，为了减少这些开销，便诞生了硬件多线程。</p>\n<p>硬件多线程中必须为每个线程提供单独的通用寄存器组、单独的程序计数器等，线程的激活只需要激活选中的寄存器，从而省略了与存储器数据交换的环节，节省了开销。</p>\n<p>三种实现方式：</p>\n<ol>\n<li><p><strong>细粒度多线程</strong></p>\n<p>多个线程之间轮流交叉执行指令，多个线程之间的指令是互不相关的，可以乱序并行执行。该方式下，处理器能在每个时钟周期切换线程。</p>\n</li>\n<li><p><strong>粗粒度多线程</strong></p>\n<p>仅在一个线程出现较大开销的阻塞时，才切换线程，如 Cache 缺失。当发生流水线阻塞的时候，必须清除被阻塞的流水线，新线程的指令开始执行前需要重载流水线，开销较上一种较大。</p>\n</li>\n<li><p><strong>同时多线程（SMT）</strong></p>\n<p>SMT 是上述两种多线程技术的变体。它是实现指令级并行的同时，实现线程级的并行，即在同一时钟周期内，发射不同线程中的多条指令执行。</p>\n<p>Intel 处理器中的超线程即使 SMT，在一个单处理器或的那个核中设置了两套线程状态部件，共享高速缓存和功能部件。</p>\n</li>\n</ol>\n<p><img src=\"计算机组成原理基础/1f193862d63442a9a475cf98a07586fa.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"计算机组成原理基础/f45ea43a584f4654aa368ce0be701017.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"多核处理器的基本概念\"><a href=\"#多核处理器的基本概念\" class=\"headerlink\" title=\"多核处理器的基本概念\"></a>多核处理器的基本概念</h3><p><strong>将多个处理单元集成到单个 CPU 中，每个处理单元称为一个核（core）。</strong>每个核可以有自己的 Cache，也可以共享一个 Cache。所有核一般都是对称的，并且共享主存，因此<code>多核属于共享存储的对称多处理器</code>。</p>\n<p>在多核计算机系统中，若要充分发挥硬件的性能，必须采用多线程执行，使每个核在同一时刻都有线程在执行，这是真正的并行执行。</p>\n<h3 id=\"共享内存多处理器的基本概念\"><a href=\"#共享内存多处理器的基本概念\" class=\"headerlink\" title=\"共享内存多处理器的基本概念\"></a>共享内存多处理器的基本概念</h3><p><strong>具有共享的单一物理地址空间的多处理器被称为共享内存多处理器（SMP）</strong>。处理器通过存储器中的共享变量相互通信，所有处理器都能通过存取指令访存任何存储器的位置。（即使这些系统共享同一个物理地址空间，它们仍然可以在自己的虚拟地址空间中单独地运行程序）</p>\n<p>单一地址空间的多处理器分类：</p>\n<ol>\n<li><p><code>统一存储访问（UMA）多处理器</code>：根据处理器与共享存储器之间的连接方式，分为基于总线、基于交叉开关网络和基于多级交换网络连接等几种处理器。（每个处理器对所有存储单元的访问时间都是大致相同的）</p>\n</li>\n<li><p><code>非统一存储访问（NUMA）多处理器</code>：处理器中不带高速缓存时，被称为 NC-NUMA；处理器中带有一致性高速缓存时，被称为 CC-NUMA，（某些访问请求要比其他的快）</p>\n</li>\n</ol>\n<h1 id=\"总线\"><a href=\"#总线\" class=\"headerlink\" title=\"总线\"></a>总线</h1><h2 id=\"总线概述\"><a href=\"#总线概述\" class=\"headerlink\" title=\"总线概述\"></a>总线概述</h2><p> 随着计算机的发展和应用领域的不断扩大，IO 设备的种类和数量也越来越多。为了更好地解决 IO 设备和主机之间连接的灵活性问题，计算机的结构从分散连接发展为总线连接。为了进一步简化设计，又提出了各类总线标准。</p>\n<h3 id=\"总线基本概念\"><a href=\"#总线基本概念\" class=\"headerlink\" title=\"总线基本概念\"></a>总线基本概念</h3><h4 id=\"总线的定义\"><a href=\"#总线的定义\" class=\"headerlink\" title=\"总线的定义\"></a>总线的定义</h4><p>总线是一组能为多个部件分时共享的公共信息传送线路。<code>分时</code>和<code>共享</code>是总线的两个特点。</p>\n<p><code>分时</code>是指同一时刻只允许有一个部件向总线发送信息，若系统中有多个部件，则它们只能分时地向总线发送信息。</p>\n<p><code>共享</code>是指总线上可以挂接多个部件，各个部件之间互相交换的信息都可通过这组线路分时共享。在某一时刻只允许有一个部件向总线发送信息，但多个部件可同时从总线上接收相同的信息。</p>\n<h4 id=\"总线设备\"><a href=\"#总线设备\" class=\"headerlink\" title=\"总线设备\"></a>总线设备</h4><p>总线上所连接的设备，按其对总线有无控制功能可分为<code>主设备</code>和<code>从设备</code>两种。</p>\n<p><code>主设备</code> ：总线的主设备是指获得总线控制权的设备。</p>\n<p><code>从设备</code> ：总线的从设备是指被主设备访问的设备，它只能响应从主设备发来的各种总线命令。</p>\n<h4 id=\"总线特性\"><a href=\"#总线特性\" class=\"headerlink\" title=\"总线特性\"></a>总线特性</h4><p>总线特性是指<code>机械特性</code>（尺寸、形状)、 <code>电气特性</code>（传输方向和有效的电平范围)、 <code>功能特性</code>（每根传输线的功能）和 <code>时间特性</code> （信号和时序的关系)。</p>\n<h4 id=\"总线的猝发传输方式\"><a href=\"#总线的猝发传输方式\" class=\"headerlink\" title=\"==总线的猝发传输方式==\"></a>==总线的猝发传输方式==</h4><p>在一个总线周期内传输存储地址连续的多个数据字的总线传输方式，称为<code>猝发传送</code> 。</p>\n<ul>\n<li>又称<code>突发传输</code></li>\n<li>传送一个起始地址之后，可以连续读取连续的地址的内容</li>\n<li>没有突发传输的话，后面的内容每一次都要传送地址</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">1.【2012统考真题】某同步总线的时钟频率为100MHz，宽度为32位，地址/数据线复用，每传输一个地址或数据占用一个时钟周期。若该总线支持突发（猝发）传输方式，则一次“主存写”总线事务传输128位数据所需要的时间至少是（）.\nA. 20ns\tB.40ns\tC.50ns\tD. 80ns\n\n解析\n3.C\n\n由于总线频率为100MHz，因此时钟周期为 10ns。总线位宽与存储字长都是32位，因此每个时钟周期可传送一个32位存储字。猝发式发送可以连续传送地址连续的数据，因此总传送时间为<span class=\"token punctuation\">:</span>传送地址10ns，传送128位数据40ns，共需50ns。\n\n\n\n2.某支持猝发传输的同步总线的时钟频率为200MHz<span class=\"token punctuation\">,</span>宽度为32位<span class=\"token punctuation\">,</span>地址和数据线复用<span class=\"token punctuation\">,</span>每个时钟周期纯属一个地址或数据<span class=\"token punctuation\">,</span>如果一次存储器读总线事务传输用的时间为25ns<span class=\"token punctuation\">,</span>则本次传输的有效数据位数是<span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span>\nA. 32位\tB. 160位  C. 128位\tD. 254位\n\n<span class=\"token property\">解析</span><span class=\"token punctuation\">:</span>\n其时钟频率为200MHz<span class=\"token punctuation\">,</span>则执行一个时钟周期的时间为1/200MHz<span class=\"token punctuation\">,</span>则在25ns内经过了25ns/1/<span class=\"token function\">200MHz</span><span class=\"token punctuation\">(</span>即25ns×200MHz<span class=\"token punctuation\">)</span>= 5周期\n由于其支持猝发传输<span class=\"token punctuation\">,</span>则第一个周期用来送地址<span class=\"token punctuation\">,</span>其余4个周期传送数据<span class=\"token punctuation\">,</span>数据宽度为32位<span class=\"token punctuation\">,</span>则这5个周期中传送数据的位数为32×4=128位<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"总线的分类\"><a href=\"#总线的分类\" class=\"headerlink\" title=\"总线的分类\"></a>总线的分类</h3><p>计算机系统中的总线，按功能划分为以下 4 类。</p>\n<h4 id=\"片内总线\"><a href=\"#片内总线\" class=\"headerlink\" title=\"片内总线\"></a>片内总线</h4><p>片内总线是芯片内部的总线，它是 CPU 芯片内部寄存器与寄存器之间、寄存器与 ALU 之间的公共连接线。</p>\n<h4 id=\"系统总线\"><a href=\"#系统总线\" class=\"headerlink\" title=\"系统总线\"></a>系统总线</h4><p>系统总线是计算机系统内各功能部件(CPU、主存、I/O 接口)之间相互连接的总线。按系统总线传输信息内容的不同，又可分为 3 类：<code>数据总线</code>、<code>地址总线</code>和<code>控制总线</code>。</p>\n<ol>\n<li><p><code>数据总线</code> 用来传输各功能部件之间的数据信息，它是<code>双向传输总线</code>，其位数与<code>机器字长</code>、<code>存储字长</code>有关。</p>\n</li>\n<li><p><code>地址总线</code> 用来指出数据总线上的源数据或目的数据所在的 <code>主存单元</code> 或 <code>I/O端口的地址</code> ，它是<code>单向传输总线</code>，<strong>地址总线的位数与主存地址空间的大小有关。(存储器地址寄存器MAR)</strong></p>\n</li>\n<li><p><code>控制总线</code> 传输的是控制信息，包括 CPU 送出的控制命令和主存（或外设）返回 CPU 的反馈信号。</p>\n</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意区分数据通路和数据总线:各个功能部件通过数据总线连接形成的数据传输路径称为数据通路。数据通路表示的是数据流经的路径，而 <code>数据总线</code>是承载的媒介。</p></blockquote>\n<h4 id=\"I-O总线\"><a href=\"#I-O总线\" class=\"headerlink\" title=\"I/O总线\"></a>I/O总线</h4><p>I/O总线主要用于连接中低速的I/O设备,通过I/O接口与系统总线相连接,目的是将低速设备与高速总线分离,以提升系统性能,常见的有USB、PCI总线</p>\n<h4 id=\"通信总线\"><a href=\"#通信总线\" class=\"headerlink\" title=\"通信总线\"></a>通信总线</h4><p><strong>通信总线是在计算机系统之间或计算机系统与其他系统（如远程通信设备、测试设备）之间传送信息的总线，通信总线也称外部总线。</strong></p>\n<p>此外，按时序控制方式可将总线划分为 <code>同步总线</code> 和 <code>异步总线</code> ，还可按数据传输格式将总线划分为 <code>并行总线</code> 和 <code>串行总线</code> 。</p>\n<h3 id=\"系统总线的结构\"><a href=\"#系统总线的结构\" class=\"headerlink\" title=\"系统总线的结构\"></a>系统总线的结构</h3><p>总线结构通常分为<code>单总线结构</code>、<code>双总线结构</code>和<code>三总线结构</code>等。</p>\n<h4 id=\"单总线结构\"><a href=\"#单总线结构\" class=\"headerlink\" title=\"单总线结构\"></a>单总线结构</h4><p> 单总线结构将 CPU、主存、IO 设备（通过 IO 接口）都挂在<code>一组</code>总线上，允许 IO 设备之间、IO 设备与主存之间直接交换信息，如图 6.1 所示。CPU 与主存、CPU 与外设之间可直接进行信息交换，而无须经过中间设备的干预。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意，单总线并不是指只有一根信号线，系统总线按传送信息的不同可细分为地址总线、数据总线和控制总线。</p></blockquote>\n<p>优点:结构简单，成本低，易于接入新的设备;缺点:带宽低、负载重，多个部件只能争用唯一的总线，且不支持并发传送操作。</p>\n<p><img src=\"计算机组成原理基础/20211002141738.png\" alt=\"找不到图片(Image not found)\"></p>\n<h4 id=\"双总线结构\"><a href=\"#双总线结构\" class=\"headerlink\" title=\"双总线结构\"></a>双总线结构</h4><p> 双总线结构有两条总线:一条是 <code>主存总线</code>，用于在 CPU、主存和通道之间传送数据;另一条是<code>IO总线</code> ，用于在多个外部设备与通道之间传送数据，如图 6.2 所示。</p>\n<p>优点:将低速 IO 设备从单总线上分离出来，实现了存储器总线和 IO 总线分离。缺点:需要增加通道等硬件设备。</p>\n<h4 id=\"三总线结构\"><a href=\"#三总线结构\" class=\"headerlink\" title=\"三总线结构\"></a>三总线结构</h4><p> 三总线结构是在计算机系统各部件之间采用 3 条各自独立的总线来构成信息通路，这 3 条总线分别为<code>主存总线</code>、 <code>IO总线</code> 和 <code>直接内存访问(Direct Memory Access,DMA)总线</code>，如图 6.3 所示。</p>\n<p> 主存总线用于在 CPU 和内存之间传送地址、数据和控制信息。IO 总线用于在 CPU 和各类外设之间通信。DMA 总线用于在内存和高速外设之间直接传送数据。</p>\n<p>优点:提高了 IO 设备的性能，使其更快地响应命令，提高系统吞吐量。缺点:系统工作效率较低。</p>\n<p><img src=\"计算机组成原理基础/20210716190047.png\" alt=\"找不到图片(Image not found)\"></p>\n<h3 id=\"总线的性能指标\"><a href=\"#总线的性能指标\" class=\"headerlink\" title=\"==总线的性能指标==\"></a>==总线的性能指标==</h3><ol>\n<li><p>总线的<strong>传输周期</strong> 。指一次总线操作所需的时间（包括申请阶段、寻址阶段、传输阶段和结束阶段)，简称<code>总线周期</code>。总线传输周期通常由若干总线时钟周期构成。</p>\n</li>\n<li><p>总线<strong>时钟周期</strong> 。即机器的时钟周期。计算机有一个统一的时钟，以控制整个计算机的各个部件，总线也要受此时钟的控制。</p>\n</li>\n<li><p>总线的<strong>工作频率</strong> 。总线上各种操作的频率，为<code>总线周期的倒数</code>。实际上指<strong>1 秒内传送几次数据</strong>。若总线周期=N 个时钟周期，则总线的工作频率=时钟频率/N。</p>\n</li>\n<li><p>总线的<strong>时钟频率</strong> 。即机器的时钟频率，它为时钟周期的倒数。</p>\n</li>\n<li><p>总线<strong>宽度</strong> 。又称总线位宽，它是总线上同时能够传输的数据位数，通常指<code>数据总线的根数</code>，如 32 根称为 32 位总线。</p>\n</li>\n<li><p>总线<strong>带宽</strong> 。可理解为总线的 数据传输率数据传输率 ，即单位时间内总线上可传输数据的位数，通常用每秒传送信息的字节数来衡量，单位可用字节/秒（B/s）表示。总线带宽=总线工作频率 ×(总线宽度/8)。</p>\n</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意:总线带宽和总线宽度应加以区别。</p></blockquote>\n<ol>\n<li><p>总线<strong>复用</strong> 。总线复用是指一种信号线在不同的时间传输不同的信息，因此可以使用较少的线传输更多的信息，从而节省空间和成本。</p>\n</li>\n<li><p>信号<strong>线数</strong> 。 <code>地址总线</code> 、 <code>数据总线</code> 和 <code>控制总线</code> 3 种总线数的总和称为信号线数。其中，总线的最主要性能指标为总线宽度、总线（工作）频率、总线带宽，总线带宽是指总线本身所能达到的最高传输速率，它是衡量总线性能的重要指标。</p>\n</li>\n</ol>\n<p>三者关系:<strong>总线带宽=总线宽度 × 总线频率。</strong></p>\n<p>例如，总线工作频率为 22MHz，总线宽度为 16 位，则总线带宽=22×(16/8)=44MB/s。</p>\n<h3 id=\"总线仲裁\"><a href=\"#总线仲裁\" class=\"headerlink\" title=\"*总线仲裁\"></a>*总线仲裁</h3><p>为解决多个主设备同时竞争总线控制权的问题，应当采用总线仲裁部件，以某种方式选择一个主设备优先获得总线控制权。只有获得了总线控制权的设备，才能开始传送数据。</p>\n<p>总线仲裁方式按其仲裁控制机构的设置可分为<code>集中仲裁方式</code>和<code>分布仲裁方式</code>两种。</p>\n<h4 id=\"集中仲裁方式\"><a href=\"#集中仲裁方式\" class=\"headerlink\" title=\"集中仲裁方式\"></a>集中仲裁方式</h4><p>总线控制逻辑基本上集中于一个设备（如 CPU)中。将所有的总线请求集中起来，利用一个特定的裁决算法进行裁决，称为集中仲裁方式。集中仲裁方式有链式查询方式、计数器定时查询方式和独立请求方式三种。</p>\n<h5 id=\"链式查询方式\"><a href=\"#链式查询方式\" class=\"headerlink\" title=\"链式查询方式\"></a>链式查询方式</h5><p>链式查询方式如图 6.4 所示。总线上所有的部件共用一根总线请求线，当有部件请求使用总线时，需经此线发总线请求信号到总线控制器。由总线控制器检查总线是否忙，若总线不忙，则立即发总线响应信号，经总线响应线 BG 串行地从一个部件传送到下一个部件，依次查询。若响应信号到达的部件无总线请求，则该信号立即传送到下一个部件;若响应信号到达的部件有总线请求，则信号被截住，不再传下去。</p>\n<p><img src=\"计算机组成原理基础/20210716190533.png\" alt=\"找不到图片(Image not found)\"></p>\n<p>在链式查询中，部件离总线控制器越近，其优先级越高;部件离总线控制器越远，其优先级越低。</p>\n<p>优点:链式查询方式优先级固定。此外，只需很少几根控制线就能按一定优先次序实现总线控制，结构简单，扩充容易。</p>\n<p>缺点:对硬件电路的故障敏感，且优先级不能改变。当优先级高的部件频繁请求使用总线时，会使优先级较低的部件长期不能使用总线。</p>\n<h5 id=\"计数器定时查询方式\"><a href=\"#计数器定时查询方式\" class=\"headerlink\" title=\"计数器定时查询方式\"></a>计数器定时查询方式</h5><p>计数器定时查询方式如图 6.5 所示。它采用一个计数器控制总线使用权，相对链式查询方式多了一组设备地址线，少了一根总线响应线 BG。它仍共用一根总线请求线，当总线控制器收到总线请求信号并判断总线空闲时，计数器开始计数，计数值通过设备地址线发向各个部件。当地址线上的计数值与请求使用总线设备的地址一致时，该设备获得总线控制权，同时中止计数器的计数及查询。</p>\n<p><img src=\"计算机组成原理基础/20210716190741.png\" alt=\"找不到图片(Image not found)\"></p>\n<p>优点:计数可从“0”开始，此时一旦设备的优先次序被固定，设备的优先级就按 0,1,⋯,n 的顺序降序排列，而且固定不变;计数也可从上一次的终点开始，即采用一种循环方法，此时设备使用总线的优先级相等;计数器的初值还可由程序设置，因此优先次序可以改变，且这种方式对电路的故障没有链式查询方式敏感。</p>\n<p>缺点:增加了控制线数（若设备有 n 个，则大致需要 ⌈log~2~n⌉+2 条控制线)，控制也比相对链式查询要复杂。</p>\n<h5 id=\"独立请求方式\"><a href=\"#独立请求方式\" class=\"headerlink\" title=\"独立请求方式\"></a>独立请求方式</h5><p>独立请求方式如图 6.6 所示。每个设备均有一对总线请求线 BR,和总线允许线 BG;。当总线上的部件需要使用总线时，经各自的总线请求线发送总线请求信号，在总线控制器中排队，当总线控制器按一定的优先次序决定批准某个部件的请求时，给该部件发送总线响应信号，该部件接到此信号后就获得了总线使用权，开始传送数据。</p>\n<p><img src=\"计算机组成原理基础/20210716191554.png\" alt=\"找不到图片(Image not found)\"></p>\n<p>优点:响应速度快，总线允许信号 BG 直接从控制器发送到有关设备，而不必在设备间传递或查询,而且对优先次序的控制相当灵活。</p>\n<p>缺点:控制线数量多（设备有 n 个，需要 2n+1 条控制线，其中加的那条控制线为 BS 线，基作用是让设备向总线控制部件反馈已使用完总线)，总线控制逻辑更复杂。<br>为方便记忆，下面归纳了 3 种集中仲裁方式的区别与联系（假设设备有 n 个)，如表 6.1 所示。</p>\n<p><img src=\"计算机组成原理基础/20210716191643.png\" alt=\"找不到图片(Image not found)\"></p>\n<h4 id=\"分布仲裁方式\"><a href=\"#分布仲裁方式\" class=\"headerlink\" title=\"分布仲裁方式\"></a>分布仲裁方式</h4><p>分布仲裁方式不需要中央仲裁器，每个潜在的主模块都有自己的仲裁号和仲裁器。当它们有总线请求时，就会把它们各自唯一的仲裁号发送到共享的仲裁总线上，每个仲裁器将从仲裁总线上得到的仲裁号与自己的仲裁号进行比较。若仲裁总线上的仲裁号优先级高，则它的总线请求不予响应，并撤销它的仲裁号。最后，获胜者的仲裁号保留在仲裁总线上。</p>\n<h3 id=\"常见的总线标准\"><a href=\"#常见的总线标准\" class=\"headerlink\" title=\"常见的总线标准\"></a>常见的总线标准</h3><p>目前，典型的总线标准有<code>ISA</code>、<code>EISA</code>、<code>VESA</code>、<code>PCI</code>、<code>PCI-Express</code>、<code>AGP</code>、<code>RS-232C</code>、<code>USB</code>等。它们的主要区别是总线宽度、带宽、时钟频率、寻址能力、是否支持突发传送等。</p>\n<ol>\n<li><p><code>ISA</code>。ISA (Industry Standard Architecture，工业标准体系结构）总线是最早出现的微型计算机的<strong>系统总线</strong>，应用在 IBM 的 AT 机上。</p>\n</li>\n<li><p><code>EISA</code>。EISA (Extended Industry Standard Architecture，扩展的 ISA）总线是为配合 32 位 CPU 而设计的<strong>扩展总线</strong>，EISA 对 ISA 完全兼容。</p>\n</li>\n<li><p><code>VESA</code>。VESA (Video Electronics Standards Association，视频电子标准协会）总线是一个 32 位标准的<strong>计算机局部总线</strong>，是针对多媒体 PC 要求高速传送活动图像的大量数据应运而生的。</p>\n</li>\n<li><p><code>PCI</code>。PCI (Peripheral Component Interconnect，外部设备互连）总线是高性能的 32 位或 64 位总线，是专为高度集成的外围部件、扩充插板和处理器/存储器系统设计的互连机制。目前常用的 PCI 适配器有显卡、声卡、网卡等。PCI 总线支持即插即用。PCI 总线是一个与处理器时钟频率无关的高速外围总线，属于<strong>局部总线</strong>。PCI 总线可通过桥连接实现多层 PCI 总线。</p>\n</li>\n<li><p><code>PCI-Express (PCI-E)</code>。PCI-Express 是最新的总线和接口标准，它将全面取代现行的 PCI 和 AGP，最终统一总线标准。</p>\n</li>\n<li><p><code>AGP</code>。AGP (Accelerated Graphics Port，加速图形接口）是一种视频接口标准，专用于连接主存和图形存储器，属于<strong>局部总线</strong>。AGP 技术为传输视频和三维图形数据提供了切实可行的解决方案。</p>\n</li>\n<li><p><code>RS-232C</code>。RS-232C (Recommended Standard，RS）是由美国电子工业协会（EIA）推荐的一种<strong>串行通信总线</strong>，是应用于串行二进制交换的数据终端设备（DTE）和数据通信设备(DCE）之间的标准接口。</p>\n</li>\n<li><p><code>USB</code>。USB (Universal Serial Bus，通用串行总线）是一种连接外部设备的 IO 总线，属于<strong>设备总线</strong>。具有即插即用、热插拔等优点，有很强的连接能力。</p>\n</li>\n<li><p><code>PCMCIA</code>。PCMCIA (Personal Computer Memory Card International Association）是广泛应用于笔记本电脑的一种接口标准，是一个用于扩展功能的小型插槽。PCMCIA 具有即插即用功能。</p>\n</li>\n<li><p><code>IDE</code>。IDE (Integrated Drive Electronics，集成设备电路)，更准确地称为 ATA，是一种 IDE 接口磁盘驱动器接口类型，硬盘和光驱通过 IDE 接口与主板连接。</p>\n</li>\n<li><p><code>SCSI</code>。SCSI (Small Computer System Interface，小型计算机系统接口）是一种用于计算机和智能设备之间（硬盘、软驱、光驱、打印机等）系统级接口的独立处理器标准。SCSI 是一种智能的通用接口标准。</p>\n</li>\n<li><p><code>SATA</code>。SATA (Serial Advanced Technology Attachment，串行高级技术附件）是一种基于行业标准的串行硬件驱动器接口，是由 Intel、IBM、Dell、APT、Maxtor 和 Seagate 公司共同提出的硬盘接口规范。</p>\n</li>\n</ol>\n<h2 id=\"总线事务和定时\"><a href=\"#总线事务和定时\" class=\"headerlink\" title=\"总线事务和定时\"></a>总线事务和定时</h2><h3 id=\"总线事务\"><a href=\"#总线事务\" class=\"headerlink\" title=\"总线事务\"></a>总线事务</h3><p> 从请求总线到完成总线使用的操作序列称为总线事务,它是在一个总线周期中发生的一系列活动。典型的总线事务包括<code>请求操作</code>、<code>仲裁操作</code>、<code>地址传输</code>、<code>数据传输</code>和<code>总线释放</code></p>\n<ol>\n<li><code>请求阶段</code>。 主设备(CPU 或 DMA)发出总线传输请求,并且获得总线控制权</li>\n<li><p><code>仲裁阶段</code>。 总线冲裁机构决定将下一个传输周期的总线使用权授予某个申请者</p>\n</li>\n<li><p><code>寻址阶段</code> 。取得使用权的主模块通过总线发出本次要访问的从模块（或从设备）的地址及有关命令，启动参与本次传输的从模块。</p>\n</li>\n<li><p><code>传输阶段</code> 。主模块和从模块进行数据交换，可单向或双向进行数据传送。</p>\n</li>\n<li><p><code>结束阶段</code>。主模块的有关信息均从系统总线上撤除，让出总线使用权。</p>\n</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>突发(猝发)传送方式</strong>能够进行连续成组数据的传送,其寻址阶段发送的是连续数据单元的首地址,在传输阶段传送多个连续单元的数据,每个时钟周期可以传送一个字长的信息,但是不释放总线,直到一组数据全部传送完毕后,再释放总线</p></blockquote>\n<h3 id=\"同步定时方式\"><a href=\"#同步定时方式\" class=\"headerlink\" title=\"同步定时方式\"></a>同步定时方式</h3><p> 所谓同步定时方式，是指系统采用一个统一的时钟信号来协调发送和接收双方的传送定时关系。时钟产生相等的时间间隔，每个间隔构成一个总线周期。在一个总线周期中，发送方和接收方可以进行一次数据传送。因为采用统一的时钟，每个部件或设备发送或接收信息都在固定的总线传送周期中，一个总线的传送周期结束，下一个总线的传送周期开始。</p>\n<p> 优点:传送速度快，具有较高的传输速率;总线控制逻辑简单。</p>\n<p> 缺点:主从设备属于强制性同步;不能及时进行数据通信的有效性检验，可靠性较差。</p>\n<p> 同步通信适用于总线长度较短及总线所接部件的存取时间比较接近的系统。</p>\n<h3 id=\"异步定时方式\"><a href=\"#异步定时方式\" class=\"headerlink\" title=\"异步定时方式\"></a>异步定时方式</h3><p> 在异步定时方式中，没有统一的时钟，也没有固定的时间间隔，完全依靠传送双方相互制约的“握手”信号来实现定时控制。通常，把交换信息的两个部件或设备分为主设备和从设备，主设备提出交换信息的“请求”信号，经接口传送到从设备;从设备接到主设备的请求后，通过接口向主设备发出“回答”信号。</p>\n<p> 优点:总线周期长度可变，能保证<strong>两个工作速度相差很大的部件或设备之间可靠地进行信息交换，自动适应时间的配合</strong>。</p>\n<p> 缺点:比同步控制方式稍复杂一些，速度比同步定时方式慢。</p>\n<p>根据“请求”和“回答”信号的撤销是否互锁，异步定时方式又分为以下 3 种类型。</p>\n<ol>\n<li><code>不互锁方式</code> 。主设备发出“请求”信号后，不必等到接到从设备的“回答”信号，而是经过一段时间便撤销“请求”信号。而从设备在接到“请求”信号后，发出“回答”信号，并经过一段时间后自动撤销“回答”信号。双方不存在互锁关系，如图 6.7(a)所示。</li>\n</ol>\n<p>2) <code>半互锁方式</code>。主设备发出“请求”信号后，必须在接到从设备的“回答”信号后，才撤销“请求”信号，有互锁的关系。而从设备在接到“请求”信号后，发出“回答”信号，但不必等待获知主设备的“请求”信号已经撤销，而是隔一段时间后自动撤销“回答”信号，不存在互锁关系。半互锁方式如图 6.7(b)所示。</p>\n<p>3) <code>全互锁方式</code> 。主设备发出“请求”信号后，必须在从设备“回答”后才撤销“请求”信号;从设备发出“回答”信号后，必须在获知主设备“请求”信号已撤销后，再撤销其“回答”信号。双方存在互锁关系，如图 6.7(c)所示。</p>\n<p><img src=\"计算机组成原理基础/20210716191950.png\" alt=\"找不到图片(Image not found)\"></p>\n<p><strong>思考</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>🤔<strong>引入总线结构有什么好处?</strong></p>\n<p>① 简化了系统结构，便于系统设计制造。</p>\n<p>② 大大减少了连线数目，便于布线，减小体积，提高系统的可靠性。</p>\n<p>③ 便于接口设计，所有与总线连接的设备均采用类似的接口。</p>\n<p>④ 便于系统的扩充、更新与灵活配置，易于实现系统的模块化。</p>\n<p>⑤ 便于设备的软件设计，所有接口的软件对不同的接口地址进行操作。</p>\n<p>⑥ 便于故障诊断和维修，同时也能降低成本。</p></blockquote>\n<h1 id=\"输入输出系统\"><a href=\"#输入输出系统\" class=\"headerlink\" title=\"输入输出系统\"></a>输入输出系统</h1><h2 id=\"I-O-系统基本概念\"><a href=\"#I-O-系统基本概念\" class=\"headerlink\" title=\"*I/O 系统基本概念\"></a>*I/O 系统基本概念</h2><h3 id=\"输入-输出系统\"><a href=\"#输入-输出系统\" class=\"headerlink\" title=\"输入/输出系统\"></a>输入/输出系统</h3><p>输入/输出是以主机为中心而言的，将信息从外部设备传送到主机称为输入，反之称为输出。输入/输出系统解决的主要问题是对各种形式的信息进行输入和输出的控制。</p>\n<p>I/O 系统中的几个基本概念如下:</p>\n<ol>\n<li><p><code>外部设备</code> 。包括输入/输出设备及通过输入/输出接口才能访问的外存储设备。</p>\n</li>\n<li><p><code>接口接口</code>。在各个外设与主机之间传输数据时进行各种协调工作的逻辑部件。协调包括传输过程中速度的匹配、电平和格式转换等。</p>\n</li>\n<li><p><code>输入设备</code> 。用于向计算机系统输入命令和文本、数据等信息的部件。键盘和鼠标是最基本的输入设备。</p>\n</li>\n<li><p><code>输出设备</code> 。用于将计算机系统中的信息输出到计算机外部进行显示、交换等的部件。显示器和打印机是最基本的输出设备。</p>\n</li>\n<li><p><code>外存设备</code>。指除计算机内存及 CPU 缓存等外的存储器。硬磁盘、光盘等是最基本的外存设备。</p>\n</li>\n</ol>\n<p>一般来说，I/O 系统由 I/O 软件和 I/O 硬件两部分构成:</p>\n<ol>\n<li><p><code>I/O 软件</code> 。包括驱动程序、用户程序、管理程序、升级补丁等。通常采用 I/O 指令和通道指令实现 CPU 与 I/O 设备的信息交换。</p>\n</li>\n<li><p><code>I/O 硬件</code>。包括外部设备、设备控制器和接口、I/O 总线等。通过设备控制器来控制 I/O 设备的具体动作;通过 I/O 接口与主机（总线）相连。</p>\n</li>\n</ol>\n<h3 id=\"I-O-控制方式\"><a href=\"#I-O-控制方式\" class=\"headerlink\" title=\"I/O 控制方式\"></a>I/O 控制方式</h3><p>在输入/输出系统中，经常需要进行大量的数据传输，而传输过程中有各种不同的 I/O 控制方式，基本的控制方式主要有以下 4 种:</p>\n<ol>\n<li><p><code>程序查询方式</code>。由 CPU 通过程序不断查询 I/O 设备是否已做好准备，从而控制 I/O 设备与主机交换信息。</p>\n</li>\n<li><p><code>程序中断方式</code> 。只在 I/O 设备准备就绪并向 CPU 发出中断请求时才予以响应。</p>\n</li>\n<li><p><code>DMA方式</code> 。主存和 I/O 设备之间有一条直接数据通路，当主存和 I/O 设备交换信息时，无须调用中断服务程序。</p>\n</li>\n<li><p><code>通道方式</code> 。在系统中设有通道控制部件，每个通道都挂接若干外设，主机在执行 I/O 命令时，只需启动有关通道，通道将执行通道程序，从而完成 I/O 操作。</p>\n</li>\n</ol>\n<p>其中，方式 1 和方式 2 主要用于数据传输率较低的外部设备，方式 3 和方式 4 主要用于数据传输率较高的设备。</p>\n<h3 id=\"外部设备\"><a href=\"#外部设备\" class=\"headerlink\" title=\"外部设备\"></a>外部设备</h3><p>外部设备也称外围设备，是除主机外的能直接或间接与计算机交换信息的装置。最基本的外部设备主要有键盘、鼠标、显示器、打印机、磁盘存储器和光盘存储器等。</p>\n<h4 id=\"输入设备\"><a href=\"#输入设备\" class=\"headerlink\" title=\"输入设备\"></a>输入设备</h4><h5 id=\"键盘\"><a href=\"#键盘\" class=\"headerlink\" title=\"键盘\"></a>键盘</h5><p>键盘是最常用的输入设备，通过它可发出命令或输入数据。</p>\n<p>键盘通常以矩阵的形式排列按键，每个键用符号标明其含义和作用。每个键相当于一个开关，按下键时，电信号连通;松开键时，弹簧弹起键，电信号断开。</p>\n<p>键盘输入信息可分为 3 个步骤:① 查出按下的是哪个键;② 将该键翻译成能被主机接收的编码，如 ASCII 码;③ 将编码传送给主机。</p>\n<h5 id=\"鼠标\"><a href=\"#鼠标\" class=\"headerlink\" title=\"鼠标\"></a>鼠标</h5><p>鼠标是常用的定位输入设备，它把用户的操作与计算机屏幕上的位置信息相联系。常用的鼠标有 机械式机械式 和 光电式光电式 两种。</p>\n<p>工作原理:鼠标在平面上移动时，其底部传感器把运动的方向和距离检测出来，从而控制光标做相应的运动。</p>\n<h4 id=\"输出设备\"><a href=\"#输出设备\" class=\"headerlink\" title=\"输出设备\"></a>输出设备</h4><h5 id=\"显示器\"><a href=\"#显示器\" class=\"headerlink\" title=\"显示器\"></a>显示器</h5><p>显示设备种类繁多，按显示设备所用的显示器件分类，有阴极射线管（CRT）显示器、液晶显示器（LCD）、发光二极管（LED）显示器等。按所显示的信息内容分类，有字符显示器、图形显示器和图像显示器 3 大类。显示器属于用点阵方式运行的设备，有以下主要参数。</p>\n<ol>\n<li><p><code>屏幕大小</code> :以对角线长度表示，常用的有 12 ～ 29 英寸等。</p>\n</li>\n<li><p><code>分辨率</code> :所能表示的像素个数，屏幕上的每个光点就是一个像素，以宽和高的像素数的乘积表示，如 800×600、1024×768 和 1280×1024 等。</p>\n</li>\n<li><p><code>灰度级</code> :灰度级是指黑白显示器中所显示的像素点的亮暗差别，在彩色显示器中则表现为颜色的不同，灰度级越多，图像层次越清楚、逼真，典型的有 8 位（256 级）、16 位等。</p>\n</li>\n<li><p><code>刷新</code> :光点只能保持极短的时间便会消失，为此必须在光点消失之前再重新扫描显示一遍，这个过程称为刷新。</p>\n</li>\n<li><p><code>刷新频率</code> :指单位时间内扫描整个屏幕内容的次数。按照人的视觉生理，刷新频率大于 30Hz 时才不会感到闪烁，通常显示器的刷新频率为 60 ～ 120Hz。</p>\n</li>\n<li><p><code>显示存储器(VRAM)</code>:也称刷新存储器，为了不断提高刷新图像的信号，必须把一帧图像信息存储在刷新存储器中。其存储容量由图像分辨率和灰度级决定，分辨率越高，灰度级越多，刷新存储器容量越大。</p>\n</li>\n</ol>\n<script type=\"math/tex; mode=display\">VRAM容量=分辨率×灰度级位数</script><p>(1) <strong>阴极射线管（CRT）显示器</strong></p>\n<p>CRT 显示器主要由电子枪、偏转线圈、荫罩、高压石墨电极、荧光粉涂层和玻璃外壳 5 部分组成，具有可视角度大、无坏点、色彩还原度高、色度均匀、可调节的多分辨率模式、响应时间极短等目前 LCD 难以超过的优点。</p>\n<p><strong>按显示信息内容不同</strong>，可分为<code>字符显示器</code>、<code>图形显示器</code>和<code>图像显示器</code>;<strong>按扫描方式不同</strong>，可分为<code>光栅扫描</code>和<code>随机扫描</code>两种显示器。下面简要介绍字符显示器和图形显示器。</p>\n<p> ①<code>字符显示器</code>。显示字符的方法以点阵为基础。点阵是指由 m×n 个点组成的阵列。点阵的多少取决于显示字符的质量和字符窗口的大小。字符窗口是指每个字符在屏幕上所占的点数，它包括字符显示点阵和字符间隔。</p>\n<p>将点阵存入由 ROM 构成的字符发生器中，在 CRT 进行光栅扫描的过程中，从字符发生器中依次读出某个字符的点阵，按照点阵中 О 和 1 代码的不同控制扫描电子束的开或关，从而在屏幕上显示字符。对应于每个字符窗口，所需显示字符的 ASCII 代码被存放在视频存储器 VRAM 中，以备刷新。</p>\n<p> ②<code>图形显示器</code>。将所显示图形的一组坐标点和绘图命令组成显示文件存放在缓冲存储器中，缓存中的显示文件传送给矢量（线段）产生器，产生相应的模拟电压，直接控制电子束在屏幕上的移动。为在屏幕上保留持久稳定的图像，需按一定的频率对屏幕反复刷新。这种显示器的优点是分辨率高且显示的曲线平滑。目前高质量的图形显示器采用这种随机扫描方式。缺点是当显示复杂图形时，会有闪烁感。</p>\n<p>(2)<strong>液晶显示器（LCD）</strong></p>\n<p>原理:利用液晶的电光效应，由图像信号电压直接控制薄膜晶体管，再间接控制液晶分子的光学特性来实现图像的显示。</p>\n<p>特点:体积小、重量轻、省电、无辐射、绿色环保、画面柔和、不伤眼等。</p>\n<p>(3)<strong>LED（发光二极管）显示器</strong></p>\n<p>原理:通过控制半导体发光二极管来显示文字、图形、图像等各种信息。</p>\n<p>LCD 与 LED 是两种不同的显示技术。LCD 是由液态晶体组成的显示屏，而 LED 则是由发光二极管组成的显示屏。与 LCD 相比，LED 显示器在亮度、功耗、可视角度和刷新速率等方面都更具优势。</p>\n<h5 id=\"打印机\"><a href=\"#打印机\" class=\"headerlink\" title=\"打印机\"></a>打印机</h5><p>打印机是计算机的输出设备之一，用于将计算机的处理结果打印在相关介质上。</p>\n<p>按工作原理，打印机分为击打式和非击打式两大类;按工作方式，打印机分为点阵打印机、针式打印机、喷墨式打印机、激光打印机等。</p>\n<p>（1）针式打印机</p>\n<p>原理:在联机状态下，主机发出打印命令，经接口、检测和控制电路，间歇驱动纵向送纸和打印头横向移动，同时驱动打印机间歇冲击色带，在纸上打印出所需的内容。</p>\n<p>特点:针式打印机擅长“多层复写打印”，实现各种票据或蜡纸等的打印。其工作原理简单，造价低廉，耗材（色带）便宜，但打印分辨率和打印速度不够高。</p>\n<p>（2）喷墨式打印机</p>\n<p>原理:带电的喷墨雾点经过电极偏转后，直接在纸上形成所需字形。彩色喷墨打印机基于三基色原理，即分别喷射 3 种颜色的墨滴，按一定的比例混合出所要求的颜色。</p>\n<p>特点:打印噪声小，可实现高质量彩色打印，通常打印速度比针式打印机快;但防水性差，高质量打印需要专用打印纸。</p>\n<p>（3）激光打印机</p>\n<p>原理:计算机输出的二进制信息，经过调制后的激光束扫描，在感光鼓上形成潜像，再经过显影、转印和定影，在纸上得到所需的字符或图像。</p>\n<p>特点:打印质量高、速度快、噪声小、处理能力强;但耗材多、价格较贵、不能复写打印多份，且对纸张的要求高。</p>\n<p>激光打印机是将激光技术和电子显像技术相结合的产物。感光鼓（也称硒鼓）是激光打印机的核心部件。</p>\n<h2 id=\"I-O-接口\"><a href=\"#I-O-接口\" class=\"headerlink\" title=\"I/O 接口\"></a>I/O 接口</h2><p> I/O 接口（I/O 控制器）是主机和外设之间的交接界面，通过接口可以实现主机和外设之间的信息交换。主机和外设具有各自的工作特点，它们在信息形式和工作速度上具有很大的差异，接口正是为了解决这些差异而设置的。</p>\n<h3 id=\"I-O-接口的功能\"><a href=\"#I-O-接口的功能\" class=\"headerlink\" title=\"I/O 接口的功能\"></a>I/O 接口的功能</h3><p>I/O 接口的主要功能如下:</p>\n<ol>\n<li><p><code>实现主机和外设的通信联络控制</code>。解决主机与外设时序配合问题，协调不同工作速度的外设和主机之间交换信息，以保证整个计算机系统能统一、协调地工作。</p>\n</li>\n<li><p>进行 <code>地址译码</code>和<code>设备选择</code> 。CPU 送来选择外设的地址码后，接口必须对地址进行译码以产生设备选择信息，使主机能和指定外设交换信息。</p>\n</li>\n<li><p>实现<code>数据缓冲</code> 。<strong>CPU 与外设之间的速度往往不匹配，为消除速度差异，接口必须设置数据缓冲寄存器，用于数据的暂存，以避免因速度不一致而丢失数据。</strong></p>\n</li>\n<li><p><code>信号格式的转换</code> 。外设与主机两者的电平、数据格式都可能存在差异，接口应提供计算机与外设的信号格式的转换功能，如电平转换、并/串或串/并转换、模/数或数/模转换等。</p>\n</li>\n<li><p>传送<code>控制命令</code>和<code>状态信息</code> 。CPU 要启动某一外设时，通过接口中的命令寄存器向外设发出启动命令;外设准备就绪时，则将“准备好”状态信息送回接口中的状态寄存器，并反馈给 CPU。外设向 CPU 提出中断请求时，CPU 也应有相应的响应信号反馈给外设。</p>\n</li>\n</ol>\n<h3 id=\"I-O-接口的基本结构\"><a href=\"#I-O-接口的基本结构\" class=\"headerlink\" title=\"I/O 接口的基本结构\"></a>I/O 接口的基本结构</h3><p> 如图 7.3 所示，I/O 接口在主机侧通过 I/O 总线与内存、CPU 相连。通过<code>数据总线</code>，在 <code>数据缓冲寄存器</code>与内存或 CPU 的寄存器之间进行数据传送。同时接口和设备的状态信息被记录在<code>状态寄存器</code>中，通过数据线将状态信息送到 CPU。CPU 对外设的控制命令也通过数据线传送，一般将其送到 I/O 接口的控制寄存器。状态寄存器和控制寄存器在传送方向上是相反的。</p>\n<p><img src=\"计算机组成原理基础/20210716195002.png\" alt=\"找不到图片（Image not found）\"></p>\n<p>接口中的地址线用于给出要访问的 I/O 接口中的寄存器的地址，它和读/写控制信号一起被送到 I/O 接口的控制逻辑部件，其中地址信息用以选择和主机交换信息的寄存器，通过控制线传送来的读/写信号确认是读寄存器还是写寄存器，此外控制线还会传送一些仲裁信号和握手信号。</p>\n<p>接口中的 I/O 控制逻辑还要能对控制寄存器中的命令字进行译码，并将译码得到的控制信号通过外设界面控制逻辑送到外设，同时将数据缓冲寄存器的数据发送到外设或从外设接收数据到数据缓冲寄存器。另外，它还要具有收集外设状态到状态寄存器的功能。</p>\n<p>对数据缓冲寄存器、状态/控制寄存器的访问操作是通过相应的指令来完成的，通常称这类指令为 I/O 指令，I/O 指令只能在操作系统内核的底层 I/O 软件中使用，它们是一种<code>特权指令</code>。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>🚨注意:接口和端口是两个不同的概念。端口是指接口电路中可以进行读/写的寄存器，若干端口加上相应的控制逻辑才可以组成接口。</p></blockquote>\n<h3 id=\"I-O-接口的类型\"><a href=\"#I-O-接口的类型\" class=\"headerlink\" title=\"I/O 接口的类型\"></a>I/O 接口的类型</h3><p>从不同的角度看，I/O 接口可以分为不同的类型。</p>\n<p>1）按数据传送方式可分为 <code>并行接口</code>（一字节或一个字的所有位同时传送）和<code>串行接口</code>（一位一位地传送），接口要完成数据格式的转换。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>🚨注意:这里所说的数据传送方式指的是外设和接口一侧的传送方式，而在主机和接口一侧，数据总是并行传送的。</p></blockquote>\n<p>2）按主机访问 I/O 设备的控制方式可分为 <code>程序查询接口</code>、 <code>中断接口</code> 和 <code>DMA接口</code> 等。</p>\n<p>3）按功能选择的灵活性可分为<code>可编程接口</code> 和 <code>不可编程接口</code> 。</p>\n<h3 id=\"I-O-端口及其编址\"><a href=\"#I-O-端口及其编址\" class=\"headerlink\" title=\"I/O 端口及其编址\"></a>I/O 端口及其编址</h3><p> I/O 端口是指接口电路中可被 CPU 直接访问的寄存器，主要有<code>数据端口</code>、 <code>状态端口</code> 和 <code>控制端口</code> ，若干端口加上相应的控制逻辑电路组成接口。通常，CPU 能对数据端口执行读写操作，但对状态端口只能执行读操作，对控制端口只能执行写操作。</p>\n<p>I/O 端口要想能够被 CPU 访问，就必须要对各个端口进行编号，每个端口对应一个端口地址。而对 I/O 端口的编址方式有与存储器统一编址和独立编址两种。</p>\n<ol>\n<li><p><code>统一编址</code> ，又称存储器映射方式，是指把 I/O 端口当作存储器的单元进行地址分配，这种方式 CPU 不需要设置专门的 I/O 指令，用统一的 访存指令访存指令 就可以访问 I/O 端口。</p>\n<p>优点:不需要专门的输入/输出指令，可使 CPU 访问 I/O 的操作更灵活、更方便，还可使端口有较大的编址空间。</p>\n<p>缺点:端口占用存储器地址，使内存容量变小，而且利用存储器编址的 I/O 设备进行数据输入/输出操作，执行速度较慢。</p>\n</li>\n<li><p><code>独立编址</code> ，又称 I/O 映射方式，I/O 端口的地址空间与主存地址空间是两个独立的地址空间，因而无法从地址码的形式上区分，需要设置专门的/O 指令来访问 I/O 端口。</p>\n<p>优点:输入/输出指令与存储器指令有明显区别，程序编制清晰，便于理解。</p>\n<p>缺点:输入/输出指令少，一般只能对端口进行传送操作，尤其需要 CPU 提供存储器读/写、I/O 设备读/写两组控制信号，增加了控制的复杂性。</p>\n</li>\n</ol>\n<h2 id=\"I-O-方式\"><a href=\"#I-O-方式\" class=\"headerlink\" title=\"I/O 方式\"></a>I/O 方式</h2><p> 输入/输出系统实现主机与 I/O 设备之间的数据传送，可以采用不同的控制方式，各种方式在代价、性能、解决问题的着重点等方面各不相同，常用的 I/O 方式有<code>程序查询</code> 、 <code>程序中断</code>、 <code>DMA</code> 和<code>通道</code>等，其中前两种方式更依赖于 CPU 中程序指令的执行。</p>\n<h3 id=\"程序查询方式\"><a href=\"#程序查询方式\" class=\"headerlink\" title=\"程序查询方式\"></a>程序查询方式</h3><p> 信息交换的控制完全由主机执行程序实现，程序查询方式接口中设置一个数据缓冲寄存器（数据端口）和一个设备状态寄存器（状态端口）。主机进行 I/O 操作时，先发出询问信号，读取设备的状态并根据设备状态决定下一步操作究竟是进行数据传送还是等待。</p>\n<p>程序查询方式的工作流程如下（见图 7.4）</p>\n<p>① CPU 执行初始化程序，并预置传送参数。</p>\n<p>② 向 I/O 接口发出命令字，启动 I/O 设备。</p>\n<p>③ 从外设接口读取其状态信息。</p>\n<p>④ CPU 不断查询 I/O 设备状态，直到外设准备就绪。</p>\n<p>⑤ 传送一次数据。</p>\n<p>⑥ 修改地址和计数器参数。</p>\n<p>⑦ 判断传送是否结束，若未结束转第 ③ 步，直到计数器为 0。</p>\n<p><img src=\"计算机组成原理基础/20210716195423.png\" alt=\"找不到图片（Image not found）\"></p>\n<p>在这种控制方式下，CPU 一旦启动 I/O，就必须停止现行程序的运行，并在现行程序中插入一段程序。程序查询方式的主要特点是 CPU 有<code>“踏步”等待现象</code>，CPU 与 I/O 串行工作。这种方式的接口设计简单、设备量少，但 CPU 在信息传送过程中要花费很多时间来查询和等待，而且在<code>一段时间</code>内只能和<code>一台</code>外设交换信息，效率大大降低。</p>\n<h3 id=\"程序中断方式\"><a href=\"#程序中断方式\" class=\"headerlink\" title=\"==程序中断方式==\"></a>==程序中断方式==</h3><p> 现代计算机系统中都配有完善的异常和中断处理系统，CPU 的数据通路中有相应的异常和中断的检测和响应逻辑，在外设接口中有相应的中断请求和控制逻辑，操作系统中有相应的中断服务程序。这些中断硬件线路和中断服务程序有机结合，共同完成异常和中断的处理过程。</p>\n<h4 id=\"异常和中断\"><a href=\"#异常和中断\" class=\"headerlink\" title=\"异常和中断\"></a>异常和中断</h4><h5 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h5><p> <strong>异常</strong>是指由<code>CPU内部异常</code>引起的意外事件，分为<code>硬故障中断</code> 和<code>程序性异常</code>。<code>硬故障中断</code>是由硬连线出现异常引起的，如<code>电源掉电</code> 、<code>存储器线路错</code>等。 <code>程序性异常</code>也称 <code>软中断</code> ，是指在 CPU 内部因执行指令而引起的异常事件。如<code>整除0</code>、<code>溢出</code>、<code>断点</code> 、<code>单步跟踪</code>、<code>非法指令</code> 、 <code>栈溢出</code> 、 <code>地址越界</code> 、<code>缺页</code> 、分时系统中的 <code>时间片中断</code> 及用户态到核心态的<code>切换</code>等。按发生异常的报告方式和返回方式不同， <code>内部异常</code> 可分为<code>故障</code>（Fault）、 <code>自陷</code>（Trap）和 <code>终止</code> （Abort）三类。</p>\n<p>① <strong>故障</strong>（Fault）</p>\n<p> <strong>指在引起故障等指令启动后、执行结束前被检测到的异常事件。例如，指令译码时，出现“非法操作码”;取数据时，发生“缺段”或“缺页”;执行整数除法指令时，发现“除数为 0”等。对于“缺段”“缺页”等异常处理后，已将所需的段或页面从磁盘调入主存，可回到发生故障的指令继续执行，断点为当前发生故障的指令;对于“非法操作码”“除数为 0”等， 因为无法通过异常处理程序恢复故障 ，因此不能回到原断点执行，必须终止进程的执行。</strong></p>\n<p>② <strong>自陷</strong>（Trap）</p>\n<p> 自陷也称陷阱或陷入，它是预先安排的一种“异常”事件，就像预先设定的“陷阱”一样。通常的做法是:事先在程序中用一条特殊指令或通过某种方式设定特殊控制标志来人为设置一个“陷阱”，当执行到被设置了“陷阱”的指令时，<strong>CPU 在执行完自陷指令后，自动根据不同“陷阱”类型进行相应的处理，然后返回到自陷指令的下一条指令执行。注意，当自陷指令是转移指令时，并不是返回到下一条指令执行，而是返回到转移目标指令执行</strong>。</p>\n<p> 在 80x86 中，用于程序调试的<code>“ 断点设置 ”</code>功能就是通过<code>自陷</code>方式实现的。此外，系统调用指令、条件自陷指令（如 MIPS 中 teq、teqi、tne、tnei 等一组按条件进入陷阱的指令）等都属于陷阱指令，执行到这些指令时，无条件或有条件地自动调出操作系统内核程序进行执行。</p>\n<p>③ <strong>终止</strong>（Abort）</p>\n<p> <strong>如果在执行指令的过程中发生了使计算机无法继续执行的硬件故障，如电源掉电、线路故障等，那么程序将无法继续执行</strong>，只能终止，此时，调出中断服务程序来重启系统。这种异常与故障和自陷不同，不是由特定指令产生的，而是<code>随机</code>发生的。</p>\n<h5 id=\"外部中断\"><a href=\"#外部中断\" class=\"headerlink\" title=\"外部中断\"></a>外部中断</h5><p><code>外中断</code>是指<strong>来自CPU 外部、与 CPU 执行指令无关的事件引起的中断</strong>，包括<code>I/O设备</code>发出的 I/O 中断（如键盘输入、打印机缺纸等）、<code>外部信号中断</code>（如用户按 Esc 键），以及各种定时器引起的时钟中断等。<strong>外中断在狭义上一般称为中断（书中若未说明，一般是指外中断）</strong>。</p>\n<p>外中断和内部异常在本质上是一样的，但它们之间有以下两个重要的不同点:</p>\n<ol>\n<li><p>“缺页”或“溢出”等异常事件是由特定指令在执行过程中产生的，而中断不和任何指令相关联，也不阻止任何指令的完成。</p>\n</li>\n<li><p>异常的检测是由 CPU 自身完成的，不必通过外部的某个信号通知 CPU。对于中断，CPU 必须通过总线获取中断源的标识信息，才能获知哪个设备发生了何种中断。</p>\n</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>🙋‍♂️有些教材也将异常和中断统称为中断，将由 CPU 内部产生的异常称为内中断，将通过中断请求线 INTR 和 NMI 从 CPU 外部发出的中断请求称为外中断。</p></blockquote>\n<h4 id=\"中断的基本概念\"><a href=\"#中断的基本概念\" class=\"headerlink\" title=\"中断的基本概念\"></a>中断的基本概念</h4><p> 程序中断是指在计算机执行现行程序的过程中，出现某些急需处理的异常情况或特殊请求，CPU 暂时中止现行程序，而转去对这些异常情况或特殊请求进行处理，在处理完毕后 CPU 又自动返回到现行程序的断点处，继续执行原程序。</p>\n<p>程序中断的作用如下:</p>\n<p> ① 实现 CPU 与 I/O 设备的并行工作。</p>\n<p> ② <code>处理</code>硬件故障和软件错误。</p>\n<p> ③ 实现人机交互，用户<code>干预</code>机器需要用到中断系统。</p>\n<p> ④ 实现<code>多道程序</code>、<code>分时操作</code>，多道程序的切换需借助于中断系统。</p>\n<p> ⑤ 实时处理需要借助中断系统来实现<code>快速响应</code>。</p>\n<p> ⑥ 实现应用程序和操作系统（管态程序）的切换，称为<code>“软中断”</code>。</p>\n<p> ⑦ 多处理器系统中各处理器之间的 信息交流信息交流 和 任务切换任务切换 。</p>\n<p>程序中断方式的思想:CPU 在程序中安排好于某个时刻启动某台外设，然后 CPU 继续执行原来的程序，不需要像查询方式那样一直等待外设准备就绪。一旦外设完成数据传送的准备工作，就主动向 CPU 发出中断请求，请求 CPU 为自己服务。在可以响应中断的条件下，CPU 暂时中止正在执行的程序，转去执行中断服务程序为外设服务，在中断服务程序中完成一次主机与外设之间的数据传送，传送完成后，CPU 返回原来的程序，如图 7.5 所示。</p>\n<p><img src=\"计算机组成原理基础/20210716210133.png\" alt=\"找不到图片（Image not found）\"></p>\n<h4 id=\"程序中断方式工作流程\"><a href=\"#程序中断方式工作流程\" class=\"headerlink\" title=\"程序中断方式工作流程\"></a>程序中断方式工作流程</h4><h6 id=\"中断请求\"><a href=\"#中断请求\" class=\"headerlink\" title=\"中断请求\"></a>中断请求</h6><p> 中断源是请求 CPU 中断的设备或事件，一台计算机允许有多个中断源。每个中断源向 CPU 发出中断请求的时间是随机的。为记录中断事件并区分不同的中断源，中断系统需对每个中断源设置中断请求标记触发器 INTR，当其状态为“1”时，表示中断源有请求。这些触发器可组成中断请求标记寄存器，该寄存器可集中在 CPU 中，也可分散在各个中断源中。</p>\n<p><code>内中断</code>皆为<code>不可屏蔽中断</code> 。通过 INTR 信号线发出的<code>外中断</code>是<code>可屏蔽中断</code> ，在关中断（IF =1）的情况下不会被响应;而通过 NMI 信号发出的是不可屏蔽中断，即使在关中断（IF=0）的情况下也会被响应。不可屏蔽中断的处理优先级最高，任何时候只要发生不可屏蔽中断，都要中止现行程序的执行，转到不可屏蔽中断处理程序执行。</p>\n<h6 id=\"中断判优\"><a href=\"#中断判优\" class=\"headerlink\" title=\"中断判优\"></a>中断判优</h6><p> 中断系统在任一瞬间只能响应一个中断源的请求。由于许多中断源提出中断请求的时间都是随机的，因此当多个中断源同时提出请求时，需通过中断判优逻辑确定响应哪个中断源的请求，例如故障中断的优先级别较高，然后是 I/O 中断。</p>\n<p> 中断判优既可以用硬件实现，又可用软件实现。硬件实现是通过<code>硬件排队器</code>实现的，它既可以设置在 CPU 中，又可以分散在各个中断源中，软件实现是通过<code>查询程序</code>实现的。</p>\n<p> <strong>一般来说，硬件故障中断属于最高级，其次是软件中断，不可屏蔽中断优于可屏蔽中断，DMA 请求优于 I/O 设备传送的中断请求，高速设备优于低速设备，输入设备优于输出设备，实时设备优于普通设备等。</strong></p>\n<h6 id=\"CPU-响应中断的条件\"><a href=\"#CPU-响应中断的条件\" class=\"headerlink\" title=\"CPU 响应中断的条件\"></a>CPU 响应中断的条件</h6><p>CPU 在满足一定的条件下响应中断源发出的中断请求，并经过一些特定的操作，转去执行中断服务程序。CPU 响应中断必须满足以下 3 个条件:</p>\n<p> ① <code>中断源有中断请求</code>。</p>\n<p> ②<code>CPU 允许中断及开中断</code>。(<strong>异常和不可屏蔽中断不受此限制</strong>)</p>\n<p> ③ <code>一条指令执行完毕，且没有更紧迫的任务</code>。(<strong>异常和不可屏蔽中断不受此限制</strong>)</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>🚨注意:I/O 设备的就绪时间是随机的，而 CPU 在统一的时刻即每条指令执行阶段结束前向接口发出中断查询信号，以获取 I/O 的中断请求，也就是说，<strong>CPU 响应中断的时间是在每条指令执行阶段的结束时刻。这里说的中断仅指外中断，内中断不属于此类情况。</strong></p></blockquote>\n<h6 id=\"中断响应\"><a href=\"#中断响应\" class=\"headerlink\" title=\"中断响应\"></a>中断响应</h6><p>CPU 响应中断后，经过某些操作，转去执行中断服务程序。这些操作是由硬件直接实现的，我们将它称为<code>中断隐指令</code> 。中断隐指令并不是指令系统中的一条真正的指令，它没有操作码，所以中断隐指令是一种不允许也不可能为用户使用的特殊指令。它所完成的操作如下:</p>\n<p> ① <code>关中断</code> 。CPU 响应中断后，首先要保护程序的断点和现场信息，在保护断点和现场的过程中，CPU 不能响应更高级中断源的中断请求。</p>\n<p> ② <code>保存断点</code> 。为保证在中断服务程序执行完毕后能正确地返回到原来的程序，必须将原来程序的断点（指令无法直接读取的 PC 和 PSWR 等的内容）保存起来。</p>\n<p> ③ <code>引出中断服务程序</code> 。实质是取出中断服务程序的入口地址并传送给程序计数器（PC）。</p>\n<h6 id=\"中断向量\"><a href=\"#中断向量\" class=\"headerlink\" title=\"中断向量\"></a>中断向量</h6><p> 每个中断都有一个类型号，每个中断类型号都对应一个中断服务程序，每个中断服务程序都有一个入口地址，CPU 必须找到入口地址，即中断向量，把系统中的全部中断向量集中存放到存储器的某个区域内，这个存放中断向量的存储区就称为<code>中断向量表</code>。</p>\n<p> <strong>CPU 响应中断后，中断硬件会自动将中断向量地址传送到 CPU，由 CPU 实现程序的切换，这种方法称为中断向量法，采用中断向量法的中断称为向量中断</strong>。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意: <code>中断向量</code>是<code>中断服务程序的入口地址</code>，<code>中断向量地址</code>是指 <code>中断服务程序的入口地址的地址</code> 。</p></blockquote>\n<h6 id=\"中断处理过程\"><a href=\"#中断处理过程\" class=\"headerlink\" title=\"中断处理过程\"></a>中断处理过程</h6><p>不同计算机的中断处理过程各具特色，就其多数而论，中断处理流程如图 7.6 所示。</p>\n<p>中断处理流程如下:</p>\n<p>① <code>关中断</code> 。在保护断点和现场期间不能被新的中断所打断，必须关中断。否则，若断点或现场保存不完整，在中断服务程序结束后，就不能正确地恢复并继续执行现行程序。</p>\n<p>② <code>保存断点</code> 。断点可以压入堆栈，也可以存入主存的特定单元中。</p>\n<p>③ <code>引出中断服务程序</code> 。通常有两种方法寻址中断服务程序的入口地址: <code>硬件向量法</code> 和 <code>软件查询法</code> 。硬件向量法通过硬件产生中断向量地址，再由中断向量地址找到中断服务程序的入口地址。软件查询法用软件编程的办法寻找入口地址。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>🚨注意:硬件产生的实际上是中断类型号，而中断类型号指出了中断向量存放的地址，因此能产生中断向量地址。以上三个流程是中断隐指令,由硬件完成,即CPU执行中断隐指令</strong></p></blockquote>\n<p>④<code>保存现场和屏蔽字</code> 。进入中断服务程序后首先要保存现场和中断屏蔽字，现场信息是指用户可见的工作寄存器的内容(PC(被中断程序尚未被执行的第一条指令地址)、PSW(状态信息)和通用寄存器中的内容)，它存放着程序执行到断点处的现行值。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>🚨注意:现场和断点，这两类信息都不能被中断服务程序破坏。<strong>现场信息因为用指令可直接访问，所以通常在中断服务程序中通过指令把它们保存到栈中，即由软件实现</strong>;<strong>而断点信息由 CPU 在中断响应开始时自动保存到栈或专门的寄存器中，即由硬件实现</strong>。设置中断屏蔽字可以改变多个中断服务程序执行完的次序</p></blockquote>\n<p>⑤ <code>开中断</code> 。允许更高级中断请求得到响应，实现中断嵌套。</p>\n<p>⑥ <code>执行中断服务程序</code> 。这是中断请求的目的。</p>\n<p>⑦ <code>关中断</code> 。保证在恢复现场和屏蔽字时不被中断。</p>\n<p>⑧ <code>恢复现场和屏蔽字</code> 。将现场和屏蔽字恢复到原来的状态。</p>\n<p>⑨ <code>开中断、中断返回</code> 。中断服务程序的最后一条指令通常是一条中断返回指令，使其返回到原程序的断点处，以便继续执行原程序。</p>\n<p>其中，①③ 在 CPU 进入中断周期后，由中断隐指令（硬件自动）完成;④⑨ 由中断服务程序完成。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>🚨注意: 恢复现场是指在中断返回之前，中断服务程序必须将寄存器的内容恢复到中断处理之前的状态。这一步骤由中断服务程序完成。而<strong>中断返回则由中断服务程序的最后一条中断返回指令来完成</strong>。</p></blockquote>\n<p><img src=\"计算机组成原理基础/20210716210821.png\" alt=\"找不到图片（Image not found）\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>在单级(单重)中断系统中,不允许中断嵌套。中断处理过程为</strong>:</p>\n<p>① 关中断</p>\n<p>② 保存断点</p>\n<p>③ 识别中断源</p>\n<p>=\\=硬件完成↑=\\=</p>\n<p>=\\=中断服务程序完成↓\\==</p>\n<p>④ 保存现场</p>\n<p>⑤ 中断事件处理</p>\n<p>⑥ 恢复现场</p>\n<p>⑦ 开中断</p>\n<p>⑧ 中断返回</p></blockquote>\n<h4 id=\"多重中断和中断屏蔽技术\"><a href=\"#多重中断和中断屏蔽技术\" class=\"headerlink\" title=\"多重中断和中断屏蔽技术\"></a>多重中断和中断屏蔽技术</h4><p> 若 CPU 在执行中断服务程序的过程中，又出现了新的更高优先级的中断请求，而 CPU 对新的中断请求不予响应，则这种中断称为<code>单重中断</code>，如图 7.7（a）所示。若 CPU 暂停现行的中断服务程序，转去处理新的中断请求，则这种中断称为<code>多重中断</code>，又称<code>中断嵌套</code>，如图 7.7（b）所示。</p>\n<p>中断屏蔽技术主要用于多重中断。CPU 要具备多重中断的功能，必须满足下列条件:</p>\n<p>① 在中断服务程序中提前设置开中断指令。</p>\n<p>② 优先级别高的中断源有权中断优先级别低的中断源。</p>\n<p>每个中断源都有一个 <code>屏蔽触发器</code>， 1 表示<code>屏蔽该中断源</code>的请求， 0 表示可以<code>正常申请</code>，所有屏蔽触发器组合在一起便构成一个屏蔽字寄存器，屏蔽字寄存器的内容称为屏蔽字。</p>\n<p>关于中断屏蔽字的设置及多重中断程序执行的轨迹，下面通过实例说明。</p>\n<p><img src=\"计算机组成原理基础/20210716211109.png\" alt=\"找不到图片（Image not found）\"></p>\n<p>例题:</p>\n<p><img src=\"计算机组成原理基础/20210716211251.png\" alt=\"找不到图片（Image not found）\"></p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">22.下列是关于多重中断系统中 CPU 响应中断的叙述，其中错误的是（ ）。\nA.仅在用户态（执行用户程序）下，CPU 才能检测和响应中断\nB.CPU只有在检测到中断请求信号后，才会进入中断响应周期\nC.进入中断响应周期时。CPU一定处干中断允许（开中断）状态\nD.若CPU 检测到中断请求信号，则一定存在未被屏蔽的中断源请求信号\n\n<span class=\"token property\">解析</span><span class=\"token punctuation\">:</span> A\nA.中断服务程序在内核态下执行<span class=\"token punctuation\">,</span>若只能在用户态下检测和响应中断<span class=\"token punctuation\">,</span>则无法实现多重中断<span class=\"token punctuation\">(</span>中断嵌套<span class=\"token punctuation\">)</span>\nB.在多重中断中<span class=\"token punctuation\">,</span>CPU只有在检测到中断请求信号后<span class=\"token punctuation\">(</span>中断处理优先级别更低的中断请求信号是检测不到的<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>才会进入到中断响应周期\nC.进入中断响应周期时<span class=\"token punctuation\">,</span>说明此时CPU一定处于中断允许状态<span class=\"token punctuation\">,</span>否则无法响应该中断<span class=\"token punctuation\">(</span>多重中断系统中响应中断时所做的第一个操作就是关中断<span class=\"token punctuation\">,</span>说明进入中断响应周期时<span class=\"token punctuation\">,</span>CPU处于中断允许的状态<span class=\"token punctuation\">)</span>\nD.如果所有中断源被屏蔽<span class=\"token punctuation\">(</span>说明该中断的处理优先级最高<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>则CPU不会检测到任何中断请求信号<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"DMA-方式\"><a href=\"#DMA-方式\" class=\"headerlink\" title=\"==DMA 方式==\"></a>==DMA 方式==</h3><p> <strong>DMA(Direct Memory Access)方式</strong>是一种<code>完全由硬件</code>进行成组信息传送的控制方式，它具有程序中断方式的优点，即在数据准备阶段，CPU 与外设并行工作。DMA 方式在外设与内存之间开辟一条“直接数据通道”，信息传送不再经过 CPU，降低了 CPU 在传送数据时的开销，因此称为<code>直接存储器存取</code>方式。由于数据传送不经过 CPU，也就不需要保护、恢复 CPU 现场等烦琐操作。</p>\n<p>这种方式适用于磁盘机、磁带机等高速设备大批量数据的传送，它的硬件开销比较大。在 DMA 方式中，中断的作用仅限于<code>故障</code>和<code>正常传送结束时的处理</code> 。</p>\n<h4 id=\"DMA-方式的特点\"><a href=\"#DMA-方式的特点\" class=\"headerlink\" title=\"DMA 方式的特点\"></a>DMA 方式的特点</h4><p> 主存和 DMA 接口之间有一条直接数据通路。由于 DMA 方式传送数据不需要经过 CPU,因此不必中断现行程序，I/O 与主机并行工作，程序和传送并行工作。</p>\n<p>DMA 方式具有下列特点:</p>\n<p>① 它使主存与 CPU 的固定联系脱钩，主存既可被 CPU 访问，又可被外设访问。</p>\n<p>② 在数据块传送时，主存地址的确定、传送数据的计数等都由硬件电路直接实现。</p>\n<p>③ 主存中要开辟专用缓冲区，及时供给和接收外设的数据。</p>\n<p>④ DMA 传送速度快，CPU 和外设并行工作，提高了系统效率。</p>\n<p>⑤ DMA 在传送开始前要通过程序进行预处理，结束后要通过中断方式进行后处理。</p>\n<h4 id=\"DMA-控制器的组成\"><a href=\"#DMA-控制器的组成\" class=\"headerlink\" title=\"DMA 控制器的组成\"></a>DMA 控制器的组成</h4><p> 在 DMA 方式中，对数据传送过程进行控制的硬件称为 DMA 控制器（DMA 接口）。<strong>当 I/O 设备需要进行数据传送时，向DMA控制器发送DMA请求信号,然后由DMA 控制器向 CPU 提出总线请求，CPU 响应之后将让出系统总线，由 DMA 控制器接管总线进行数据传送。</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>🙋‍♂️<strong>CPU响应DMA请求是在每个机器周期结束后</strong></p></blockquote>\n<p>其主要功能如下:</p>\n<ol>\n<li><p><strong>接受外设发出的 DMA 请求，并向 CPU 发出总线请求。</strong></p>\n</li>\n<li><p><strong>CPU 响应此总线请求，发出总线响应信号，接管总线控制权，进入 DMA 操作周期</strong>。</p>\n</li>\n<li><p><strong>确定传送数据的主存单元地址及长度，并自动修改主存地址计数和传送长度计数。</strong></p>\n</li>\n<li><p><strong>规定数据在主存和外设间的传送方向，发出读写等控制信号，执行数据传送操作。</strong></p>\n</li>\n<li><p><strong>向 CPU 报告 DMA 操作的结束。</strong></p>\n</li>\n</ol>\n<p>图 7.10 给出了一个简单的 DMA 控制器。</p>\n<p><img src=\"计算机组成原理基础/20210716211543.png\" alt=\"找不到图片（Image not found）\"></p>\n<ul>\n<li><code>主存地址计数器</code>:存放要交换数据的主存地址。</li>\n<li><code>传送长度计数器</code>:记录传送数据的长度，计数溢出时，数据即传送完毕，自动发中断请求信号。</li>\n<li><code>数据缓冲寄存器</code>:暂存每次传送的数据。</li>\n<li><code>DMA请求触发器</code>:每当 I/O 设备准备好数据后，给出一个控制信号，使 DMA 请求触发器置位。</li>\n<li><code>“控制/状态”逻辑</code>:由控制和时序电路及状态标志组成，用于指定传送方向，修改传送参数，并对 DMA 请求信号和 CPU 响应信号进行协调和同步。</li>\n<li><code>中断机构</code>:当一个数据块传送完毕后触发中断机构，向 CPU 提出中断请求。</li>\n</ul>\n<p>在 DMA 传送过程中，DMA 控制器将接管 CPU 的地址总线、数据总线和控制总线，CPU 的主存控制信号被禁止使用。而当 DMA 传送结束后，将恢复 CPU 的一切权利并开始执行其操作。由此可见，DMA 控制器必须具有控制系统总线的能力。</p>\n<h4 id=\"DMA-的传送方式\"><a href=\"#DMA-的传送方式\" class=\"headerlink\" title=\"DMA 的传送方式\"></a>DMA 的传送方式</h4><p> 主存和 I/O 设备之间交换信息时，不通过 CPU。但当 I/O 设备和 CPU 同时访问主存时，可能发生冲突，为了有效地使用主存，DMA 控制器与 CPU 通常采用以下 3 种方式使用主存:</p>\n<ol>\n<li>停止 CPU 访存。当 I/O 设备有 DMA 请求时，由 DMA 控制器向 CPU 发送一个停止信号，使 CPU 脱离总线，停止访问主存，直到 DMA 传送一块数据结束。数据传送结束后，DMA 控制器通知 CPU 可以使用主存，并把总线控制权交还给 CPU。</li>\n<li>周期挪用（或周期窃取）。当 I/O 设备有 DMA 请求时，会遇到 3 种情况:<ol>\n<li>此时 CPU 不在访存（如 CPU 正在执行乘法指令），因此 I/O 的访存请求与 CPU 未发生冲突;</li>\n<li><strong>CPU 正在访存，此时必须待存取周期结束后，CPU 再将总线占有权让出(即DMA与主存交互数据的时候通过周期窃取的方式,窃取的是存取周期)</strong>;</li>\n<li>I/O 和 CPU 同时请求访存，出现访存冲突，此时 CPU 要暂时放弃总线占有权。I/O 访存优先级高于 CPU 访存，因为 I/O 不立即访存就可能丢失数据，此时由 <strong>I/O 设备挪用一个或几个存取周期，传送完一个数据字后立即释放总线，是一种单字传送方式</strong>。</li>\n</ol>\n</li>\n<li>DMA 与 CPU 交替访存。这种方式适用于 CPU 的工作周期比主存存取周期长的情况。例如，若 CPU 的工作周期是 1.2μs，主存的存取周期小于 0.6μs，则可将一个 CPU 周期分为 C~1~和 C~2~,两个周期，其中 C~1~专供 DMA 访存，C~2~专供 CPU 访存。这种方式不需要总线使用权的申请、建立和归还过程，总线使用权是通过 C~1~和 C~2~分时控制的。</li>\n</ol>\n<h5 id=\"DMA-的传送过程\"><a href=\"#DMA-的传送过程\" class=\"headerlink\" title=\"DMA 的传送过程\"></a>DMA 的传送过程</h5><p>DMA 的数据传送过程分为预处理、数据传送和后处理 3 个阶段:</p>\n<ol>\n<li><p><code>预处理</code>。由 CPU 完成一些必要的准备工作。首先，CPU 执行几条 I/O 指令，用以测试 I/O 设备状态，向 DMA 控制器的有关寄存器置初值、设置传送方向、启动该设备等。然后，CPU 继续执行原来的程序，直到 I/O 设备准备好发送的数据（输入情况）或接收的数据（输出情况）时，I/O 设备向 DMA 控制器发送 DMA 请求，再由 DMA 控制器向 CPU 发送总线请求（有时将这两个过程统称为 DMA 请求），用以传输数据。</p>\n</li>\n<li><p><code>数据传送</code> 。DMA 的数据传输可以以单字节（或字）为基本单位，也可以以数据块为基本单位。对于以数据块为单位的传送（如硬盘），DMA 占用总线后的数据输入和输出操作都是通过循环来实现的。需要指出的是，这一循环也是由 DMA 控制器（而非通过 CPU 执行程序）实现的，<strong>即数据传送阶段完全由 DMA（硬件）控制</strong>。</p>\n</li>\n<li><p><code>后处理</code>。DMA 控制器向 CPU 发送中断请求，CPU 执行中断服务程序做 DMA 结束处理，包括校验送入主存的数据是否正确、测试传送过程中是否出错（错误则转入诊断程序）及决定是否继续使用 DMA 传送其他数据块等。DMA 的传送流程如图 7.11 所示。</p>\n</li>\n</ol>\n<p><img src=\"计算机组成原理基础/20210716211945.png\" alt=\"找不到图片（Image not found）\"></p>\n<h4 id=\"DMA-方式和中断方式的区别\"><a href=\"#DMA-方式和中断方式的区别\" class=\"headerlink\" title=\"DMA 方式和中断方式的区别\"></a>DMA 方式和中断方式的区别</h4><p>DMA 方式和中断方式的重要区别如下:</p>\n<p>① 中断方式是程序的切换，需要保护和恢复现场;而 DMA 方式除了预处理和后处理，其他时候不占用 CPU 的任何资源。</p>\n<p>② 对中断请求的响应只能发生在每条指令执行完毕时（即指令的执行周期后）;而对 DMA 请求的响应可以发生在每个机器周期结束时（在取指周期、间址周期、执行周期后均可），只要 CPU 不占用总线就可被响应。</p>\n<p>③ 中断传送过程需要 CPU 的干预;而 DMA 传送过程不需要 CPU 的干预，因此数据传输率非常高，适合于高速外设的成组数据传送。</p>\n<p>④ DMA 请求的优先级高于中断请求。</p>\n<p>⑤ 中断方式具有对异常事件的处理能力，而 DMA 方式仅局限于传送数据块的 I/O 操作。</p>\n<p>⑥ 从数据传送来看，中断方式靠程序传送，DMA 方式靠硬件传送。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><h3 id=\"CPU-响应中断应具备哪些条件\"><a href=\"#CPU-响应中断应具备哪些条件\" class=\"headerlink\" title=\"CPU 响应中断应具备哪些条件?\"></a>CPU 响应中断应具备哪些条件?</h3><p>在 CPU 内部设置的中断屏蔽触发器必须是开放的。</p>\n<p>① 外设有中断请求时，中断请求触发器必须处于“1”状态，保持中断请求信号。</p>\n<p>② 外设（接口）中断允许触发器必须为“1”，这样才能把外设中断请求送至 CPU.</p>\n<p>③ 具备上述三个条件时，CPU 在现行指令结束的最后一个状态周期响应中断。</p>\n<h3 id=\"中断响应优先级和中断处理优先级分别指什么\"><a href=\"#中断响应优先级和中断处理优先级分别指什么\" class=\"headerlink\" title=\"中断响应优先级和中断处理优先级分别指什么?\"></a>中断响应优先级和中断处理优先级分别指什么?</h3><p>中断响应优先级是由硬件排队线路或中断查询程序的查询顺序决定的，不可动态改变;而中断处理优先级可以由中断屏蔽字来改变，反映的是正在处理的中断是否比新发生的中断的处理优先级低（屏蔽位为“0”，对新中断开放），若是，则中止正在处理的中断，转到新中断去处理，处理完后再回到刚才被中止的中断继续处理。</p>\n","text":"计算机的系统概述计算机的层次结构计算机系统的组成 硬件系统和软件系统共同构成了一个完整的计算机系统。硬件是指有形的物理设备,是计算机系统重实际物理装置的总称。软件是指在硬件上运行的程序和相关的数据及文档 计算机硬件冯诺依曼机的基本思想 冯诺依曼在研究 EDVAC 机时提出了&qu...","link":"","photos":[],"count_time":{"symbolsCount":"95k","symbolsTime":"1:26"},"categories":[{"name":"计算机基础","slug":"计算机基础","count":4,"path":"api/categories/计算机基础.json"},{"name":"计算机组成原理","slug":"计算机基础/计算机组成原理","count":1,"path":"api/categories/计算机基础/计算机组成原理.json"}],"tags":[{"name":"计算机组成原理","slug":"计算机组成原理","count":1,"path":"api/tags/计算机组成原理.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">计算机的系统概述</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">计算机的层次结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%84%E6%88%90\"><span class=\"toc-text\">计算机系统的组成</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6\"><span class=\"toc-text\">计算机硬件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%86%AF%E8%AF%BA%E4%BE%9D%E6%9B%BC%E6%9C%BA%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%80%9D%E6%83%B3\"><span class=\"toc-text\">冯诺依曼机的基本思想</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E5%8A%9F%E8%83%BD%E9%83%A8%E4%BB%B6\"><span class=\"toc-text\">计算机的功能部件</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%BD%AF%E4%BB%B6\"><span class=\"toc-text\">计算机软件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%92%8C%E5%BA%94%E7%94%A8%E8%BD%AF%E4%BB%B6\"><span class=\"toc-text\">系统软件和应用软件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%89%E4%B8%AA%E7%BA%A7%E5%88%AB%E7%9A%84%E8%AF%AD%E8%A8%80\"><span class=\"toc-text\">三个级别的语言</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84-1\"><span class=\"toc-text\">计算机的层次结构</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87\"><span class=\"toc-text\">计算机的性能指标</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E4%B8%BB%E8%A6%81%E7%B3%BB%E7%BB%9F%E6%8C%87%E6%A0%87\"><span class=\"toc-text\">计算机的主要系统指标</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%A0%E4%B8%AA%E4%B8%93%E4%B8%9A%E6%9C%AF%E8%AF%AD\"><span class=\"toc-text\">几个专业术语</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">数据的表示和运算</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E5%88%B6%E4%B8%8E%E7%BC%96%E7%A0%81\"><span class=\"toc-text\">&#x3D;&#x3D;数制与编码&#x3D;&#x3D;</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E4%BD%8D%E8%AE%A1%E6%95%B0%E5%88%B6%E5%8F%8A%E5%85%B6%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">进位计数制及其相互转换</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E4%BD%8D%E8%AE%A1%E6%95%B0%E6%B3%95\"><span class=\"toc-text\">进位计数法</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E7%82%B9%E6%95%B0%E7%9A%84%E7%BC%96%E7%A0%81%E8%A1%A8%E7%A4%BA\"><span class=\"toc-text\">定点数的编码表示</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9C%BA%E5%99%A8%E6%95%B0%E7%9A%84%E5%AE%9A%E7%82%B9%E8%A1%A8%E7%A4%BA\"><span class=\"toc-text\">机器数的定点表示</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%A0%81%E3%80%81%E8%A1%A5%E7%A0%81%E3%80%81%E5%8F%8D%E7%A0%81%E3%80%81%E7%A7%BB%E7%A0%81\"><span class=\"toc-text\">原码、补码、反码、移码</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%A0%81%E8%A1%A8%E7%A4%BA%E6%B3%95\"><span class=\"toc-text\">原码表示法</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%A1%A5%E7%A0%81%E8%A1%A8%E7%A4%BA%E6%B3%95\"><span class=\"toc-text\">补码表示法</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%8F%8D%E7%A0%81%E8%A1%A8%E7%A4%BA%E6%B3%95\"><span class=\"toc-text\">反码表示法</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%A7%BB%E7%A0%81%E8%A1%A8%E7%A4%BA%E6%B3%95\"><span class=\"toc-text\">移码表示法</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%AE%97%E6%96%B9%E6%B3%95%E5%92%8C%E8%BF%90%E7%AE%97%E7%94%B5%E8%B7%AF\"><span class=\"toc-text\">运算方法和运算电路</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E9%83%A8%E4%BB%B6\"><span class=\"toc-text\">基本运算部件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%AC%E5%BC%8F%E5%92%8C%E5%AE%9A%E7%90%86%F0%9F%91%A8%E2%80%8D%F0%9F%8F%AB\"><span class=\"toc-text\">公式和定理👨‍🏫</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%80%BB%E8%BE%91%E5%87%BD%E6%95%B0%E7%9A%84%E5%85%AC%E5%BC%8F%E5%8C%96%E7%AE%80%E6%B3%95\"><span class=\"toc-text\">逻辑函数的公式化简法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%80%BB%E8%BE%91%E5%87%BD%E6%95%B0%E7%9A%84%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%AE%80%E6%B3%95\"><span class=\"toc-text\">逻辑函数的图形化简法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%80%E4%BD%8D%E5%85%A8%E5%8A%A0%E5%99%A8\"><span class=\"toc-text\">一位全加器</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E7%82%B9%E6%95%B0%E7%9A%84%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">定点数的运算</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E7%82%B9%E6%95%B0%E7%9A%84%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">定点数的移位运算</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%9C%AF%E7%A7%BB%E4%BD%8D\"><span class=\"toc-text\">算术移位</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%80%BB%E8%BE%91%E7%A7%BB%E4%BD%8D\"><span class=\"toc-text\">逻辑移位</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%A0%81%E5%AE%9A%E7%82%B9%E6%95%B0%E7%9A%84%E5%8A%A0%E5%87%8F%E6%B3%95%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">原码定点数的加减法运算</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A1%A5%E7%A0%81%E5%AE%9A%E7%82%B9%E6%95%B0%E5%8A%A0%E5%87%8F%E6%B3%95%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">补码定点数加减法运算</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AC%A6%E5%8F%B7%E6%89%A9%E5%B1%95\"><span class=\"toc-text\">符号扩展</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%BA%A2%E5%87%BA%E6%A6%82%E5%BF%B5%E5%92%8C%E5%88%A4%E5%88%AB%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">溢出概念和判别方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E7%82%B9%E6%95%B0%E7%9A%84%E4%B9%98%E6%B3%95%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">定点数的乘法运算</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%A0%81%E4%B8%80%E4%BD%8D%E4%B9%98%E6%B3%95\"><span class=\"toc-text\">原码一位乘法</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8%E5%92%8C%E6%8E%92%E5%88%97\"><span class=\"toc-text\">数据的存储和排列</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%9A%84%E2%80%9C%E5%A4%A7%E7%AB%AF%E6%96%B9%E5%BC%8F%E2%80%9D%E5%92%8C%E2%80%9C%E5%B0%8F%E7%AB%AF%E6%96%B9%E5%BC%8F%E2%80%9D%E5%AD%98%E5%82%A8\"><span class=\"toc-text\">数据的“大端方式”和“小端方式”存储</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E6%8C%89%E2%80%9C%E8%BE%B9%E7%95%8C%E5%AF%B9%E9%BD%90%E2%80%9D%E6%96%B9%E5%BC%8F%E5%AD%98%E5%82%A8\"><span class=\"toc-text\">数据按“边界对齐”方式存储</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#c-%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3\"><span class=\"toc-text\">c 语言相关</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%89%80%E5%8D%A0%E7%9A%84%E5%AD%97%E8%8A%82%E6%95%B0\"><span class=\"toc-text\">基本数据类型所占的字节数</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">存储系统</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%98%E5%82%A8%E5%99%A8%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">存储器概述</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%98%E5%82%A8%E5%99%A8%E7%9A%84%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">存储器的分类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%98%E5%82%A8%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87\"><span class=\"toc-text\">存储器的性能指标</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AD%98%E5%82%A8%E5%AE%B9%E9%87%8F\"><span class=\"toc-text\">存储容量</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8D%95%E4%BD%8D%E6%88%90%E6%9C%AC\"><span class=\"toc-text\">单位成本</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AD%98%E5%82%A8%E9%80%9F%E5%BA%A6\"><span class=\"toc-text\">存储速度</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E5%B1%82%E6%AC%A1%E7%9A%84%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">多层次的存储系统</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BB%E5%AD%98%E5%82%A8%E5%99%A8-MM\"><span class=\"toc-text\">主存储器(MM)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SRAM-%E5%92%8C-DRAM\"><span class=\"toc-text\">SRAM 和 DRAM</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#SRAM\"><span class=\"toc-text\">SRAM</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#DRAM\"><span class=\"toc-text\">DRAM</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AD%98%E5%82%A8%E5%99%A8%E8%8A%AF%E7%89%87%E7%9A%84%E5%86%85%E9%83%A8%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">存储器芯片的内部结构</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%AA%E8%AF%BB%E5%AD%98%E5%82%A8%E5%99%A8\"><span class=\"toc-text\">只读存储器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E6%A8%A1%E5%9D%97%E5%AD%98%E5%82%A8%E5%99%A8\"><span class=\"toc-text\">多模块存储器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8D%95%E4%BD%93%E5%A4%9A%E5%AD%97%E5%AD%98%E5%82%A8%E5%99%A8\"><span class=\"toc-text\">单体多字存储器</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E4%BD%93%E5%B9%B6%E8%A1%8C%E5%AD%98%E5%82%A8%E5%99%A8\"><span class=\"toc-text\">多体并行存储器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%AB%98%E4%BD%8D%E4%BA%A4%E5%8F%89%E7%BC%96%E5%9D%80-%E9%A1%BA%E5%BA%8F%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">高位交叉编址(顺序方式)</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%9C%B0%E4%BD%8D%E4%BA%A4%E5%8F%89%E7%BC%96%E5%9D%80-%E4%BA%A4%E5%8F%89%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">地位交叉编址(交叉方式)</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BB%E5%AD%98%E5%82%A8%E5%99%A8%E4%B8%8E-CPU-%E7%9A%84%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">主存储器与 CPU 的连接</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%9E%E6%8E%A5%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">连接原理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%BB%E5%AD%98%E5%AE%B9%E9%87%8F%E7%9A%84%E6%89%A9%E5%B1%95\"><span class=\"toc-text\">主存容量的扩展</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BD%8D%E6%8B%93%E5%B1%95%E6%B3%95\"><span class=\"toc-text\">位拓展法</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AD%97%E6%8B%93%E5%B1%95%E6%B3%95\"><span class=\"toc-text\">字拓展法</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AD%97%E4%BD%8D%E6%89%A9%E5%B1%95\"><span class=\"toc-text\">字位扩展</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AD%98%E5%82%A8%E5%99%A8%E5%92%8C-CPU-%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">存储器和 CPU 连接</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%96%E9%83%A8%E5%AD%98%E5%82%A8%E5%99%A8\"><span class=\"toc-text\">外部存储器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A3%81%E7%9B%98%E5%AD%98%E5%82%A8%E5%99%A8\"><span class=\"toc-text\">磁盘存储器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A3%81%E7%9B%98%E8%AE%BE%E5%A4%87%E7%9A%84%E7%BB%84%E6%88%90\"><span class=\"toc-text\">磁盘设备的组成</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%A1%AC%E7%9B%98%E5%AD%98%E5%82%A8%E5%99%A8%E7%9A%84%E7%BB%84%E6%88%90\"><span class=\"toc-text\">硬盘存储器的组成</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AD%98%E5%82%A8%E5%8C%BA%E5%9F%9F\"><span class=\"toc-text\">存储区域</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%A3%81%E7%9B%98%E7%9A%84%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87\"><span class=\"toc-text\">磁盘的性能指标</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%A3%81%E7%9B%98%E5%9C%B0%E5%9D%80\"><span class=\"toc-text\">磁盘地址</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%A3%81%E7%9B%98%E9%98%B5%E5%88%97\"><span class=\"toc-text\">磁盘阵列</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98\"><span class=\"toc-text\">固态硬盘</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%AB%98%E9%80%9F%E7%BC%93%E5%86%B2%E5%82%A8%E5%AD%98%E5%99%A8\"><span class=\"toc-text\">高速缓冲储存器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Cache-%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">Cache 的基本工作原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Cache-%E5%92%8C%E4%B8%BB%E5%AD%98%E7%9A%84%E6%98%A0%E5%B0%84%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">Cache 和主存的映射方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%A8%E7%9B%B8%E8%81%94%E6%98%A0%E5%B0%84\"><span class=\"toc-text\">全相联映射</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%9B%B4%E6%8E%A5%E6%98%A0%E5%B0%84\"><span class=\"toc-text\">直接映射</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BB%84%E7%9B%B8%E8%81%94%E6%98%A0%E5%B0%84\"><span class=\"toc-text\">组相联映射</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Cache-%E4%B8%AD%E4%B8%BB%E5%AD%98%E5%9D%97%E7%9A%84%E6%9B%BF%E6%8D%A2%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">Cache 中主存块的替换算法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Cache-%E5%86%99%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">Cache 写策略</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8\"><span class=\"toc-text\">虚拟存储器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A1%B5%E5%BC%8F%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8\"><span class=\"toc-text\">页式虚拟存储器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A1%B5%E8%A1%A8\"><span class=\"toc-text\">页表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BF%AB%E8%A1%A8-TLB\"><span class=\"toc-text\">快表(TLB)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AE%B5%E5%BC%8F%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8\"><span class=\"toc-text\">段式虚拟存储器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AE%B5%E9%A1%B5%E5%BC%8F%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8\"><span class=\"toc-text\">段页式虚拟存储器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8%E4%B8%8E-Cache-%E7%9A%84%E6%AF%94%E8%BE%83\"><span class=\"toc-text\">虚拟存储器与 Cache 的比较</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">指令系统</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8C%87%E4%BB%A4%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%BD%A2%E5%BC%8F\"><span class=\"toc-text\">指令的基本形式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8C%87%E4%BB%A4%E7%9A%84%E6%93%8D%E4%BD%9C%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">指令的操作类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8C%87%E4%BB%A4%E7%9A%84%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">指令的寻址方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8C%87%E4%BB%A4%E5%AF%BB%E5%9D%80\"><span class=\"toc-text\">指令寻址</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%AF%BB%E5%9D%80\"><span class=\"toc-text\">数据寻址</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9A%90%E5%90%AB%E5%AF%BB%E5%9D%80\"><span class=\"toc-text\">隐含寻址</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AB%8B%E5%8D%B3%E6%95%B0%E5%AF%BB%E5%9D%80\"><span class=\"toc-text\">立即数寻址</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%9B%B4%E6%8E%A5%E5%AF%BB%E5%9D%80\"><span class=\"toc-text\">直接寻址</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%97%B4%E6%8E%A5%E5%AF%BB%E5%9D%80\"><span class=\"toc-text\">间接寻址</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AF%84%E5%AD%98%E5%99%A8%E5%AF%BB%E5%9D%80\"><span class=\"toc-text\">寄存器寻址</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AF%84%E5%AD%98%E5%99%A8%E9%97%B4%E6%8E%A5%E5%AF%BB%E5%9D%80\"><span class=\"toc-text\">寄存器间接寻址</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%81%8F%E7%A7%BB%E5%AF%BB%E5%9D%80\"><span class=\"toc-text\">偏移寻址</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%9B%B8%E5%AF%B9%E5%AF%BB%E5%9D%80\"><span class=\"toc-text\">相对寻址</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E5%9D%80%E5%AF%BB%E5%9D%80\"><span class=\"toc-text\">基址寻址</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%8F%98%E5%9D%80%E5%AF%BB%E5%9D%80\"><span class=\"toc-text\">变址寻址</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A0%86%E6%A0%88%E5%AF%BB%E5%9D%80\"><span class=\"toc-text\">堆栈寻址</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%90%84%E4%B8%AA%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F%E6%AF%94%E8%BE%83\"><span class=\"toc-text\">各个寻址方式比较</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E4%BB%A3%E7%A0%81%E8%A1%A8%E7%A4%BA\"><span class=\"toc-text\">程序的机器级代码表示</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">常用汇编指令介绍</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%9B%B8%E5%85%B3%E5%AF%84%E5%AD%98%E5%99%A8\"><span class=\"toc-text\">相关寄存器</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">汇编指令格式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">常用指令</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%81%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">数据传送指令</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#mov-%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">mov 指令</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#push-%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">push 指令</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#pop-%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">pop 指令</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%95%B0%E5%92%8C%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">算数和逻辑运算指令</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#add-sub-%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">add&#x2F;sub 指令</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#inc-dec-%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">inc&#x2F;dec 指令</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#imul-%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">imul 指令</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#idiv-%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">idiv 指令</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#and-or-xor-%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">and&#x2F;or&#x2F;xor 指令</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#not-%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">not 指令</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#neg-%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">neg 指令</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#shl-shr-%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">shl&#x2F;shr 指令</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%8E%A7%E5%88%B6%E6%B5%81%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">控制流指令</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#jmp-%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">jmp 指令</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#jcondition-%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">jcondition 指令</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#cmp-test-%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">cmp&#x2F;test 指令</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#call-ret-%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">call&#x2F;ret 指令</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA\"><span class=\"toc-text\">过程调用的机器级表示</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%89%E6%8B%A9%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA\"><span class=\"toc-text\">选择语句的机器级表示</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CISC-%E5%92%8C-RISC-%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">CISC 和 RISC 的基本概念</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E5%A4%AE%E5%A4%84%E7%90%86%E5%99%A8\"><span class=\"toc-text\">中央处理器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CPU-%E7%9A%84%E5%8A%9F%E8%83%BD%E5%92%8C%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">CPU 的功能和基本结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CPU-%E7%9A%84%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">CPU 的功能</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CPU-%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">CPU 的基本结构</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8C%87%E4%BB%A4%E7%9A%84%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">指令的过程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8C%87%E4%BB%A4%E5%91%A8%E6%9C%9F\"><span class=\"toc-text\">指令周期</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8C%87%E4%BB%A4%E5%91%A8%E6%9C%9F%E7%9A%84%E6%95%B0%E6%8D%AE%E6%B5%81\"><span class=\"toc-text\">指令周期的数据流</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%96%E6%8C%87%E5%91%A8%E6%9C%9F\"><span class=\"toc-text\">取指周期</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%97%B4%E5%9D%80%E5%91%A8%E6%9C%9F\"><span class=\"toc-text\">间址周期</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%89%A7%E8%A1%8C%E5%91%A8%E6%9C%9F\"><span class=\"toc-text\">执行周期</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E6%96%AD%E5%91%A8%E6%9C%9F\"><span class=\"toc-text\">中断周期</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8C%87%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%96%B9%E6%A1%88\"><span class=\"toc-text\">指令执行方案</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E9%80%9A%E8%B7%AF%E7%9A%84%E5%8A%9F%E8%83%BD%E5%92%8C%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">数据通路的功能和基本结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E9%80%9A%E8%B7%AF%E7%9A%84%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">数据通路的功能</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E9%80%9A%E8%B7%AF%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">数据通路的基本结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AF%84%E5%AD%98%E5%99%A8%E4%B9%8B%E9%97%B4%E7%9A%84%E6%95%B0%E4%BC%A0%E9%80%81\"><span class=\"toc-text\">寄存器之间的数传送</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%BB%E5%AD%98%E4%B8%8E-CPU-%E4%B9%8B%E9%97%B4%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%81\"><span class=\"toc-text\">主存与 CPU 之间的数据传送</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%89%A7%E8%A1%8C%E7%AE%97%E6%9C%AF%E6%88%96%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">执行算术或逻辑运算</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%A7%E5%88%B6%E5%99%A8%E7%9A%84%E5%8A%9F%E8%83%BD%E5%92%8C%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">控制器的功能和工作原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8E%A7%E5%88%B6%E5%99%A8%E7%9A%84%E7%BB%93%E6%9E%84%E5%92%8C%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">控制器的结构和功能</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A1%AC%E5%B8%83%E7%BA%BF%E6%8E%A7%E5%88%B6%E5%99%A8\"><span class=\"toc-text\">硬布线控制器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A1%AC%E5%B8%83%E7%BA%BF%E6%8E%A7%E5%88%B6%E5%99%A8%E7%9A%84%E6%97%B6%E5%BA%8F%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%BE%AE%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">硬布线控制器的时序系统及微操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#CPU-%E7%9A%84%E6%8E%A7%E5%88%B6%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">CPU 的控制方式</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%A1%AC%E5%B8%83%E7%BA%BF%E6%8E%A7%E5%88%B6%E5%8D%95%E5%85%83%E8%AE%BE%E8%AE%A1%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">硬布线控制单元设计步骤</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BE%AE%E7%A8%8B%E5%BA%8F%E6%8E%A7%E5%88%B6%E5%99%A8\"><span class=\"toc-text\">微程序控制器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BE%AE%E7%A8%8B%E5%BA%8F%E6%8E%A7%E5%88%B6%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">微程序控制的基本概念</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BE%AE%E7%A8%8B%E5%BA%8F%E6%8E%A7%E5%88%B6%E5%99%A8%E7%BB%84%E6%88%90%E5%92%8C%E5%B7%A5%E4%BD%9C%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">微程序控制器组成和工作过程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%BE%AE%E7%A8%8B%E5%BA%8F%E6%8E%A7%E5%88%B6%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%84%E6%88%90\"><span class=\"toc-text\">微程序控制器的基本组成</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%BE%AE%E7%A8%8B%E5%BA%8F%E6%8E%A7%E5%88%B6%E5%99%A8%E7%9A%84%E5%B7%A5%E4%BD%9C%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">微程序控制器的工作过程</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BE%AE%E7%A8%8B%E5%BA%8F%E5%92%8C%E6%9C%BA%E5%99%A8%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">微程序和机器指令</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%BE%AE%E6%8C%87%E4%BB%A4%E7%9A%84%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">微指令的编码方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E7%9B%B4%E6%8E%A5%E7%BC%96%E7%A0%81%EF%BC%88%E7%9B%B4%E6%8E%A5%E6%8E%A7%E5%88%B6%EF%BC%89%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">直接编码（直接控制）方式</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%AD%97%E6%AE%B5%E7%9B%B4%E6%8E%A5%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">字段直接编码方式</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%AD%97%E6%AE%B5%E9%97%B4%E6%8E%A5%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">字段间接编码方式</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%BE%AE%E6%8C%87%E4%BB%A4%E7%9A%84%E5%9C%B0%E5%9D%80%E5%BD%A2%E6%88%90%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">微指令的地址形成方式</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%BE%AE%E6%8C%87%E4%BB%A4%E7%9A%84%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">微指令的格式</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%BE%AE%E7%A8%8B%E5%BA%8F%E6%8E%A7%E5%88%B6%E5%8D%95%E5%85%83%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">微程序控制单元的设计步骤</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%8A%A8%E6%80%81%E5%BE%AE%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%92%8C%E6%AF%AB%E5%BE%AE%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">动态微程序设计和毫微程序设计</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A1%AC%E5%B8%83%E7%BA%BF%E6%8E%A7%E5%88%B6%E5%99%A8%E5%92%8C%E5%BE%AE%E7%A8%8B%E5%BA%8F%E6%8E%A7%E5%88%B6%E5%99%A8%E7%9A%84%E6%AF%94%E8%BE%83\"><span class=\"toc-text\">硬布线控制器和微程序控制器的比较</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8C%87%E4%BB%A4%E6%B5%81%E6%B0%B4%E7%BA%BF\"><span class=\"toc-text\">指令流水线</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8C%87%E4%BB%A4%E6%B5%81%E6%B0%B4%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">指令流水的定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%81%E6%B0%B4%E7%BA%BF%E7%9A%84%E8%A1%A8%E7%A4%BA%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">流水线的表示方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%96%B9%E5%BC%8F%E7%9A%84%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">流水线方式的特点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%81%E6%B0%B4%E7%BA%BF%E7%9A%84%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">流水线的分类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%83%A8%E4%BB%B6%E5%8A%9F%E8%83%BD%E7%BA%A7%E3%80%81%E5%A4%84%E7%90%86%E6%9C%BA%E7%BA%A7%E5%92%8C%E5%A4%84%E7%90%86%E6%9C%BA%E9%97%B4%E7%BA%A7%E6%B5%81%E6%B0%B4%E7%BA%BF\"><span class=\"toc-text\">部件功能级、处理机级和处理机间级流水线</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%8D%95%E5%8A%9F%E8%83%BD%E6%B5%81%E6%B0%B4%E7%BA%BF%E5%92%8C%E5%A4%9A%E5%8A%9F%E8%83%BD%E6%B5%81%E6%B0%B4%E7%BA%BF\"><span class=\"toc-text\">单功能流水线和多功能流水线</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%8A%A8%E6%80%81%E6%B5%81%E6%B0%B4%E7%BA%BF%E5%92%8C%E9%9D%99%E6%80%81%E6%B5%81%E6%B0%B4%E7%BA%BF\"><span class=\"toc-text\">动态流水线和静态流水线</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E6%80%A7%E6%B5%81%E6%B0%B4%E7%BA%BF%E5%92%8C%E9%9D%9E%E7%BA%BF%E6%80%A7%E6%B5%81%E6%B0%B4%E7%BA%BF\"><span class=\"toc-text\">线性流水线和非线性流水线</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BD%B1%E5%93%8D%E6%B5%81%E6%B0%B4%E7%BA%BF%E7%9A%84%E5%9B%A0%E7%B4%A0\"><span class=\"toc-text\">&#x3D;&#x3D;影响流水线的因素&#x3D;&#x3D;</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%B5%84%E6%BA%90%E5%86%92%E9%99%A9\"><span class=\"toc-text\">资源冒险</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%86%92%E9%99%A9\"><span class=\"toc-text\">数据冒险</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%8E%A7%E5%88%B6%E5%86%92%E9%99%A9\"><span class=\"toc-text\">控制冒险</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%81%E6%B0%B4%E7%BA%BF%E7%9A%84%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87\"><span class=\"toc-text\">&#x3D;&#x3D;流水线的性能指标&#x3D;&#x3D;</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%90%9E%E5%90%90%E7%8E%87\"><span class=\"toc-text\">吞吐率</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8A%A0%E9%80%9F%E6%AF%94\"><span class=\"toc-text\">加速比</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%95%88%E7%8E%87\"><span class=\"toc-text\">效率</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%94%E6%AE%B5%E5%BC%8F%E6%8C%87%E4%BB%A4%E6%B5%81%E6%B0%B4%E7%BA%BF\"><span class=\"toc-text\">&#x3D;&#x3D;五段式指令流水线&#x3D;&#x3D;</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%AE%97%E7%B1%BB%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">运算类指令</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#LOAD-%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">LOAD 指令</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#STORE-%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">STORE 指令</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9D%A1%E4%BB%B6%E8%BD%AC%E7%A7%BB%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">条件转移指令</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%97%A0%E6%9D%A1%E4%BB%B6%E8%BD%AC%E7%A7%BB%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">无条件转移指令</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%AB%98%E7%BA%A7%E6%B5%81%E6%B0%B4%E6%8A%80%E6%9C%AF\"><span class=\"toc-text\">高级流水技术</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%B6%85%E6%A0%87%E9%87%8F%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%8A%80%E6%9C%AF\"><span class=\"toc-text\">超标量流水线技术</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%B6%85%E9%95%BF%E6%8C%87%E4%BB%A4%E5%AD%97\"><span class=\"toc-text\">超长指令字</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%B6%85%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%8A%80%E6%9C%AF\"><span class=\"toc-text\">超流水线技术</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">多处理器的基本概念</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SISD%E3%80%81SIMD%E3%80%81MIMD\"><span class=\"toc-text\">SISD、SIMD、MIMD</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8D%95%E6%8C%87%E4%BB%A4%E6%B5%81%E5%8D%95%E6%95%B0%E6%8D%AE%E6%B5%81%E7%BB%93%E6%9E%84-SISD\"><span class=\"toc-text\">单指令流单数据流结构(SISD)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8D%95%E6%8C%87%E4%BB%A4%E6%B5%81%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%B5%81%E7%BB%93%E6%9E%84%EF%BC%88SIMD%EF%BC%89\"><span class=\"toc-text\">单指令流多数据流结构（SIMD）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E6%8C%87%E4%BB%A4%E6%B5%81%E5%8D%95%E6%95%B0%E6%8D%AE%E6%B5%81%E7%BB%93%E6%9E%84%EF%BC%88MISD%EF%BC%89\"><span class=\"toc-text\">多指令流单数据流结构（MISD）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E6%8C%87%E4%BB%A4%E6%B5%81%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%B5%81%E7%BB%93%E6%9E%84%EF%BC%88MIMD%EF%BC%89\"><span class=\"toc-text\">多指令流多数据流结构（MIMD）</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A1%AC%E4%BB%B6%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">硬件多线程的基本概念</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E6%A0%B8%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">多核处理器的基本概念</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E5%A4%9A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">共享内存多处理器的基本概念</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BA%BF\"><span class=\"toc-text\">总线</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BA%BF%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">总线概述</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BA%BF%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">总线基本概念</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BA%BF%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">总线的定义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BA%BF%E8%AE%BE%E5%A4%87\"><span class=\"toc-text\">总线设备</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BA%BF%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">总线特性</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BA%BF%E7%9A%84%E7%8C%9D%E5%8F%91%E4%BC%A0%E8%BE%93%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">&#x3D;&#x3D;总线的猝发传输方式&#x3D;&#x3D;</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BA%BF%E7%9A%84%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">总线的分类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%89%87%E5%86%85%E6%80%BB%E7%BA%BF\"><span class=\"toc-text\">片内总线</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%B3%BB%E7%BB%9F%E6%80%BB%E7%BA%BF\"><span class=\"toc-text\">系统总线</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#I-O%E6%80%BB%E7%BA%BF\"><span class=\"toc-text\">I&#x2F;O总线</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%80%9A%E4%BF%A1%E6%80%BB%E7%BA%BF\"><span class=\"toc-text\">通信总线</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%B3%BB%E7%BB%9F%E6%80%BB%E7%BA%BF%E7%9A%84%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">系统总线的结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8D%95%E6%80%BB%E7%BA%BF%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">单总线结构</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%8C%E6%80%BB%E7%BA%BF%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">双总线结构</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%89%E6%80%BB%E7%BA%BF%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">三总线结构</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BA%BF%E7%9A%84%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87\"><span class=\"toc-text\">&#x3D;&#x3D;总线的性能指标&#x3D;&#x3D;</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BA%BF%E4%BB%B2%E8%A3%81\"><span class=\"toc-text\">*总线仲裁</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9B%86%E4%B8%AD%E4%BB%B2%E8%A3%81%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">集中仲裁方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%93%BE%E5%BC%8F%E6%9F%A5%E8%AF%A2%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">链式查询方式</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%AE%A1%E6%95%B0%E5%99%A8%E5%AE%9A%E6%97%B6%E6%9F%A5%E8%AF%A2%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">计数器定时查询方式</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%8B%AC%E7%AB%8B%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">独立请求方式</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%B8%83%E4%BB%B2%E8%A3%81%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">分布仲裁方式</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81%E7%9A%84%E6%80%BB%E7%BA%BF%E6%A0%87%E5%87%86\"><span class=\"toc-text\">常见的总线标准</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BA%BF%E4%BA%8B%E5%8A%A1%E5%92%8C%E5%AE%9A%E6%97%B6\"><span class=\"toc-text\">总线事务和定时</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BA%BF%E4%BA%8B%E5%8A%A1\"><span class=\"toc-text\">总线事务</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%8C%E6%AD%A5%E5%AE%9A%E6%97%B6%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">同步定时方式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BC%82%E6%AD%A5%E5%AE%9A%E6%97%B6%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">异步定时方式</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">输入输出系统</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#I-O-%E7%B3%BB%E7%BB%9F%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">*I&#x2F;O 系统基本概念</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5-%E8%BE%93%E5%87%BA%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">输入&#x2F;输出系统</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#I-O-%E6%8E%A7%E5%88%B6%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">I&#x2F;O 控制方式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%96%E9%83%A8%E8%AE%BE%E5%A4%87\"><span class=\"toc-text\">外部设备</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E8%AE%BE%E5%A4%87\"><span class=\"toc-text\">输入设备</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%94%AE%E7%9B%98\"><span class=\"toc-text\">键盘</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%BC%A0%E6%A0%87\"><span class=\"toc-text\">鼠标</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E8%AE%BE%E5%A4%87\"><span class=\"toc-text\">输出设备</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%98%BE%E7%A4%BA%E5%99%A8\"><span class=\"toc-text\">显示器</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%89%93%E5%8D%B0%E6%9C%BA\"><span class=\"toc-text\">打印机</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#I-O-%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">I&#x2F;O 接口</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#I-O-%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">I&#x2F;O 接口的功能</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#I-O-%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">I&#x2F;O 接口的基本结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#I-O-%E6%8E%A5%E5%8F%A3%E7%9A%84%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">I&#x2F;O 接口的类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#I-O-%E7%AB%AF%E5%8F%A3%E5%8F%8A%E5%85%B6%E7%BC%96%E5%9D%80\"><span class=\"toc-text\">I&#x2F;O 端口及其编址</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#I-O-%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">I&#x2F;O 方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A8%8B%E5%BA%8F%E6%9F%A5%E8%AF%A2%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">程序查询方式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A8%8B%E5%BA%8F%E4%B8%AD%E6%96%AD%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">&#x3D;&#x3D;程序中断方式&#x3D;&#x3D;</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BC%82%E5%B8%B8%E5%92%8C%E4%B8%AD%E6%96%AD\"><span class=\"toc-text\">异常和中断</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%BC%82%E5%B8%B8\"><span class=\"toc-text\">异常</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD\"><span class=\"toc-text\">外部中断</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E6%96%AD%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">中断的基本概念</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A8%8B%E5%BA%8F%E4%B8%AD%E6%96%AD%E6%96%B9%E5%BC%8F%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">程序中断方式工作流程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E6%96%AD%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">中断请求</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E6%96%AD%E5%88%A4%E4%BC%98\"><span class=\"toc-text\">中断判优</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#CPU-%E5%93%8D%E5%BA%94%E4%B8%AD%E6%96%AD%E7%9A%84%E6%9D%A1%E4%BB%B6\"><span class=\"toc-text\">CPU 响应中断的条件</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E6%96%AD%E5%93%8D%E5%BA%94\"><span class=\"toc-text\">中断响应</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E6%96%AD%E5%90%91%E9%87%8F\"><span class=\"toc-text\">中断向量</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E6%96%AD%E5%A4%84%E7%90%86%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">中断处理过程</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E9%87%8D%E4%B8%AD%E6%96%AD%E5%92%8C%E4%B8%AD%E6%96%AD%E5%B1%8F%E8%94%BD%E6%8A%80%E6%9C%AF\"><span class=\"toc-text\">多重中断和中断屏蔽技术</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DMA-%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">&#x3D;&#x3D;DMA 方式&#x3D;&#x3D;</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#DMA-%E6%96%B9%E5%BC%8F%E7%9A%84%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">DMA 方式的特点</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#DMA-%E6%8E%A7%E5%88%B6%E5%99%A8%E7%9A%84%E7%BB%84%E6%88%90\"><span class=\"toc-text\">DMA 控制器的组成</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#DMA-%E7%9A%84%E4%BC%A0%E9%80%81%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">DMA 的传送方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#DMA-%E7%9A%84%E4%BC%A0%E9%80%81%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">DMA 的传送过程</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#DMA-%E6%96%B9%E5%BC%8F%E5%92%8C%E4%B8%AD%E6%96%AD%E6%96%B9%E5%BC%8F%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">DMA 方式和中断方式的区别</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CPU-%E5%93%8D%E5%BA%94%E4%B8%AD%E6%96%AD%E5%BA%94%E5%85%B7%E5%A4%87%E5%93%AA%E4%BA%9B%E6%9D%A1%E4%BB%B6\"><span class=\"toc-text\">CPU 响应中断应具备哪些条件?</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E6%96%AD%E5%93%8D%E5%BA%94%E4%BC%98%E5%85%88%E7%BA%A7%E5%92%8C%E4%B8%AD%E6%96%AD%E5%A4%84%E7%90%86%E4%BC%98%E5%85%88%E7%BA%A7%E5%88%86%E5%88%AB%E6%8C%87%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">中断响应优先级和中断处理优先级分别指什么?</span></a></li></ol></li></ol></li></ol>","author":{"name":"ND_LJQ","slug":"blog-author","avatar":"/svg/head.jpg","link":"/","description":"一位正在摆烂的大四渣滓😋 <br /> @ <b>劉三刀的摆烂生活</b>","socials":{"github":"https://github.com/ND-LJQ","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_52475868?type=blog","juejin":"https://juejin.cn/user/2032336272362109","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/391491132?spm_id_from=333.1007.0.0"},"gitee":{"icon":"/svg/gitee-fill-round.svg","link":"https://gitee.com/liu-jq"}}}},"mapped":true,"prev_post":{"title":"软件工程基础","uid":"4f1b28a46122dcbfdd696db503d86e97","slug":"软件工程基础","date":"2023-07-18T03:21:00.000Z","updated":"2023-07-18T03:37:46.182Z","comments":true,"path":"api/articles/软件工程基础.json","keywords":null,"cover":[],"text":"软件工程 软件工程的概念和思想 何为软件工程 1968年,北大西洋公约组织(NATO)科学委员会在西德召开的研讨会上着重讨论如何应对软件危机,会上人们首次提出\"软件工程\"概念,进而开启了软件工程的研究与实践 根据IEEE给出的定义,软件工程是指: ①将系统的、规范的、可量化的方法...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"计算机基础","slug":"计算机基础","count":4,"path":"api/categories/计算机基础.json"},{"name":"软件工程","slug":"计算机基础/软件工程","count":1,"path":"api/categories/计算机基础/软件工程.json"}],"tags":[{"name":"软件工程","slug":"软件工程","count":1,"path":"api/tags/软件工程.json"}],"author":{"name":"ND_LJQ","slug":"blog-author","avatar":"/svg/head.jpg","link":"/","description":"一位正在摆烂的大四渣滓😋 <br /> @ <b>劉三刀的摆烂生活</b>","socials":{"github":"https://github.com/ND-LJQ","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_52475868?type=blog","juejin":"https://juejin.cn/user/2032336272362109","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/391491132?spm_id_from=333.1007.0.0"},"gitee":{"icon":"/svg/gitee-fill-round.svg","link":"https://gitee.com/liu-jq"}}}}},"next_post":{}}